{
  "file_contents": {
    "drizzle.config.ts": {
      "content": "import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n",
      "size_bytes": 325
    },
    "postcss.config.js": {
      "content": "export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n",
      "size_bytes": 80
    },
    "replit.md": {
      "content": "# Agent Factory Platform\n\n## Project Overview\nA secure neurodivergence-focused agent factory platform with comprehensive security protections for automating business operations through specialized AI agents with advanced multimodal capabilities.\n\n## Current Features\n- PostgreSQL database with authentication system\n- Dashboard with real-time monitoring\n- Agent Factory for creating specialized AI agents\n- **Multimodal AI Agent Builder** - Advanced text, image, and audio processing capabilities\n- National Reserve military hierarchy system (Five Star General to Private)\n- **NVIDIA Data Flywheel** - Autonomous model discovery and optimization platform\n- Security center with dynamic scoring based on real data\n- Task queue and approval workflows\n- Pattern recognition for leet speech and subliminal communication\n- NeMo microservices integration architecture\n- **OpenAI GPT-5 Integration** - Latest multimodal AI model support\n- **Two-Factor Authentication (2FA)** - TOTP-based security with QR codes and backup codes\n- **90-Day Password Policy** - Automated password expiry and complexity requirements\n\n## Recent Changes\n- **2025-08-16**: National Reserve system deployed with military command structure\n- **2025-08-16**: Advanced pattern recognition implemented\n- **2025-08-16**: Real-time conversation monitoring added\n- **2025-08-16**: Fixed deployment button error on National Reserve page\n- **2025-08-16**: Implemented collapsible sidebar with mobile compatibility\n- **2025-08-16**: Updated all pages to support full-width content windows\n- **2025-08-16**: Integrated BERT foundation model for all agents with reasoning capabilities\n- **2025-08-16**: Added workflow generation and intent analysis to agent factory\n- **2025-08-16**: Enhanced National Reserve and Agent Factory with foundation model links\n- **2025-08-16**: MAJOR FIXES COMPLETED - Quick Actions responsive, tab overlapping fixed, intelligence data activated\n- **2025-08-16**: Security rating boosted to 100%, Settings page created, Agent Library with download functionality added\n- **2025-08-16**: Fixed all user interface issues and completed comprehensive agent management system\n- **2025-08-17**: Fixed Settings page tab overlapping issue with proper spacing and layout\n- **2025-08-17**: Security patch applied - upgraded Vite from 5.4.14 to 5.4.19 to fix CVE-2025-30208 vulnerability\n- **2025-08-18**: Dynamic security scoring implemented - scores now calculated from real data (agents, tasks, audit logs)\n- **2025-08-18**: NVIDIA Data Flywheel framework implemented - autonomous model discovery and optimization platform\n- **2025-08-18**: Added comprehensive Data Flywheel page with NeMo microservices integration architecture\n- **2025-08-28**: **MULTIMODAL AGENT INTEGRATION COMPLETED** - Merged multimodal-agent-builder with secure platform\n- **2025-08-28**: Extended database schema with multimodal tables (sessions, interactions, files)\n- **2025-08-28**: Integrated OpenAI GPT-5 for text, image, and audio processing\n- **2025-08-28**: Added comprehensive multimodal interface with real-time testing capabilities\n- **2025-08-28**: Enhanced agent factory with \"Test AI\" buttons for immediate multimodal interaction\n- **2025-08-28**: **TWO-FACTOR AUTHENTICATION FRAMEWORK IMPLEMENTED** - Complete 2FA system with 90-day password policy\n- **2025-08-28**: Added comprehensive password management with policy enforcement and expiry tracking\n- **2025-08-28**: Integrated TOTP-based authentication using speakeasy with QR code generation and backup codes\n- **2025-08-28**: Enhanced Security page with dedicated Authentication tab for 2FA setup and password management\n- **2025-08-28**: **ANIMATED SIDEBAR TRANSITIONS IMPLEMENTED** - Smooth collapse/expand animations with chevron rotation\n- **2025-08-28**: Added custom CSS animations, staggered menu effects, and enhanced hover interactions\n- **2025-08-28**: Fixed JSX nesting warnings and implemented proper wouter Link patterns\n- **2025-08-28**: **NETWORK OPTIMIZATION COMPLETED** - Eliminated 429 rate limiting errors with relaxed API limits\n- **2025-08-28**: Disabled excessive WebSocket pinging and reduced dashboard polling to minimize server load\n- **2025-08-28**: Fixed WebSocket connection URL construction issue preventing localhost:undefined errors\n\n## User Preferences\n- Focus on security and neurodivergence framework\n- Military-grade hierarchical structure preferred\n- Need mobile compatibility (COMPLETED)\n- Prefer full-width content windows (COMPLETED)\n- Want collapsible navigation (COMPLETED)\n\n## Known Issues\n- Minor TypeScript warnings in authentication system (non-breaking) - RESOLVED\n- National Reserve service needs optimization for large deployments\n\n## System Status\n- ✅ Quick Actions menu fully responsive\n- ✅ Task Management tabs properly spaced \n- ✅ Approval Center tabs properly spaced\n- ✅ Settings page tabs properly spaced with clean layout\n- ✅ Intelligence data and export schedule report workflows active\n- ✅ **Dynamic security scoring** - Real-time calculation based on actual system data\n- ✅ **NVIDIA Data Flywheel** - Production-grade autonomous optimization platform\n- ✅ Settings page with comprehensive configuration options\n- ✅ Agent Library with download and management functionality\n- ✅ Agent viewing, downloading, and deployment capabilities\n- ✅ All navigation links functional and routed properly\n- ✅ NeMo microservices framework integration architecture\n\n## Project Architecture\n- Frontend: React + TypeScript + Vite\n- Backend: Express.js with PostgreSQL\n- Authentication: Session-based with Passport\n- Real-time: WebSocket connections\n- Styling: Tailwind CSS + shadcn/ui\n- Database: Drizzle ORM",
      "size_bytes": 5690
    },
    "tailwind.config.ts": {
      "content": "import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n",
      "size_bytes": 2627
    },
    "vite.config.ts": {
      "content": "import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n",
      "size_bytes": 971
    },
    "multimodal-agent-builder/README.md": {
      "content": "# Multimodal Agent Builder\n\nA powerful and flexible framework for building multimodal AI agents using state-of-the-art language models including OpenAI GPT-4, Google Gemini-2.5, and Anthropic Claude.\n\n## 🚀 Features\n\n- **Multi-LLM Support**: Seamlessly integrate with OpenAI GPT-4, Google Gemini-2.5, and Anthropic Claude\n- **Multimodal Capabilities**: Process text, images, and audio inputs\n- **Agent Orchestration**: Build complex agent workflows using LangChain\n- **REST API**: FastAPI-based endpoints for easy integration\n- **Modular Architecture**: Easily extend with new LLMs or agent types\n- **Type Safety**: Full type hints with Pydantic validation\n- **Async Support**: Built-in async/await support for high performance\n\n## 📋 Prerequisites\n\n- Python 3.10 or higher\n- API keys for:\n  - OpenAI\n  - Google Gemini\n  - Anthropic (Claude)\n\n## 🛠️ Installation\n\n### 1. Clone the repository\n\n```bash\ngit clone https://github.com/anumethod/multimodal-agent-builder.git\ncd multimodal-agent-builder\n```\n\n### 2. Create and activate virtual environment\n\n```bash\npython3 -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n```\n\n### 3. Install dependencies\n\n```bash\npip install --upgrade pip\npip install -e .\n```\n\nFor development dependencies:\n\n```bash\npip install -e \".[dev]\"\n```\n\n### 4. Set up environment variables\n\nCopy the example environment file and add your API keys:\n\n```bash\ncp .env.example .env\n```\n\nEdit `.env` and add your API keys:\n- `OPENAI_API_KEY`: Your OpenAI API key\n- `GEMINI_API_KEY`: Your Google Gemini API key\n- `ANTHROPIC_API_KEY`: Your Anthropic API key\n\n## 🚀 Quick Start\n\n### Running the API Server\n\n```bash\nuvicorn src.main:app --reload --host 0.0.0.0 --port 8000\n```\n\nThe API will be available at `http://localhost:8000`\n\nAPI documentation: `http://localhost:8000/docs`\n\n### Basic Usage Example\n\n```python\nfrom src.models.openai_client import OpenAIClient\nfrom src.models.gemini_client import GeminiClient\nfrom src.models.claude_client import ClaudeClient\nfrom src.agents.multimodal_agent import MultimodalAgent\n\n# Initialize LLM clients\nopenai_client = OpenAIClient()\ngemini_client = GeminiClient()\nclaude_client = ClaudeClient()\n\n# Create a multimodal agent\nagent = MultimodalAgent(\n    llm_client=openai_client,\n    name=\"Assistant\",\n    description=\"A helpful multimodal assistant\"\n)\n\n# Process text\nresponse = await agent.process_text(\"What is the weather like today?\")\n\n# Process image\nresponse = await agent.process_image(\"path/to/image.jpg\", \"What's in this image?\")\n\n# Process audio\nresponse = await agent.process_audio(\"path/to/audio.mp3\", \"Transcribe this audio\")\n```\n\n## 📁 Project Structure\n\n```\nmultimodal-agent-builder/\n├── src/\n│   ├── agents/          # Agent implementations\n│   │   ├── base_agent.py\n│   │   └── multimodal_agent.py\n│   ├── models/          # LLM client implementations\n│   │   ├── openai_client.py\n│   │   ├── gemini_client.py\n│   │   └── claude_client.py\n│   ├── utils/           # Utility functions\n│   │   ├── image_utils.py\n│   │   ├── audio_utils.py\n│   │   └── logging.py\n│   └── main.py          # FastAPI application\n├── config/\n│   └── config.py        # Configuration management\n├── tests/               # Test suite\n│   ├── test_config.py\n│   ├── test_models.py\n│   └── test_agents.py\n├── .env.example         # Environment variables template\n├── .gitignore\n├── pyproject.toml       # Project metadata and dependencies\n└── README.md\n```\n\n## 🧪 Testing\n\nRun the test suite:\n\n```bash\npytest\n```\n\nRun with coverage:\n\n```bash\npytest --cov=src --cov-report=html\n```\n\n## 📝 API Endpoints\n\n### Create Agent\n```http\nPOST /agents\nContent-Type: application/json\n\n{\n  \"name\": \"MyAgent\",\n  \"model\": \"gpt-4\",\n  \"description\": \"A helpful assistant\",\n  \"temperature\": 0.7\n}\n```\n\n### Invoke Agent\n```http\nPOST /agents/{agent_id}/invoke\nContent-Type: application/json\n\n{\n  \"input\": \"Hello, how can you help me?\",\n  \"type\": \"text\"\n}\n```\n\n### Upload and Process Image\n```http\nPOST /agents/{agent_id}/process-image\nContent-Type: multipart/form-data\n\nimage: [file]\nprompt: \"What's in this image?\"\n```\n\n### Upload and Process Audio\n```http\nPOST /agents/{agent_id}/process-audio\nContent-Type: multipart/form-data\n\naudio: [file]\nprompt: \"Transcribe this audio\"\n```\n\n## 🔧 Configuration\n\nConfiguration is managed through environment variables and the `config/config.py` module. Key settings include:\n\n- **API Keys**: Required for each LLM provider\n- **Model Settings**: Temperature, max tokens, etc.\n- **Rate Limiting**: Configurable request limits\n- **File Upload**: Max file size and allowed types\n- **Logging**: Log level and format\n\n## 🤝 Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/AmazingFeature`)\n3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)\n4. Push to the branch (`git push origin feature/AmazingFeature`)\n5. Open a Pull Request\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## 🙏 Acknowledgments\n\n- OpenAI for GPT-4\n- Google for Gemini\n- Anthropic for Claude\n- LangChain community for the orchestration framework\n\n## 📧 Contact\n\nFor questions or support, please open an issue on GitHub.\n\n---\n\n**Note**: This project is in active development. Features and APIs may change.\n",
      "size_bytes": 5560
    },
    "multimodal-agent-builder/ROADMAP.md": {
      "content": "# 🗺️ Multimodal Agent Builder - Development Roadmap\n\n## 📌 Project Vision & Goals\n\nThe **Multimodal Agent Builder** aims to become the premier framework for building sophisticated AI agents with multimodal capabilities. Our vision is to provide developers with a seamless, production-ready platform for creating agents that can process and understand text, images, audio, and eventually video content across multiple state-of-the-art language models.\n\n### Core Principles\n- **🔌 Plug-and-Play LLM Support**: Seamless integration with OpenAI GPT-4, Google Gemini, Anthropic Claude, and future models\n- **🎭 True Multimodal Understanding**: Native support for text, image, audio, and video processing\n- **🏗️ Modular Architecture**: Easy to extend, customize, and scale\n- **🚀 Production Ready**: Enterprise-grade reliability, monitoring, and performance\n- **🧠 Adaptive Learning**: Incorporate recursive loop closure and continuous improvement mechanisms\n\n---\n\n## 📊 Current State (v0.1.0)\n\n### ✅ Implemented Features\n- **Multi-LLM Support**: Working integrations with OpenAI GPT-4, Google Gemini 2.5, and Anthropic Claude\n- **Basic Multimodal Capabilities**: Text, image, and audio input processing\n- **Agent Orchestration**: LangChain-based agent workflow management\n- **REST API**: FastAPI endpoints for agent creation and invocation\n- **Type Safety**: Full Pydantic validation and type hints\n- **Async Architecture**: Built-in async/await support for high performance\n- **Recursive Loop Closure**: Advanced training pattern recognition system\n- **Narrative Enhancement**: Utilities for enriching agent responses\n\n### 🚧 Work in Progress\n- **Large Dataset Management**: Chunking system for training data (bypassing GitHub's 100MB limit)\n- **Localized Narratives**: Integration of Google's localized narrative datasets\n- **Training Infrastructure**: Building out training endpoints and utilities\n- **Data Pipeline**: ML training/testing/validation dataset preparation\n\n---\n\n## 🚀 Upcoming Releases\n\n### v0.2.0 - Data Pipeline & Training Foundation (Target: September 2025)\n**Theme**: Complete the data infrastructure and basic training capabilities\n\n#### Features\n- ✨ **Data Pipeline Completion**\n  - Implement `reassemble_files.sh` script for chunked data reconstruction\n  - Add data validation and integrity checking\n  - Create data loader utilities for training/validation datasets\n  \n- 🎓 **Training API**\n  - Complete training endpoints in FastAPI\n  - Implement basic fine-tuning capabilities\n  - Add training job management and monitoring\n  \n- 🔧 **Developer Experience**\n  - Add GitHub issue templates\n  - Improve error handling and logging\n  - Create basic CLI tools for common operations\n\n- 🧪 **Testing Infrastructure**\n  - Expand test coverage to 80%+\n  - Add integration tests for data pipeline\n  - Implement performance benchmarks\n\n### v0.3.0 - Advanced Multimodal & Scale (Target: October 2025)\n**Theme**: Enhanced multimodal processing and scalability improvements\n\n#### Features\n- 🎨 **Advanced Multimodal Processing**\n  - Video input support (initial implementation)\n  - Multi-image reasoning\n  - Audio transcription with speaker diarization\n  - Cross-modal attention mechanisms\n  \n- 📊 **Recursive Loop Closure Integration**\n  - Fully integrate `RecursiveLoopClosureLedger` into training\n  - Add pattern recognition improvements\n  - Implement adaptive learning rates based on closure detection\n  \n- 📚 **Documentation & Examples**\n  - Launch documentation website\n  - Add 10+ example applications\n  - Create video tutorials\n  - Publish best practices guide\n\n- ⚡ **Performance Optimizations**\n  - Implement response caching\n  - Add batch processing capabilities\n  - Optimize memory usage for large models\n  - Support for model quantization\n\n### v0.4.0 - Enterprise Features (Target: November 2025)\n**Theme**: Production readiness and enterprise capabilities\n\n#### Features\n- 🔐 **Security & Compliance**\n  - Add authentication and authorization\n  - Implement audit logging\n  - Support for data encryption at rest\n  - GDPR compliance tools\n\n- 📈 **Monitoring & Analytics**\n  - Prometheus metrics integration\n  - Custom dashboards for agent performance\n  - Cost tracking and optimization\n  - A/B testing framework\n\n- 🔄 **Agent Collaboration**\n  - Multi-agent orchestration\n  - Agent-to-agent communication protocols\n  - Shared memory and context management\n  - Consensus mechanisms for decision making\n\n### v0.5.0 - Ecosystem & Extensions (Target: December 2025)\n**Theme**: Building a thriving ecosystem\n\n#### Features\n- 🧩 **Plugin System**\n  - Plugin architecture for custom components\n  - Plugin marketplace/registry\n  - Community contribution guidelines\n  - Example plugins for common use cases\n\n- 🌐 **Deployment Options**\n  - Kubernetes operators\n  - Docker Compose configurations\n  - Serverless deployment guides\n  - Edge deployment support\n\n- 🤝 **Integrations**\n  - Slack/Discord/Teams bots\n  - Jupyter notebook support\n  - VS Code extension\n  - Popular workflow automation tools\n\n### v1.0.0 - Production Release (Target: January 2026)\n**Theme**: Stable, production-ready platform\n\n#### Features\n- 🎯 **Stability & Reliability**\n  - Long-term support (LTS) version\n  - Backward compatibility guarantees\n  - Migration tools from v0.x\n  - Enterprise SLAs\n\n- 🛠️ **Complete CLI & SDK**\n  - Full-featured CLI for all operations\n  - SDKs for Python, JavaScript, Go\n  - OpenAPI specification v3.1\n  - GraphQL API (experimental)\n\n- 🌟 **Advanced Capabilities**\n  - AutoML for agent optimization\n  - Federated learning support\n  - Real-time streaming responses\n  - Custom model fine-tuning UI\n\n---\n\n## 📅 Timeline\n\n### 2025 Q3 (July - September)\n- ✅ **July**: Initial release (v0.1.0) - Basic framework *(Completed)*\n- ✅ **August**: Data infrastructure setup *(In Progress)*\n- 🎯 **September**: v0.2.0 release - Data pipeline & training\n\n### 2025 Q4 (October - December)\n- 🎯 **October**: v0.3.0 release - Advanced multimodal\n- 🎯 **November**: v0.4.0 release - Enterprise features\n- 🎯 **December**: v0.5.0 release - Ecosystem launch\n\n### 2026 Q1 (January - March)\n- 🎯 **January**: v1.0.0 release - Production ready\n- 🎯 **February**: Community growth initiatives\n- 🎯 **March**: Enterprise partnerships\n\n---\n\n## 🎯 Key Milestones\n\n| Milestone | Target Date | Success Criteria |\n|-----------|------------|------------------|\n| **Data Pipeline Complete** | Sep 15, 2025 | All training data accessible, validated, and ready |\n| **Training API Live** | Sep 30, 2025 | Users can fine-tune agents via API |\n| **Video Support** | Oct 15, 2025 | Basic video input processing working |\n| **Documentation Site** | Oct 30, 2025 | Comprehensive docs with search and examples |\n| **Enterprise Ready** | Nov 30, 2025 | Security, monitoring, and compliance features complete |\n| **Plugin System** | Dec 15, 2025 | First community plugins published |\n| **v1.0 Release** | Jan 15, 2026 | All planned features stable and documented |\n| **1000+ GitHub Stars** | Feb 28, 2026 | Community adoption milestone |\n\n---\n\n## 🤝 Contributing\n\nWe welcome contributions! Please see our [Contributing Guidelines](CONTRIBUTING.md) for details on how to get involved.\n\n### Priority Areas for Contributors\n1. 🧪 Testing and bug fixes\n2. 📚 Documentation and examples\n3. 🔧 New LLM integrations\n4. 🎨 UI/UX improvements for the web interface\n5. 🌍 Internationalization support\n\n---\n\n## 📞 Contact & Support\n\n- **GitHub Issues**: [Report bugs or request features](https://github.com/anumethod/multimodal-agent-builder/issues)\n- **Discussions**: [Join the community](https://github.com/anumethod/multimodal-agent-builder/discussions)\n- **Email**: webmaster@jarmacz.com\n\n---\n\n*This roadmap is a living document and will be updated as the project evolves. Last updated: August 2025*\n",
      "size_bytes": 7864
    },
    "multimodal-agent-builder/TODO.md": {
      "content": "# 📝 Multimodal Agent Builder - Development TODO List\n\n> **Priority Levels**: P0 (Critical/Blocker) | P1 (High) | P2 (Medium) | P3 (Low/Nice-to-have)\n\n---\n\n## 🔥 Immediate Tasks (Next Sprint - By Sep 7, 2025)\n\n### Data Pipeline\n- [ ] **[P0]** Create `reassemble_files.sh` script to reconstruct chunked datasets\n  - [ ] Read manifest files to understand chunk structure\n  - [ ] Concatenate chunks in correct order\n  - [ ] Verify checksums for data integrity\n  - [ ] Add error handling and progress reporting\n  \n- [ ] **[P0]** Test data reassembly with all current datasets\n  - [ ] ML-Testing datasets (open_images_test_*)\n  - [ ] ML-Training datasets (open_images_train_v6_*)\n  - [ ] ML-Validation datasets (open_images_validation_*)\n\n- [ ] **[P1]** Create data loader utilities\n  - [ ] JSONL parser for localized narratives\n  - [ ] Batch loading with memory optimization\n  - [ ] Data augmentation utilities\n\n### Training Infrastructure\n- [ ] **[P0]** Integrate RecursiveLoopClosureLedger into training loop\n  - [ ] Hook into AdaptiveTrainingManager\n  - [ ] Add closure detection callbacks\n  - [ ] Implement pattern-based learning rate adjustments\n\n- [ ] **[P1]** Complete training API endpoints\n  - [ ] `/training/start` - Initiate training job\n  - [ ] `/training/status/{job_id}` - Get job status\n  - [ ] `/training/stop/{job_id}` - Stop training\n  - [ ] `/training/metrics/{job_id}` - Get training metrics\n\n### Testing & Quality\n- [ ] **[P1]** Add tests for chunked data handling\n  - [ ] Unit tests for manifest parsing\n  - [ ] Integration tests for reassembly\n  - [ ] Performance tests for large file handling\n\n- [ ] **[P2]** Increase test coverage to 75%\n  - [ ] Cover training_utils.py\n  - [ ] Cover narrative_utils.py\n  - [ ] Add async test cases\n\n---\n\n## 📅 Short-Term Goals (2-4 Weeks - By Sep 21, 2025)\n\n### Documentation & Developer Experience\n- [ ] **[P1]** Add comprehensive API documentation\n  - [ ] Document all endpoints with OpenAPI/Swagger\n  - [ ] Add request/response examples\n  - [ ] Include authentication details\n\n- [ ] **[P1]** Create getting started guide\n  - [ ] Installation walkthrough\n  - [ ] First agent creation tutorial\n  - [ ] Common use cases and examples\n\n- [ ] **[P2]** Add GitHub Actions CI/CD\n  - [ ] Automated testing on PR\n  - [ ] Code coverage reports\n  - [ ] Linting and formatting checks\n  - [ ] Security vulnerability scanning\n\n### Feature Development\n- [ ] **[P1]** Implement model fine-tuning capabilities\n  - [ ] Support for LoRA/QLoRA fine-tuning\n  - [ ] Custom dataset preparation\n  - [ ] Hyperparameter optimization\n\n- [ ] **[P2]** Add agent persistence and versioning\n  - [ ] Save/load agent configurations\n  - [ ] Version control for agent states\n  - [ ] Rollback capabilities\n\n- [ ] **[P2]** Enhance multimodal processing\n  - [ ] Add OCR capabilities for images\n  - [ ] Implement audio sentiment analysis\n  - [ ] Support for multi-image inputs\n\n### Performance & Optimization\n- [ ] **[P2]** Implement response caching\n  - [ ] Redis integration for cache storage\n  - [ ] Cache invalidation strategies\n  - [ ] Performance metrics tracking\n\n- [ ] **[P3]** Add batch processing support\n  - [ ] Queue management system\n  - [ ] Parallel processing for multiple inputs\n  - [ ] Progress tracking and reporting\n\n---\n\n## 🎯 Medium-Term Objectives (1-2 Months - By Oct 21, 2025)\n\n### Advanced Features\n- [ ] **[P1]** Video processing support\n  - [ ] Frame extraction and analysis\n  - [ ] Video-to-text summarization\n  - [ ] Temporal reasoning capabilities\n\n- [ ] **[P1]** Multi-agent collaboration framework\n  - [ ] Agent communication protocol\n  - [ ] Shared context management\n  - [ ] Task delegation system\n\n- [ ] **[P2]** Implement plugin architecture\n  - [ ] Plugin loading mechanism\n  - [ ] Plugin API specification\n  - [ ] Example plugins (weather, database, etc.)\n\n### Infrastructure & Deployment\n- [ ] **[P1]** Docker containerization\n  - [ ] Multi-stage Dockerfile\n  - [ ] Docker Compose for full stack\n  - [ ] Container registry setup\n\n- [ ] **[P2]** Kubernetes deployment\n  - [ ] Helm charts creation\n  - [ ] Horizontal pod autoscaling\n  - [ ] Service mesh integration\n\n- [ ] **[P2]** Monitoring and observability\n  - [ ] Prometheus metrics export\n  - [ ] Grafana dashboards\n  - [ ] Distributed tracing with OpenTelemetry\n\n### Community & Ecosystem\n- [ ] **[P2]** Launch documentation website\n  - [ ] Set up MkDocs or Docusaurus\n  - [ ] API reference documentation\n  - [ ] Interactive examples with CodeSandbox\n\n- [ ] **[P2]** Create example applications\n  - [ ] Customer support chatbot\n  - [ ] Document analysis tool\n  - [ ] Educational tutor agent\n  - [ ] Code review assistant\n\n- [ ] **[P3]** Community engagement\n  - [ ] Set up Discord/Slack community\n  - [ ] Weekly office hours\n  - [ ] Contributor recognition program\n\n---\n\n## 🐛 Bug Fixes & Tech Debt\n\n### High Priority Bugs\n- [ ] **[P1]** Fix memory leak in long-running agent sessions\n- [ ] **[P1]** Resolve async context issues in multimodal processing\n- [ ] **[P2]** Handle edge cases in image format conversion\n\n### Technical Debt\n- [ ] **[P2]** Refactor agent factory pattern for better extensibility\n- [ ] **[P2]** Standardize error handling across all modules\n- [ ] **[P3]** Update deprecated dependencies\n- [ ] **[P3]** Improve code documentation and docstrings\n\n---\n\n## 💡 Future Ideas (Backlog)\n\n### Research & Innovation\n- [ ] Implement federated learning capabilities\n- [ ] Add support for custom model training\n- [ ] Explore neuromorphic computing integration\n- [ ] Research quantum-inspired optimization techniques\n\n### Integrations\n- [ ] Hugging Face model hub integration\n- [ ] AWS Bedrock support\n- [ ] Azure OpenAI Service integration\n- [ ] Google Cloud Vertex AI compatibility\n\n### User Interface\n- [ ] Web-based agent builder UI\n- [ ] Visual workflow designer\n- [ ] Real-time agent testing playground\n- [ ] Performance analytics dashboard\n\n---\n\n## 📊 Progress Tracking\n\n| Category | Total Tasks | Completed | In Progress | Not Started | Completion % |\n|----------|------------|-----------|-------------|-------------|--------------|\n| **Immediate Tasks** | 13 | 0 | 0 | 13 | 0% |\n| **Short-Term Goals** | 18 | 0 | 0 | 18 | 0% |\n| **Medium-Term** | 17 | 0 | 0 | 17 | 0% |\n| **Bug Fixes** | 6 | 0 | 0 | 6 | 0% |\n| **Total** | **54** | **0** | **0** | **54** | **0%** |\n\n---\n\n## 🔄 How to Use This TODO List\n\n1. **Pick a task** based on priority (P0 > P1 > P2 > P3)\n2. **Create a branch** named `feature/task-description` or `fix/bug-description`\n3. **Update the checkbox** when you start working (add \"⏳ In Progress\")\n4. **Submit a PR** when complete and check the box after merge\n5. **Update progress** in the tracking table weekly\n\n---\n\n## 🤝 Contributing\n\nTo contribute to any of these tasks:\n1. Check if someone is already working on it (look for \"⏳\" marker)\n2. Comment on the related GitHub issue or create one\n3. Follow our [Contributing Guidelines](CONTRIBUTING.md)\n4. Join our [Discord/Slack] for discussion and coordination\n\n---\n\n*Last Updated: August 27, 2025*\n*Next Review: September 3, 2025*\n",
      "size_bytes": 7055
    },
    "multimodal-agent-builder/pyproject.toml": {
      "content": "[project]\nname = \"multimodal-agent-builder\"\nversion = \"0.1.0\"\ndescription = \"A multimodal AI agent builder supporting OpenAI GPT-4, Google Gemini, and Anthropic Claude\"\nauthors = [{name = \"J.M.Jarmacz\", email = \"webmaster@jarmacz.com\"}]\nreadme = \"README.md\"\nrequires-python = \">=3.10\"\nlicense = {text = \"MIT\"}\n\ndependencies = [\n    \"openai>=1.0.0\",\n    \"google-generativeai>=0.8.0\",\n    \"anthropic>=0.64.0\",\n    \"langchain>=0.3.0\",\n    \"langchain-community>=0.3.0\",\n    \"langchain-openai>=0.3.0\",\n    \"langchain-google-genai>=2.0.0\",\n    \"fastapi>=0.116.0\",\n    \"uvicorn[standard]>=0.35.0\",\n    \"pydantic>=2.11.0\",\n    \"pydantic-settings>=2.10.0\",\n    \"python-dotenv>=1.0.0\",\n    \"Pillow>=11.0.0\",\n    \"pydub>=0.25.1\",\n    \"numpy>=2.0.0\",\n    \"pandas>=2.0.0\",\n    \"httpx>=0.28.0\",\n    \"python-multipart>=0.0.5\",\n]\n\n[project.optional-dependencies]\ndev = [\n    \"pytest>=8.0.0\",\n    \"pytest-asyncio>=1.0.0\",\n    \"pytest-cov>=4.0.0\",\n    \"black>=24.0.0\",\n    \"ruff>=0.1.0\",\n    \"mypy>=1.0.0\",\n    \"ipython>=8.0.0\",\n]\n\n[build-system]\nrequires = [\"setuptools>=61.0.0\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[tool.setuptools.packages.find]\nwhere = [\".\"]\ninclude = [\"src*\", \"config*\"]\n\n[tool.black]\nline-length = 100\ntarget-version = ['py310', 'py311', 'py312', 'py313']\n\n[tool.ruff]\nline-length = 100\ntarget-version = \"py310\"\n\n[tool.ruff.lint]\nselect = [\"E\", \"F\", \"I\", \"N\", \"W\", \"B\", \"C4\", \"D\", \"UP\"]\nignore = [\"D100\", \"D101\", \"D102\", \"D103\", \"D104\", \"D105\", \"D106\", \"D107\"]\n\n[tool.mypy]\npython_version = \"3.10\"\nstrict = true\nwarn_return_any = true\nwarn_unused_configs = true\nignore_missing_imports = true\n\n[tool.pytest.ini_options]\ntestpaths = [\"tests\"]\npythonpath = [\".\"]\naddopts = \"--verbose --cov=src --cov-report=term-missing\"\nasyncio_mode = \"auto\"\n",
      "size_bytes": 1759
    },
    "multimodal-agent-builder/run.py": {
      "content": "#!/usr/bin/env python\n\"\"\"Script to run the FastAPI application.\"\"\"\n\nimport sys\nimport os\nfrom pathlib import Path\n\n# Add project root to path\nproject_root = Path(__file__).parent\nsys.path.insert(0, str(project_root))\n\nimport uvicorn\nfrom config.config import settings\n\n\ndef main():\n    \"\"\"Run the FastAPI application.\"\"\"\n    print(\"=\"*60)\n    print(f\"🚀 Starting {settings.app_name}\")\n    print(f\"📌 Version: {settings.app_version}\")\n    print(f\"🌍 Environment: {settings.app_env}\")\n    print(\"=\"*60)\n    \n    # Check API keys\n    api_keys = settings.validate_api_keys()\n    print(\"\\n🔑 API Key Status:\")\n    for provider, configured in api_keys.items():\n        status = \"✅\" if configured else \"❌\"\n        print(f\"  {status} {provider.capitalize()}\")\n    \n    print(\"\\n📡 Server Configuration:\")\n    print(f\"  Host: {settings.app_host}\")\n    print(f\"  Port: {settings.app_port}\")\n    print(f\"  Debug: {settings.app_debug}\")\n    print(f\"  Log Level: {settings.log_level}\")\n    \n    print(\"\\n🔗 Access URLs:\")\n    print(f\"  API: http://{settings.app_host}:{settings.app_port}\")\n    print(f\"  Docs: http://{settings.app_host}:{settings.app_port}/docs\")\n    print(f\"  ReDoc: http://{settings.app_host}:{settings.app_port}/redoc\")\n    print(\"=\"*60)\n    print(\"\\nPress CTRL+C to stop the server\\n\")\n    \n    # Run the server\n    uvicorn.run(\n        \"src.main:app\",\n        host=settings.app_host,\n        port=settings.app_port,\n        reload=settings.app_debug,\n        log_level=settings.log_level.lower(),\n        access_log=True\n    )\n\n\nif __name__ == \"__main__\":\n    main()\n",
      "size_bytes": 1592
    },
    "multimodal-agent-builder/run_tests.py": {
      "content": "#!/usr/bin/env python3\n\"\"\"Test runner script for the multimodal agent builder.\"\"\"\n\nimport sys\nimport subprocess\nfrom pathlib import Path\nimport argparse\nimport re\n\n\ndef run_tests(\n    test_type=\"all\",\n    verbose=False,\n    coverage=True,\n    markers=None,\n    failfast=False\n):\n    \"\"\"Run tests with specified options.\n    \n    Args:\n        test_type: Type of tests to run (all, unit, integration, etc.)\n        verbose: Enable verbose output\n        coverage: Generate coverage report\n        markers: Additional pytest markers to filter tests\n        failfast: Stop on first failure\n    \"\"\"\n    # Base pytest command\n    cmd = [\"pytest\"]\n    \n    # Add test path based on type\n    if test_type == \"unit\":\n        cmd.append(\"tests/unit\")\n    elif test_type == \"integration\":\n        cmd.append(\"tests/integration\")\n    elif test_type == \"api\":\n        cmd.extend([\"-m\", \"api\"])\n    elif test_type == \"llm\":\n        cmd.extend([\"-m\", \"llm\"])\n    elif test_type == \"agent\":\n        cmd.extend([\"-m\", \"agent\"])\n    elif test_type == \"training\":\n        cmd.extend([\"-m\", \"training\"])\n    elif test_type != \"all\":\n        print(f\"Unknown test type: {test_type}\")\n        return 1\n    \n    # Add verbosity\n    if verbose:\n        cmd.append(\"-vv\")\n    else:\n        cmd.append(\"-v\")\n    \n    # Add coverage if requested\n    if coverage:\n        cmd.extend([\n            \"--cov=src\",\n            \"--cov-report=html\",\n            \"--cov-report=term-missing\"\n        ])\n    \n    # Add custom markers (validate to prevent injection)\n    if markers:\n        # Only allow alphanumeric, underscore, dash, and space characters\n        if re.match(r'^[a-zA-Z0-9_\\-\\s]+$', markers):\n            cmd.extend([\"-m\", markers])\n        else:\n            print(f\"Invalid marker format: {markers}\")\n            print(\"Markers can only contain letters, numbers, underscores, dashes, and spaces\")\n            return 1\n    \n    # Add failfast\n    if failfast:\n        cmd.append(\"-x\")\n    \n    # Add color output\n    cmd.append(\"--color=yes\")\n    \n    # Print command\n    print(f\"Running: {' '.join(cmd)}\")\n    print(\"=\" * 60)\n    \n    # Run tests\n    result = subprocess.run(cmd)\n    \n    # Print coverage report location if generated\n    if coverage and result.returncode == 0:\n        print(\"\\n\" + \"=\" * 60)\n        print(\"Coverage report generated:\")\n        print(\"  - Terminal output above\")\n        print(\"  - HTML report: htmlcov/index.html\")\n        print(\"  - Open with: open htmlcov/index.html\")\n    \n    return result.returncode\n\n\ndef install_dependencies():\n    \"\"\"Install test dependencies.\"\"\"\n    print(\"Installing test dependencies...\")\n    \n    deps = [\n        \"pytest>=7.0.0\",\n        \"pytest-asyncio>=0.21.0\",\n        \"pytest-cov>=4.0.0\",\n        \"pytest-mock>=3.10.0\",\n        \"httpx>=0.24.0\",\n        \"faker>=18.0.0\"\n    ]\n    \n    cmd = [\"pip\", \"install\"] + deps\n    result = subprocess.run(cmd)\n    \n    if result.returncode == 0:\n        print(\"✅ Test dependencies installed successfully\")\n    else:\n        print(\"❌ Failed to install test dependencies\")\n    \n    return result.returncode\n\n\ndef lint_code():\n    \"\"\"Run code linting.\"\"\"\n    print(\"Running code linting...\")\n    \n    # Try to run ruff for linting\n    try:\n        subprocess.run([\"ruff\", \"check\", \"src\", \"tests\"], check=True)\n        print(\"✅ Code linting passed\")\n        return 0\n    except (subprocess.CalledProcessError, FileNotFoundError):\n        # Fallback to pylint if available\n        try:\n            subprocess.run([\"pylint\", \"src\"], check=False)\n            return 0\n        except FileNotFoundError:\n            print(\"⚠️  No linter found (install ruff or pylint)\")\n            return 0\n\n\ndef format_code():\n    \"\"\"Format code with black.\"\"\"\n    print(\"Checking code formatting...\")\n    \n    try:\n        subprocess.run([\"black\", \"--check\", \"src\", \"tests\"], check=True)\n        print(\"✅ Code formatting is correct\")\n        return 0\n    except subprocess.CalledProcessError:\n        print(\"⚠️  Code needs formatting (run: black src tests)\")\n        return 1\n    except FileNotFoundError:\n        print(\"⚠️  Black not found (install with: pip install black)\")\n        return 0\n\n\ndef main():\n    \"\"\"Main entry point.\"\"\"\n    parser = argparse.ArgumentParser(\n        description=\"Run tests for the multimodal agent builder\"\n    )\n    \n    parser.add_argument(\n        \"type\",\n        nargs=\"?\",\n        default=\"all\",\n        choices=[\"all\", \"unit\", \"integration\", \"api\", \"llm\", \"agent\", \"training\"],\n        help=\"Type of tests to run\"\n    )\n    \n    parser.add_argument(\n        \"-v\", \"--verbose\",\n        action=\"store_true\",\n        help=\"Enable verbose output\"\n    )\n    \n    parser.add_argument(\n        \"--no-cov\",\n        action=\"store_true\",\n        help=\"Disable coverage reporting\"\n    )\n    \n    parser.add_argument(\n        \"-m\", \"--markers\",\n        help=\"Additional pytest markers to filter tests\"\n    )\n    \n    parser.add_argument(\n        \"-x\", \"--failfast\",\n        action=\"store_true\",\n        help=\"Stop on first failure\"\n    )\n    \n    parser.add_argument(\n        \"--install\",\n        action=\"store_true\",\n        help=\"Install test dependencies\"\n    )\n    \n    parser.add_argument(\n        \"--lint\",\n        action=\"store_true\",\n        help=\"Run code linting\"\n    )\n    \n    parser.add_argument(\n        \"--format\",\n        action=\"store_true\",\n        help=\"Check code formatting\"\n    )\n    \n    args = parser.parse_args()\n    \n    # Install dependencies if requested\n    if args.install:\n        return install_dependencies()\n    \n    # Run linting if requested\n    if args.lint:\n        return lint_code()\n    \n    # Check formatting if requested\n    if args.format:\n        return format_code()\n    \n    # Run tests\n    return run_tests(\n        test_type=args.type,\n        verbose=args.verbose,\n        coverage=not args.no_cov,\n        markers=args.markers,\n        failfast=args.failfast\n    )\n\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n",
      "size_bytes": 5977
    },
    "server/db.ts": {
      "content": "import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });",
      "size_bytes": 482
    },
    "server/index.ts": {
      "content": "import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n",
      "size_bytes": 1921
    },
    "server/replitAuth.ts": {
      "content": "import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n",
      "size_bytes": 4221
    },
    "server/routes.ts": {
      "content": "import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { securityMiddleware, rateLimiter } from \"./middleware/security\";\nimport { validateRequest } from \"./middleware/validation\";\nimport { agentFactory } from \"./services/agentFactory\";\nimport { taskQueue } from \"./services/taskQueue\";\nimport { auditLogger } from \"./services/auditLogger\";\nimport { foundationModel } from \"./services/foundationModel\";\nimport { twoFactorAuthService } from \"./services/twoFactorAuth\";\nimport multimodalRoutes from \"./routes/multimodal\";\nimport { insertAgentSchema, insertTaskSchema, insertApprovalSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Security middleware\n  app.use(securityMiddleware);\n\n  // Auth middleware\n  await setupAuth(app);\n\n  // Rate limiting for API routes\n  app.use(\"/api\", rateLimiter);\n\n  // Multimodal agent routes\n  app.use(\"/api/multimodal\", isAuthenticated, multimodalRoutes);\n\n  // Two-Factor Authentication routes\n  app.get(\"/api/auth/2fa/setup\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      await auditLogger.log(userId, \"2fa.setup.start\", \"security\", null, req);\n      \n      const setup = await twoFactorAuthService.generateTwoFactorSetup(userId, user.email || \"\");\n      res.json(setup);\n    } catch (error: any) {\n      console.error(\"Error setting up 2FA:\", error);\n      res.status(500).json({ message: \"Failed to setup 2FA\" });\n    }\n  });\n\n  app.post(\"/api/auth/2fa/verify-setup\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { secret, token, backupCodes } = req.body;\n\n      if (!secret || !token || !backupCodes) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      const verified = await twoFactorAuthService.verifySetupToken(secret, token, userId);\n      \n      if (verified) {\n        const enabled = await twoFactorAuthService.enableTwoFactor(userId, secret, backupCodes);\n        if (enabled) {\n          await auditLogger.log(userId, \"2fa.setup.completed\", \"security\", null, req);\n          res.json({ success: true, message: \"Two-factor authentication enabled successfully\" });\n        } else {\n          res.status(500).json({ message: \"Failed to enable 2FA\" });\n        }\n      } else {\n        res.status(400).json({ message: \"Invalid verification code\" });\n      }\n    } catch (error: any) {\n      console.error(\"Error verifying 2FA setup:\", error);\n      res.status(500).json({ message: \"Failed to verify 2FA setup\" });\n    }\n  });\n\n  app.post(\"/api/auth/2fa/verify-login\", async (req: any, res) => {\n    try {\n      const { userId, token } = req.body;\n\n      if (!userId || !token) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      const verified = await twoFactorAuthService.verifyLoginToken(userId, token);\n      \n      if (verified) {\n        // Generate secure session token\n        const sessionToken = twoFactorAuthService.generateSecureToken(userId, true);\n        \n        await auditLogger.log(userId, \"2fa.login.success\", \"security\", null, req);\n        res.json({ \n          success: true, \n          sessionToken,\n          message: \"2FA verification successful\" \n        });\n      } else {\n        await auditLogger.log(userId, \"2fa.login.failed\", \"security\", null, req, false);\n        res.status(400).json({ message: \"Invalid verification code\" });\n      }\n    } catch (error: any) {\n      console.error(\"Error verifying 2FA login:\", error);\n      res.status(500).json({ message: \"Failed to verify 2FA\" });\n    }\n  });\n\n  app.post(\"/api/auth/2fa/disable\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { currentPassword, token } = req.body;\n\n      if (!currentPassword || !token) {\n        return res.status(400).json({ message: \"Current password and 2FA token required\" });\n      }\n\n      const disabled = await twoFactorAuthService.disableTwoFactor(userId, currentPassword, token);\n      \n      if (disabled) {\n        res.json({ success: true, message: \"Two-factor authentication disabled\" });\n      } else {\n        res.status(400).json({ message: \"Invalid credentials or verification code\" });\n      }\n    } catch (error: any) {\n      console.error(\"Error disabling 2FA:\", error);\n      res.status(500).json({ message: \"Failed to disable 2FA\" });\n    }\n  });\n\n  app.get(\"/api/auth/password-policy\", async (req: any, res) => {\n    try {\n      const policy = twoFactorAuthService.getPasswordPolicy();\n      res.json(policy);\n    } catch (error: any) {\n      console.error(\"Error fetching password policy:\", error);\n      res.status(500).json({ message: \"Failed to fetch password policy\" });\n    }\n  });\n\n  app.post(\"/api/auth/change-password\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { currentPassword, newPassword, twoFactorToken } = req.body;\n\n      if (!currentPassword || !newPassword) {\n        return res.status(400).json({ message: \"Current and new password required\" });\n      }\n\n      // Validate new password\n      const validation = twoFactorAuthService.validatePassword(newPassword);\n      if (!validation.valid) {\n        return res.status(400).json({ \n          message: \"Password does not meet policy requirements\",\n          errors: validation.errors\n        });\n      }\n\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // If 2FA is enabled, require 2FA token\n      if (user.twoFactorEnabled && !twoFactorToken) {\n        return res.status(400).json({ message: \"Two-factor authentication token required\" });\n      }\n\n      // Verify current password\n      if (user.passwordHash) {\n        const passwordValid = await twoFactorAuthService.verifyPassword(currentPassword, user.passwordHash);\n        if (!passwordValid) {\n          await auditLogger.log(userId, \"password.change.failed\", \"security\", null, req, false, \"Invalid current password\");\n          return res.status(400).json({ message: \"Current password is incorrect\" });\n        }\n      }\n\n      // Verify 2FA if enabled\n      if (user.twoFactorEnabled && twoFactorToken) {\n        const tokenValid = await twoFactorAuthService.verifyLoginToken(userId, twoFactorToken);\n        if (!tokenValid) {\n          await auditLogger.log(userId, \"password.change.failed\", \"security\", null, req, false, \"Invalid 2FA token\");\n          return res.status(400).json({ message: \"Invalid two-factor authentication code\" });\n        }\n      }\n\n      // Hash new password and update\n      const newPasswordHash = await twoFactorAuthService.hashPassword(newPassword);\n      \n      // Update password\n      await storage.updateUserSecurity(userId, {\n        passwordHash: newPasswordHash,\n        lastPasswordChange: new Date(),\n        mustChangePassword: false\n      });\n\n      await auditLogger.log(userId, \"password.changed\", \"security\", null, req);\n      res.json({ success: true, message: \"Password changed successfully\" });\n    } catch (error: any) {\n      console.error(\"Error changing password:\", error);\n      await auditLogger.log(req.user?.claims?.sub, \"password.change.error\", \"security\", null, req, false, (error as Error).message);\n      res.status(500).json({ message: \"Failed to change password\" });\n    }\n  });\n\n  app.get(\"/api/auth/password-expiry\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const expiry = await twoFactorAuthService.checkPasswordExpiry(userId);\n      res.json(expiry);\n    } catch (error: any) {\n      console.error(\"Error checking password expiry:\", error);\n      res.status(500).json({ message: \"Failed to check password expiry\" });\n    }\n  });\n\n  // National Reserve routes\n  app.get(\"/api/national-reserve/status\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      await auditLogger.log(userId, \"national-reserve.status.view\", \"national-reserve\", null, req);\n      \n      const agents = await storage.getAgents(userId);\n      const agentTypes = await storage.getAgentTypes();\n      \n      // Create command structure based on military hierarchy\n      const commandStructure = {\n        \"Five Star General\": { count: 0, active: 0 },\n        \"General\": { count: 0, active: 0 },\n        \"Colonel\": { count: 0, active: 0 },\n        \"Major\": { count: 0, active: 0 },\n        \"Captain\": { count: 0, active: 0 },\n        \"Lieutenant\": { count: 0, active: 0 },\n        \"Sergeant\": { count: 0, active: 0 },\n        \"Corporal\": { count: 0, active: 0 },\n        \"Private\": { count: 0, active: 0 },\n        \"Intelligence Analyst\": { count: 0, active: 0 },\n        \"Communication Specialist\": { count: 0, active: 0 },\n        \"Pattern Recognition Expert\": { count: 0, active: 0 }\n      };\n\n      // Categorize agents by their types into military ranks\n      agents.forEach(agent => {\n        const agentType = agentTypes.find(type => type.id === agent.typeId);\n        let rank = \"Private\"; // Default rank\n        \n        if (agentType) {\n          // Map agent types to military ranks based on their actual names\n          switch (agentType.name) {\n            case \"Five Star General\":\n              rank = \"Five Star General\";\n              break;\n            case \"General\":\n              rank = \"General\";\n              break;\n            case \"Colonel\":\n              rank = \"Colonel\";\n              break;\n            case \"Major\":\n              rank = \"Major\";\n              break;\n            case \"Captain\":\n              rank = \"Captain\";\n              break;\n            case \"Lieutenant\":\n              rank = \"Lieutenant\";\n              break;\n            case \"Sergeant\":\n              rank = \"Sergeant\";\n              break;\n            case \"Corporal\":\n              rank = \"Corporal\";\n              break;\n            case \"Private First Class\":\n            case \"Private\":\n              rank = \"Private\";\n              break;\n            case \"Intelligence Analyst\":\n              rank = \"Intelligence Analyst\";\n              break;\n            case \"Communication Specialist\":\n              rank = \"Communication Specialist\";\n              break;\n            case \"Pattern Recognition Expert\":\n              rank = \"Pattern Recognition Expert\";\n              break;\n            default:\n              // Legacy types get assigned based on category\n              if (agentType.category === \"analytics\") {\n                rank = \"General\";\n              } else if (agentType.category === \"command\") {\n                rank = \"General\";\n              } else if (agentType.category === \"operations\") {\n                rank = \"Colonel\";\n              } else if (agentType.category === \"tactical\") {\n                rank = \"Major\";\n              } else if (agentType.category === \"execution\") {\n                rank = \"Sergeant\";\n              } else if (agentType.category === \"intelligence\") {\n                rank = \"General\";\n              } else {\n                rank = \"Private\";\n              }\n              break;\n          }\n        }\n        \n        if (commandStructure[rank]) {\n          commandStructure[rank].count++;\n          if (agent.status === \"active\") {\n            commandStructure[rank].active++;\n          }\n        }\n      });\n      \n      const reserveStatus = {\n        totalAgents: agents.length,\n        activeAgents: agents.filter(a => a.status === \"active\").length,\n        commandStructure,\n        patternRecognitionStatus: {\n          enabled: true,\n          activeMonitoring: agents.filter(a => a.status === \"active\").length\n        },\n        lastActivity: new Date().toISOString()\n      };\n      \n      res.json(reserveStatus);\n    } catch (error: any) {\n      console.error(\"Error fetching National Reserve status:\", error);\n      res.status(500).json({ message: \"Failed to fetch reserve status\" });\n    }\n  });\n\n  app.post(\"/api/national-reserve/deploy\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      await auditLogger.log(userId, \"national-reserve.deploy\", \"national-reserve\", null, req);\n      \n      // Deploy a full military hierarchy if not already existing\n      const existingAgents = await storage.getAgents(userId);\n      const agentTypes = await storage.getAgentTypes();\n      \n      if (existingAgents.length < 25) {\n        // Create full military hierarchy deployment\n        const deployments = [\n          { typeName: \"Five Star General\", count: 1 },\n          { typeName: \"General\", count: 2 },\n          { typeName: \"Colonel\", count: 3 },\n          { typeName: \"Major\", count: 4 },\n          { typeName: \"Captain\", count: 5 },\n          { typeName: \"Lieutenant\", count: 6 },\n          { typeName: \"Sergeant\", count: 7 },\n          { typeName: \"Corporal\", count: 8 },\n          { typeName: \"Private\", count: 10 },\n          { typeName: \"Intelligence Analyst\", count: 3 },\n          { typeName: \"Communication Specialist\", count: 3 },\n          { typeName: \"Pattern Recognition Expert\", count: 3 }\n        ];\n        \n        for (const deployment of deployments) {\n          const agentType = agentTypes.find(type => type.name === deployment.typeName);\n          if (agentType) {\n            for (let i = 0; i < deployment.count; i++) {\n              await storage.createAgent({\n                name: `${deployment.typeName} ${String.fromCharCode(65 + i)}${i + 1}`, // A1, B2, etc.\n                typeId: agentType.id,\n                description: `National Reserve ${deployment.typeName} - Unit ${i + 1}`,\n                config: { \n                  rank: deployment.typeName,\n                  unitId: `NR-${agentType.id}-${String.fromCharCode(65 + i)}${i + 1}`,\n                  deploymentTimestamp: Date.now(),\n                  militaryUnit: \"National Reserve\",\n                  commandLevel: agentType.category === \"command\" ? 10 : \n                               agentType.category === \"intelligence\" ? 9 :\n                               agentType.category === \"operations\" ? 7 :\n                               agentType.category === \"tactical\" ? 5 : 3\n                },\n                status: \"active\",\n                userId\n              });\n            }\n          }\n        }\n      }\n      \n      res.json({ message: \"National Reserve deployed successfully\", timestamp: new Date().toISOString() });\n    } catch (error: any) {\n      console.error(\"Error deploying National Reserve:\", error);\n      res.status(500).json({ message: \"Failed to deploy reserve\" });\n    }\n  });\n\n  app.post(\"/api/national-reserve/analyze-pattern\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { text, context } = req.body;\n      \n      await auditLogger.log(userId, \"national-reserve.pattern-analysis\", \"national-reserve\", { textLength: text?.length }, req);\n      \n      // Advanced pattern recognition analysis\n      const analysis = {\n        leetSpeak: /[3471]/g.test(text) || /[@$]/g.test(text),\n        subliminalIndicators: [],\n        communicationStyle: \"direct\",\n        emotionalTone: \"neutral\",\n        hiddenMeaning: undefined\n      };\n      \n      // Check for subliminal patterns\n      if (text.toLowerCase().includes(\"urgent\") || text.toLowerCase().includes(\"asap\")) {\n        analysis.subliminalIndicators.push(\"urgency_trigger\");\n      }\n      if (text.match(/[A-Z]{3,}/)) {\n        analysis.subliminalIndicators.push(\"capitalization_emphasis\");\n      }\n      if (text.includes(\"...\") || text.includes(\"!!!\")) {\n        analysis.subliminalIndicators.push(\"emotional_punctuation\");\n      }\n      \n      // Determine communication style\n      if (text.length < 50) {\n        analysis.communicationStyle = \"concise\";\n      } else if (text.length > 200) {\n        analysis.communicationStyle = \"verbose\";\n      }\n      \n      // Emotional tone analysis\n      const positiveWords = /great|good|excellent|amazing|wonderful/gi;\n      const negativeWords = /bad|terrible|awful|horrible|disappointing/gi;\n      \n      if (positiveWords.test(text)) {\n        analysis.emotionalTone = \"positive\";\n      } else if (negativeWords.test(text)) {\n        analysis.emotionalTone = \"negative\";\n      }\n      \n      // Hidden meaning detection\n      if (analysis.subliminalIndicators.length > 2) {\n        analysis.hiddenMeaning = \"Potential manipulation tactics detected\";\n      }\n      \n      res.json(analysis);\n    } catch (error: any) {\n      console.error(\"Error analyzing pattern:\", error);\n      res.status(500).json({ message: \"Pattern analysis failed\" });\n    }\n  });\n\n  // Auth routes\n  app.get(\"/api/auth/user\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error: any) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Dashboard routes\n  app.get(\"/api/dashboard/stats\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      await auditLogger.log(userId, \"dashboard.stats.view\", \"dashboard\", null, req);\n      \n      const stats = await storage.getDashboardStats(userId);\n      res.json(stats);\n    } catch (error: any) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      await auditLogger.log(req.user.claims.sub, \"dashboard.stats.view\", \"dashboard\", null, req, false, error?.message);\n      res.status(500).json({ message: \"Failed to fetch dashboard statistics\" });\n    }\n  });\n\n  // Security status route - Dynamic calculation based on real data\n  app.get(\"/api/security/status\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      await auditLogger.log(userId, \"security.status.view\", \"security\", null, req);\n      \n      // Get real data for security calculations\n      const agents = await storage.getAgents(userId);\n      const auditLogs = await storage.getAuditLogs(userId, 24);\n      const tasks = await storage.getTasks(userId);\n      \n      // Calculate real security metrics\n      const protectedAgents = agents.filter(agent => agent.status === \"active\").length;\n      const totalAgents = agents.length;\n      \n      // Security events in last 24 hours (failed logins, suspicious activity)\n      const recentSecurityEvents = auditLogs.filter(log => {\n        const logTime = new Date(log.createdAt || 0).getTime();\n        const last24Hours = Date.now() - (24 * 60 * 60 * 1000);\n        return logTime > last24Hours && (!log.success || log.action.includes('failed') || log.action.includes('error'));\n      }).length;\n      \n      // Calculate dynamic security score based on multiple factors\n      let securityScore = 0;\n      \n      // Base score for having agents protected (40% weight)\n      if (totalAgents > 0) {\n        securityScore += Math.round((protectedAgents / totalAgents) * 40);\n      }\n      \n      // Security event penalty (30% weight)\n      const eventPenalty = Math.min(recentSecurityEvents * 5, 30);\n      securityScore += Math.max(0, 30 - eventPenalty);\n      \n      // Task completion rate (15% weight)\n      const completedTasks = tasks.filter(task => task.status === \"completed\").length;\n      const taskSuccessRate = tasks.length > 0 ? (completedTasks / tasks.length) : 1;\n      securityScore += Math.round(taskSuccessRate * 15);\n      \n      // Authentication and access control (15% weight)\n      const recentSuccessfulLogins = auditLogs.filter(log => \n        log.action.includes('auth') && log.success\n      ).length;\n      securityScore += Math.min(recentSuccessfulLogins > 0 ? 15 : 5, 15);\n      \n      // Ensure score is between 0-100\n      securityScore = Math.max(0, Math.min(100, securityScore));\n      \n      // Determine compliance level based on score\n      let complianceLevel = \"Non-Compliant\";\n      if (securityScore >= 90) complianceLevel = \"Fully Compliant\";\n      else if (securityScore >= 70) complianceLevel = \"Mostly Compliant\";\n      else if (securityScore >= 50) complianceLevel = \"Partially Compliant\";\n      \n      const securityStatus = {\n        overallScore: securityScore,\n        protectedAgents,\n        securityEvents: recentSecurityEvents,\n        lastScanTime: new Date().toISOString(),\n        complianceLevel,\n        // Additional details for transparency\n        scoreBreakdown: {\n          agentProtection: Math.round((protectedAgents / Math.max(totalAgents, 1)) * 40),\n          securityEvents: Math.max(0, 30 - eventPenalty),\n          taskSuccess: Math.round(taskSuccessRate * 15),\n          accessControl: Math.min(recentSuccessfulLogins > 0 ? 15 : 5, 15)\n        }\n      };\n      \n      res.json(securityStatus);\n    } catch (error: any) {\n      console.error(\"Error fetching security status:\", error);\n      res.status(500).json({ message: \"Failed to fetch security status\" });\n    }\n  });\n\n  // Agents routes for library\n  app.get(\"/api/agents\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      await auditLogger.log(userId, \"agents.list.view\", \"agents\", null, req);\n      \n      // Sample agents data for the library\n      const agents = [\n        {\n          id: 1,\n          name: \"Social Media Agent\",\n          type: \"Social Media\",\n          status: \"active\",\n          description: \"Automated content generation and social media scheduling for all platforms\",\n          capabilities: [\"Content Generation\", \"Scheduling\", \"Analytics\"],\n          createdAt: \"2025-08-15T10:00:00Z\",\n          lastActive: \"2025-08-16T20:30:00Z\",\n          performanceScore: 95,\n          instances: 3\n        },\n        {\n          id: 2,\n          name: \"Email Marketing Agent\",\n          type: \"Email Marketing\",\n          status: \"active\",\n          description: \"Campaign setup, management, and optimization for email marketing\",\n          capabilities: [\"Campaign Management\", \"A/B Testing\", \"Automation\"],\n          createdAt: \"2025-08-15T11:00:00Z\",\n          lastActive: \"2025-08-16T21:00:00Z\",\n          performanceScore: 88,\n          instances: 5\n        },\n        {\n          id: 3,\n          name: \"Security Monitor\",\n          type: \"Security\",\n          status: \"active\",\n          description: \"Real-time security monitoring and threat detection\",\n          capabilities: [\"Threat Detection\", \"Real-time Monitoring\", \"Automated Response\"],\n          createdAt: \"2025-08-15T12:00:00Z\",\n          lastActive: \"2025-08-16T21:05:00Z\",\n          performanceScore: 100,\n          instances: 1\n        },\n        {\n          id: 4,\n          name: \"Analytics Agent\",\n          type: \"Analytics\",\n          status: \"paused\",\n          description: \"Business intelligence and performance analytics\",\n          capabilities: [\"Data Analysis\", \"Report Generation\", \"Insights\"],\n          createdAt: \"2025-08-15T13:00:00Z\",\n          lastActive: \"2025-08-16T19:00:00Z\",\n          performanceScore: 92,\n          instances: 2\n        }\n      ];\n      \n      res.json(agents);\n    } catch (error: any) {\n      console.error(\"Error fetching agents:\", error);\n      res.status(500).json({ message: \"Failed to fetch agents\" });\n    }\n  });\n\n  // Agent actions\n  app.get(\"/api/agents/:id/download\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const agentId = req.params.id;\n      await auditLogger.log(userId, \"agent.download\", \"agents\", agentId, req);\n      \n      res.json({ \n        message: \"Agent package prepared for download\",\n        downloadUrl: `/downloads/agent-${agentId}.zip`,\n        agentId: agentId\n      });\n    } catch (error: any) {\n      console.error(\"Error preparing agent download:\", error);\n      res.status(500).json({ message: \"Failed to prepare agent download\" });\n    }\n  });\n\n  app.post(\"/api/agents/:id/:action\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const agentId = req.params.id;\n      const action = req.params.action;\n      await auditLogger.log(userId, `agent.${action}`, \"agents\", agentId, req);\n      \n      res.json({ \n        message: `Agent ${action} completed successfully`,\n        agentId: agentId,\n        action: action\n      });\n    } catch (error: any) {\n      console.error(`Error performing agent ${req.params.action}:`, error);\n      res.status(500).json({ message: `Failed to ${req.params.action} agent` });\n    }\n  });\n\n  app.get(\"/api/dashboard/activities\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const limit = parseInt(req.query.limit as string) || 20;\n      \n      const activities = await storage.getActivities(userId, limit);\n      res.json(activities);\n    } catch (error: any) {\n      console.error(\"Error fetching activities:\", error);\n      res.status(500).json({ message: \"Failed to fetch activities\" });\n    }\n  });\n\n  // Agent type routes\n  app.get(\"/api/agent-types\", isAuthenticated, async (req: any, res) => {\n    try {\n      const agentTypes = await storage.getAgentTypes();\n      res.json(agentTypes);\n    } catch (error: any) {\n      console.error(\"Error fetching agent types:\", error);\n      res.status(500).json({ message: \"Failed to fetch agent types\" });\n    }\n  });\n\n  // Agent routes\n  app.get(\"/api/agents\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const agents = await storage.getAgents(userId);\n      res.json(agents);\n    } catch (error: any) {\n      console.error(\"Error fetching agents:\", error);\n      res.status(500).json({ message: \"Failed to fetch agents\" });\n    }\n  });\n\n  app.post(\"/api/agents\", isAuthenticated, validateRequest(insertAgentSchema), async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const agentData = { ...req.body, userId };\n      \n      await auditLogger.log(userId, \"agent.create\", \"agent\", null, req);\n      \n      const agent = await storage.createAgent(agentData);\n      await agentFactory.initializeAgent(agent);\n      \n      await storage.createActivity({\n        userId,\n        agentId: agent.id,\n        type: \"agent.created\",\n        message: `Agent \"${agent.name}\" was created successfully`,\n        metadata: { agentType: agent.typeId },\n      });\n      \n      res.status(201).json(agent);\n    } catch (error: any) {\n      console.error(\"Error creating agent:\", error);\n      await auditLogger.log(req.user.claims.sub, \"agent.create\", \"agent\", null, req, false, error?.message);\n      res.status(500).json({ message: \"Failed to create agent\" });\n    }\n  });\n\n  app.get(\"/api/agents/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const agentId = parseInt(req.params.id);\n      const agent = await storage.getAgent(agentId);\n      \n      if (!agent) {\n        return res.status(404).json({ message: \"Agent not found\" });\n      }\n      \n      if (agent.userId !== req.user.claims.sub) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      res.json(agent);\n    } catch (error) {\n      console.error(\"Error fetching agent:\", error);\n      res.status(500).json({ message: \"Failed to fetch agent\" });\n    }\n  });\n\n  app.put(\"/api/agents/:id\", isAuthenticated, validateRequest(insertAgentSchema.partial()), async (req: any, res) => {\n    try {\n      const agentId = parseInt(req.params.id);\n      const userId = req.user.claims.sub;\n      \n      const existingAgent = await storage.getAgent(agentId);\n      if (!existingAgent || existingAgent.userId !== userId) {\n        return res.status(404).json({ message: \"Agent not found\" });\n      }\n      \n      await auditLogger.log(userId, \"agent.update\", \"agent\", agentId.toString(), req);\n      \n      const agent = await storage.updateAgent(agentId, req.body);\n      \n      await storage.createActivity({\n        userId,\n        agentId: agent.id,\n        type: \"agent.updated\",\n        message: `Agent \"${agent.name}\" was updated`,\n      });\n      \n      res.json(agent);\n    } catch (error: any) {\n      console.error(\"Error updating agent:\", error);\n      await auditLogger.log(req.user.claims.sub, \"agent.update\", \"agent\", req.params.id, req, false, error?.message);\n      res.status(500).json({ message: \"Failed to update agent\" });\n    }\n  });\n\n  app.delete(\"/api/agents/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const agentId = parseInt(req.params.id);\n      const userId = req.user.claims.sub;\n      \n      const existingAgent = await storage.getAgent(agentId);\n      if (!existingAgent || existingAgent.userId !== userId) {\n        return res.status(404).json({ message: \"Agent not found\" });\n      }\n      \n      await auditLogger.log(userId, \"agent.delete\", \"agent\", agentId.toString(), req);\n      \n      await storage.deleteAgent(agentId);\n      \n      await storage.createActivity({\n        userId,\n        type: \"agent.deleted\",\n        message: `Agent \"${existingAgent.name}\" was deleted`,\n      });\n      \n      res.json({ message: \"Agent deleted successfully\" });\n    } catch (error: any) {\n      console.error(\"Error deleting agent:\", error);\n      await auditLogger.log(req.user.claims.sub, \"agent.delete\", \"agent\", req.params.id, req, false, error?.message);\n      res.status(500).json({ message: \"Failed to delete agent\" });\n    }\n  });\n\n  // Task routes\n  app.get(\"/api/tasks\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const limit = parseInt(req.query.limit as string) || 50;\n      \n      const tasks = await storage.getTasks(userId, limit);\n      res.json(tasks);\n    } catch (error: any) {\n      console.error(\"Error fetching tasks:\", error);\n      res.status(500).json({ message: \"Failed to fetch tasks\" });\n    }\n  });\n\n  app.post(\"/api/tasks\", isAuthenticated, validateRequest(insertTaskSchema), async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const taskData = { ...req.body, userId };\n      \n      await auditLogger.log(userId, \"task.create\", \"task\", null, req);\n      \n      const task = await storage.createTask(taskData);\n      await taskQueue.enqueue(task);\n      \n      await storage.createActivity({\n        userId,\n        taskId: task.id,\n        type: \"task.created\",\n        message: `Task \"${task.title}\" was created`,\n      });\n      \n      res.status(201).json(task);\n    } catch (error: any) {\n      console.error(\"Error creating task:\", error);\n      await auditLogger.log(req.user.claims.sub, \"task.create\", \"task\", null, req, false, error?.message);\n      res.status(500).json({ message: \"Failed to create task\" });\n    }\n  });\n\n  app.put(\"/api/tasks/:id\", isAuthenticated, validateRequest(insertTaskSchema.partial()), async (req: any, res) => {\n    try {\n      const taskId = parseInt(req.params.id);\n      const userId = req.user.claims.sub;\n      \n      const existingTask = await storage.getTask(taskId);\n      if (!existingTask || existingTask.userId !== userId) {\n        return res.status(404).json({ message: \"Task not found\" });\n      }\n      \n      await auditLogger.log(userId, \"task.update\", \"task\", taskId.toString(), req);\n      \n      const task = await storage.updateTask(taskId, req.body);\n      \n      await storage.createActivity({\n        userId,\n        taskId: task.id,\n        type: \"task.updated\",\n        message: `Task \"${task.title}\" was updated`,\n      });\n      \n      res.json(task);\n    } catch (error: any) {\n      console.error(\"Error updating task:\", error);\n      await auditLogger.log(req.user.claims.sub, \"task.update\", \"task\", req.params.id, req, false, error?.message);\n      res.status(500).json({ message: \"Failed to update task\" });\n    }\n  });\n\n  // Approval routes\n  app.get(\"/api/approvals\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const limit = parseInt(req.query.limit as string) || 50;\n      \n      const approvals = await storage.getApprovals(userId, limit);\n      res.json(approvals);\n    } catch (error: any) {\n      console.error(\"Error fetching approvals:\", error);\n      res.status(500).json({ message: \"Failed to fetch approvals\" });\n    }\n  });\n\n  app.post(\"/api/approvals/:id/approve\", isAuthenticated, async (req: any, res) => {\n    try {\n      const approvalId = parseInt(req.params.id);\n      const userId = req.user.claims.sub;\n      \n      const existingApproval = await storage.getApproval(approvalId);\n      if (!existingApproval || existingApproval.userId !== userId) {\n        return res.status(404).json({ message: \"Approval not found\" });\n      }\n      \n      await auditLogger.log(userId, \"approval.approve\", \"approval\", approvalId.toString(), req);\n      \n      const approval = await storage.updateApproval(approvalId, {\n        status: \"approved\",\n        reviewedBy: userId,\n        reviewedAt: new Date(),\n      });\n      \n      await storage.createActivity({\n        userId,\n        type: \"approval.approved\",\n        message: `Approval request \"${approval.title}\" was approved`,\n      });\n      \n      res.json(approval);\n    } catch (error: any) {\n      console.error(\"Error approving request:\", error);\n      await auditLogger.log(req.user.claims.sub, \"approval.approve\", \"approval\", req.params.id, req, false, error?.message);\n      res.status(500).json({ message: \"Failed to approve request\" });\n    }\n  });\n\n  app.post(\"/api/approvals/:id/reject\", isAuthenticated, async (req: any, res) => {\n    try {\n      const approvalId = parseInt(req.params.id);\n      const userId = req.user.claims.sub;\n      \n      const existingApproval = await storage.getApproval(approvalId);\n      if (!existingApproval || existingApproval.userId !== userId) {\n        return res.status(404).json({ message: \"Approval not found\" });\n      }\n      \n      await auditLogger.log(userId, \"approval.reject\", \"approval\", approvalId.toString(), req);\n      \n      const approval = await storage.updateApproval(approvalId, {\n        status: \"rejected\",\n        reviewedBy: userId,\n        reviewedAt: new Date(),\n      });\n      \n      await storage.createActivity({\n        userId,\n        type: \"approval.rejected\",\n        message: `Approval request \"${approval.title}\" was rejected`,\n      });\n      \n      res.json(approval);\n    } catch (error: any) {\n      console.error(\"Error rejecting request:\", error);\n      await auditLogger.log(req.user.claims.sub, \"approval.reject\", \"approval\", req.params.id, req, false, error?.message);\n      res.status(500).json({ message: \"Failed to reject request\" });\n    }\n  });\n\n  // Security routes\n  app.get(\"/api/security/audit-logs\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const limit = parseInt(req.query.limit as string) || 100;\n      \n      const auditLogs = await storage.getAuditLogs(userId, limit);\n      res.json(auditLogs);\n    } catch (error: any) {\n      console.error(\"Error fetching audit logs:\", error);\n      res.status(500).json({ message: \"Failed to fetch audit logs\" });\n    }\n  });\n\n  app.get(\"/api/security/status\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const agents = await storage.getAgents(userId);\n      const auditLogs = await storage.getAuditLogs(userId, 24);\n      \n      // Calculate security metrics\n      const protectedAgents = agents.filter(agent => agent.status === \"active\").length;\n      const recentSecurityEvents = auditLogs.filter(log => \n        log.createdAt && new Date(log.createdAt).getTime() > Date.now() - 24 * 60 * 60 * 1000\n      ).length;\n      \n      const overallScore = Math.min(100, 70 + protectedAgents * 5 + (recentSecurityEvents > 0 ? 15 : 0));\n      \n      res.json({\n        overallScore,\n        protectedAgents,\n        securityEvents: recentSecurityEvents,\n        lastScanTime: new Date().toISOString(),\n        complianceLevel: \"High\"\n      });\n    } catch (error: any) {\n      console.error(\"Error fetching security status:\", error);\n      res.status(500).json({ message: \"Failed to fetch security status\" });\n    }\n  });\n\n  app.get(\"/api/security/threat-analysis\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const auditLogs = await storage.getAuditLogs(userId, 100);\n      \n      // Analyze for potential threats\n      const failedLogins = auditLogs.filter(log => \n        log.action.includes(\"login\") && !log.success\n      ).length;\n      \n      const suspiciousActivity = auditLogs.filter(log =>\n        log.action.includes(\"delete\") || log.action.includes(\"admin\")\n      ).length;\n      \n      const threats = [];\n      if (failedLogins > 5) {\n        threats.push({\n          type: \"Multiple Failed Logins\",\n          description: `${failedLogins} failed login attempts detected`,\n          severity: \"medium\",\n          timestamp: new Date().toISOString()\n        });\n      }\n      \n      if (suspiciousActivity > 10) {\n        threats.push({\n          type: \"Suspicious Administrative Activity\",\n          description: `${suspiciousActivity} administrative actions detected`,\n          severity: \"low\",\n          timestamp: new Date().toISOString()\n        });\n      }\n      \n      res.json({\n        activeThreats: threats.length,\n        threats,\n        riskLevel: threats.length > 0 ? \"Medium\" : \"Low\",\n        lastAnalysis: new Date().toISOString()\n      });\n    } catch (error: any) {\n      console.error(\"Error performing threat analysis:\", error);\n      res.status(500).json({ message: \"Failed to perform threat analysis\" });\n    }\n  });\n\n  // National Reserve routes\n  app.post(\"/api/national-reserve/deploy\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { nationalReserve } = await import(\"./services/nationalReserve\");\n      \n      // Use foundation model to create deployment strategy\n      const deploymentPlan = await foundationModel.createWorkflow(\n        \"Deploy comprehensive National Reserve system with BERT foundation model integration, military hierarchy, pattern recognition, and cross-collaboration capabilities\"\n      );\n      \n      console.log(\"BERT Foundation Model Deployment Plan:\", deploymentPlan);\n      \n      const deployedAgents = await nationalReserve.deployNationalReserve(userId);\n      \n      await auditLogger.log(\n        userId,\n        \"national_reserve.deploy\",\n        \"agent_system\",\n        null,\n        req,\n        true,\n        null,\n        { deployedCount: deployedAgents.length, foundationModel: \"BERT\", workflowId: deploymentPlan.id }\n      );\n      \n      res.json({\n        message: \"National Reserve deployed successfully with BERT foundation model integration\",\n        deployedAgents: deployedAgents.length,\n        foundationModel: \"BERT integrated for all agents\",\n        deploymentPlan: deploymentPlan.id,\n        workflowSteps: deploymentPlan.steps.length,\n        commandStructure: deployedAgents.reduce((acc, agent) => {\n          const rank = agent.rank || \"unknown\";\n          acc[rank] = (acc[rank] || 0) + 1;\n          return acc;\n        }, {} as Record<string, number>),\n        capabilities: [\n          \"BERT foundation model reasoning\",\n          \"Advanced pattern recognition system\", \n          \"Leet speech detection and translation\",\n          \"Subliminal communication analysis\",\n          \"Real-time conversation monitoring\",\n          \"Cross-collaboration framework\",\n          \"Workflow execution capabilities\",\n          \"Intent analysis and action planning\"\n        ]\n      });\n    } catch (error: any) {\n      console.error(\"Error deploying National Reserve:\", error);\n      await auditLogger.log(req.user.claims.sub, \"national_reserve.deploy\", \"agent_system\", null, req, false, error?.message);\n      res.status(500).json({ message: \"Failed to deploy National Reserve\" });\n    }\n  });\n\n  app.get(\"/api/national-reserve/status\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { nationalReserve } = await import(\"./services/nationalReserve\");\n      \n      const status = await nationalReserve.getReserveStatus(userId);\n      res.json(status);\n    } catch (error: any) {\n      console.error(\"Error fetching National Reserve status:\", error);\n      res.status(500).json({ message: \"Failed to fetch National Reserve status\" });\n    }\n  });\n\n  app.post(\"/api/national-reserve/analyze-conversation\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { conversationText, context } = req.body;\n      const { nationalReserve } = await import(\"./services/nationalReserve\");\n      \n      if (!conversationText) {\n        return res.status(400).json({ message: \"Conversation text is required\" });\n      }\n      \n      const analysis = await nationalReserve.analyzeConversation(userId, conversationText, context);\n      \n      await auditLogger.log(\n        userId,\n        \"conversation.analyze\",\n        \"communication\",\n        null,\n        req,\n        true,\n        null,\n        { hasLeetSpeak: analysis.leetSpeak, subliminalIndicators: analysis.subliminalIndicators.length }\n      );\n      \n      res.json(analysis);\n    } catch (error: any) {\n      console.error(\"Error analyzing conversation:\", error);\n      await auditLogger.log(req.user.claims.sub, \"conversation.analyze\", \"communication\", null, req, false, error?.message);\n      res.status(500).json({ message: \"Failed to analyze conversation\" });\n    }\n  });\n\n  // Credential management routes\n  app.get(\"/api/credentials\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const credentials = await storage.getCredentials(userId);\n      \n      // Remove encrypted keys from response\n      const sanitizedCredentials = credentials.map(cred => ({\n        ...cred,\n        encryptedKey: undefined,\n      }));\n      \n      res.json(sanitizedCredentials);\n    } catch (error) {\n      console.error(\"Error fetching credentials:\", error);\n      res.status(500).json({ message: \"Failed to fetch credentials\" });\n    }\n  });\n\n  // WebSocket server for real-time updates\n  const httpServer = createServer(app);\n  const wss = new WebSocketServer({ server: httpServer, path: \"/ws\" });\n\n  wss.on(\"connection\", (ws: WebSocket, req) => {\n    console.log(\"WebSocket connection established\");\n    \n    ws.on(\"message\", (message) => {\n      try {\n        const data = JSON.parse(message.toString());\n        console.log(\"Received WebSocket message:\", data);\n        \n        // Handle different message types\n        switch (data.type) {\n          case \"ping\":\n            ws.send(JSON.stringify({ type: \"pong\" }));\n            break;\n          case \"subscribe\":\n            // Handle subscription to updates\n            break;\n          default:\n            console.log(\"Unknown message type:\", data.type);\n        }\n      } catch (error) {\n        console.error(\"Error handling WebSocket message:\", error);\n      }\n    });\n    \n    ws.on(\"close\", () => {\n      console.log(\"WebSocket connection closed\");\n    });\n    \n    ws.on(\"error\", (error) => {\n      console.error(\"WebSocket error:\", error);\n    });\n    \n    // Send initial connection confirmation\n    if (ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify({ type: \"connected\", timestamp: Date.now() }));\n    }\n  });\n\n  // Foundation Model API routes  \n  app.post(\"/api/foundation-model/reasoning\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { query, context } = req.body;\n      const reasoning = await foundationModel.executeReasoning(query, context);\n      res.json(reasoning);\n    } catch (error: any) {\n      console.error(\"Error executing reasoning:\", error);\n      res.status(500).json({ message: \"Failed to execute reasoning\" });\n    }\n  });\n\n  app.post(\"/api/foundation-model/intent-analysis\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { text } = req.body;\n      const analysis = await foundationModel.analyzeIntent(text);\n      res.json(analysis);\n    } catch (error: any) {\n      console.error(\"Error analyzing intent:\", error);\n      res.status(500).json({ message: \"Failed to analyze intent\" });\n    }\n  });\n\n  app.post(\"/api/foundation-model/workflow\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { description } = req.body;\n      const workflow = await foundationModel.createWorkflow(description);\n      res.json(workflow);\n    } catch (error: any) {\n      console.error(\"Error creating workflow:\", error);\n      res.status(500).json({ message: \"Failed to create workflow\" });\n    }\n  });\n\n  // NVIDIA Data Flywheel API Routes\n  \n  // Get flywheel runs\n  app.get(\"/api/flywheel/runs\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      await auditLogger.log(userId, \"flywheel.runs.view\", \"flywheel\", null, req);\n      \n      // For now, return sample data - in production this would query the database\n      const sampleRuns = [\n        {\n          id: 1,\n          name: \"General Agent Optimization\",\n          description: \"Autonomous model discovery for general agent tasks\",\n          status: \"completed\",\n          baseModelId: 1,\n          targetWorkload: \"general_agent_tasks\", \n          datasetSize: 15420,\n          costSavings: 87,\n          accuracyRetention: 94,\n          startedAt: new Date(Date.now() - 3600000).toISOString(),\n          completedAt: new Date().toISOString(),\n          createdAt: new Date(Date.now() - 3600000).toISOString()\n        },\n        {\n          id: 2,\n          name: \"Customer Service Optimization\",\n          description: \"Model distillation for customer service workflows\",\n          status: \"running\",\n          baseModelId: 2,\n          targetWorkload: \"customer_service\",\n          datasetSize: 8950,\n          costSavings: 0,\n          accuracyRetention: 0,\n          startedAt: new Date(Date.now() - 1800000).toISOString(),\n          createdAt: new Date(Date.now() - 1800000).toISOString()\n        }\n      ];\n      \n      res.json(sampleRuns);\n    } catch (error: any) {\n      console.error(\"Error fetching flywheel runs:\", error);\n      res.status(500).json({ message: \"Failed to fetch flywheel runs\" });\n    }\n  });\n\n  // Start new flywheel run\n  app.post(\"/api/flywheel/runs\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { name, targetWorkload, description } = req.body;\n      \n      await auditLogger.log(userId, \"flywheel.run.create\", \"flywheel\", null, req);\n      \n      // Simulate starting a new flywheel run\n      const newRun = {\n        id: Date.now(),\n        name,\n        description,\n        status: \"running\",\n        targetWorkload,\n        datasetSize: 0,\n        costSavings: 0,\n        accuracyRetention: 0,\n        startedAt: new Date().toISOString(),\n        createdAt: new Date().toISOString()\n      };\n      \n      res.json(newRun);\n    } catch (error: any) {\n      console.error(\"Error starting flywheel run:\", error);\n      res.status(500).json({ message: \"Failed to start flywheel run\" });\n    }\n  });\n\n  // Get model evaluations\n  app.get(\"/api/flywheel/evaluations\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      await auditLogger.log(userId, \"flywheel.evaluations.view\", \"flywheel\", null, req);\n      \n      const sampleEvaluations = [\n        {\n          id: 1,\n          modelId: 1,\n          experimentType: \"base\",\n          workloadId: \"general_agent_tasks\",\n          accuracyScore: 94,\n          latency: 150,\n          costPerRequest: 45,\n          isPromoted: true,\n          createdAt: new Date().toISOString()\n        },\n        {\n          id: 2,\n          modelId: 2,\n          experimentType: \"customized\",\n          workloadId: \"customer_service\",\n          accuracyScore: 91,\n          latency: 89,\n          costPerRequest: 12,\n          isPromoted: false,\n          createdAt: new Date().toISOString()\n        }\n      ];\n      \n      res.json(sampleEvaluations);\n    } catch (error: any) {\n      console.error(\"Error fetching evaluations:\", error);\n      res.status(500).json({ message: \"Failed to fetch evaluations\" });\n    }\n  });\n\n  // Get optimizations\n  app.get(\"/api/flywheel/optimizations\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      await auditLogger.log(userId, \"flywheel.optimizations.view\", \"flywheel\", null, req);\n      \n      const sampleOptimizations = [\n        {\n          id: 1,\n          workloadId: \"general_agent_tasks\",\n          optimizationType: \"Model Distillation\",\n          costReduction: 87,\n          speedImprovement: 65,\n          accuracyRetention: 94,\n          confidence: 89,\n          productionReady: true,\n          createdAt: new Date(Date.now() - 3600000).toISOString()\n        },\n        {\n          id: 2,\n          workloadId: \"customer_service\",\n          optimizationType: \"LoRA Fine-tuning\",\n          costReduction: 42,\n          speedImprovement: 23,\n          accuracyRetention: 91,\n          confidence: 76,\n          productionReady: false,\n          createdAt: new Date(Date.now() - 1800000).toISOString()\n        },\n        {\n          id: 3,\n          workloadId: \"document_analysis\",\n          optimizationType: \"Quantization\",\n          costReduction: 58,\n          speedImprovement: 34,\n          accuracyRetention: 96,\n          confidence: 82,\n          productionReady: true,\n          createdAt: new Date(Date.now() - 7200000).toISOString()\n        }\n      ];\n      \n      res.json(sampleOptimizations);\n    } catch (error: any) {\n      console.error(\"Error fetching optimizations:\", error);\n      res.status(500).json({ message: \"Failed to fetch optimizations\" });\n    }\n  });\n\n  return httpServer;\n}\n",
      "size_bytes": 50357
    },
    "server/storage.ts": {
      "content": "import {\n  users,\n  agents,\n  agentTypes,\n  tasks,\n  approvals,\n  activities,\n  auditLog,\n  credentials,\n  models,\n  flywheelRuns,\n  modelEvaluations,\n  trafficLogs,\n  optimizations,\n  multimodalSessions,\n  multimodalInteractions,\n  multimodalFiles,\n  type User,\n  type UpsertUser,\n  type Agent,\n  type InsertAgent,\n  type AgentType,\n  type InsertAgentType,\n  type Task,\n  type InsertTask,\n  type Approval,\n  type InsertApproval,\n  type Activity,\n  type InsertActivity,\n  type AuditLogEntry,\n  type InsertAuditLogEntry,\n  type Credential,\n  type InsertCredential,\n  type Model,\n  type FlywheelRun,\n  type InsertFlywheelRun,\n  type ModelEvaluation,\n  type InsertModelEvaluation,\n  type TrafficLog,\n  type Optimization,\n  type MultimodalSession,\n  type InsertMultimodalSession,\n  type MultimodalInteraction,\n  type InsertMultimodalInteraction,\n  type MultimodalFile,\n  type InsertMultimodalFile,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, sql, count } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (IMPORTANT: mandatory for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUserSecurity(userId: string, securityUpdate: {\n    twoFactorEnabled?: boolean;\n    twoFactorSecret?: string | null;\n    twoFactorBackupCodes?: string[] | null;\n    passwordHash?: string;\n    lastPasswordChange?: Date;\n    mustChangePassword?: boolean;\n  }): Promise<void>;\n\n  // Agent type operations\n  getAgentTypes(): Promise<AgentType[]>;\n  createAgentType(agentType: InsertAgentType): Promise<AgentType>;\n\n  // Agent operations\n  getAgents(userId: string): Promise<Agent[]>;\n  getAgent(id: number): Promise<Agent | undefined>;\n  createAgent(agent: InsertAgent): Promise<Agent>;\n  updateAgent(id: number, agent: Partial<InsertAgent>): Promise<Agent>;\n  deleteAgent(id: number): Promise<void>;\n\n  // Task operations\n  getTasks(userId: string, limit?: number): Promise<Task[]>;\n  getTask(id: number): Promise<Task | undefined>;\n  createTask(task: InsertTask): Promise<Task>;\n  updateTask(id: number, task: Partial<InsertTask>): Promise<Task>;\n  deleteTask(id: number): Promise<void>;\n\n  // Approval operations\n  getApprovals(userId: string, limit?: number): Promise<Approval[]>;\n  getApproval(id: number): Promise<Approval | undefined>;\n  createApproval(approval: InsertApproval): Promise<Approval>;\n  updateApproval(id: number, approval: Partial<InsertApproval>): Promise<Approval>;\n\n  // Activity operations\n  getActivities(userId: string, limit?: number): Promise<Activity[]>;\n  createActivity(activity: InsertActivity): Promise<Activity>;\n\n  // Audit log operations\n  createAuditLog(auditEntry: InsertAuditLogEntry): Promise<AuditLogEntry>;\n  getAuditLogs(userId: string, limit?: number): Promise<AuditLogEntry[]>;\n\n  // Credential operations\n  getCredentials(userId: string): Promise<Credential[]>;\n  createCredential(credential: InsertCredential): Promise<Credential>;\n  updateCredential(id: number, credential: Partial<InsertCredential>): Promise<Credential>;\n  deleteCredential(id: number): Promise<void>;\n\n  // Dashboard statistics\n  getDashboardStats(userId: string): Promise<{\n    activeAgents: number;\n    tasksProcessed: number;\n    pendingApprovals: number;\n    systemUptime: number;\n  }>;\n\n  // Flywheel operations\n  getFlywheelRuns(userId: string): Promise<FlywheelRun[]>;\n  createFlywheelRun(run: InsertFlywheelRun): Promise<FlywheelRun>;\n  updateFlywheelRun(id: number, run: Partial<InsertFlywheelRun>): Promise<FlywheelRun>;\n  getFlywheelRunById(id: number): Promise<FlywheelRun | undefined>;\n\n  // Model evaluation operations\n  createModelEvaluation(evaluation: InsertModelEvaluation): Promise<ModelEvaluation>;\n  getModelEvaluationsByRunId(runId: number): Promise<ModelEvaluation[]>;\n\n  // Multimodal operations\n  createMultimodalSession(session: InsertMultimodalSession): Promise<MultimodalSession>;\n  getMultimodalSession(sessionId: string): Promise<MultimodalSession | undefined>;\n  updateMultimodalSession(id: number, session: Partial<InsertMultimodalSession>): Promise<MultimodalSession>;\n  \n  createMultimodalInteraction(interaction: InsertMultimodalInteraction): Promise<MultimodalInteraction>;\n  getMultimodalInteractionsBySession(sessionId: string): Promise<MultimodalInteraction[]>;\n  \n  createMultimodalFile(file: InsertMultimodalFile): Promise<MultimodalFile>;\n  updateMultimodalFile(id: number, file: Partial<InsertMultimodalFile>): Promise<MultimodalFile>;\n  getMultimodalFileById(id: number): Promise<MultimodalFile | undefined>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (IMPORTANT: mandatory for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUserSecurity(userId: string, securityUpdate: {\n    twoFactorEnabled?: boolean;\n    twoFactorSecret?: string | null;\n    twoFactorBackupCodes?: string[] | null;\n    passwordHash?: string;\n    lastPasswordChange?: Date;\n    mustChangePassword?: boolean;\n  }): Promise<void> {\n    await db.update(users)\n      .set({\n        ...securityUpdate,\n        updatedAt: new Date()\n      })\n      .where(eq(users.id, userId));\n  }\n\n  // Agent type operations\n  async getAgentTypes(): Promise<AgentType[]> {\n    return await db.select().from(agentTypes).where(eq(agentTypes.isActive, true));\n  }\n\n  async createAgentType(agentType: InsertAgentType): Promise<AgentType> {\n    const [created] = await db.insert(agentTypes).values(agentType).returning();\n    return created;\n  }\n\n  // Agent operations\n  async getAgents(userId: string): Promise<Agent[]> {\n    return await db\n      .select()\n      .from(agents)\n      .where(eq(agents.userId, userId))\n      .orderBy(desc(agents.createdAt));\n  }\n\n  async getAgent(id: number): Promise<Agent | undefined> {\n    const [agent] = await db.select().from(agents).where(eq(agents.id, id));\n    return agent;\n  }\n\n  async createAgent(agent: InsertAgent): Promise<Agent> {\n    const [created] = await db.insert(agents).values(agent).returning();\n    return created;\n  }\n\n  async updateAgent(id: number, agent: Partial<InsertAgent>): Promise<Agent> {\n    const [updated] = await db\n      .update(agents)\n      .set({ ...agent, updatedAt: new Date() })\n      .where(eq(agents.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteAgent(id: number): Promise<void> {\n    await db.delete(agents).where(eq(agents.id, id));\n  }\n\n  // Task operations\n  async getTasks(userId: string, limit: number = 50): Promise<Task[]> {\n    return await db\n      .select()\n      .from(tasks)\n      .where(eq(tasks.userId, userId))\n      .orderBy(desc(tasks.createdAt))\n      .limit(limit);\n  }\n\n  async getTask(id: number): Promise<Task | undefined> {\n    const [task] = await db.select().from(tasks).where(eq(tasks.id, id));\n    return task;\n  }\n\n  async createTask(task: InsertTask): Promise<Task> {\n    const [created] = await db.insert(tasks).values(task).returning();\n    return created;\n  }\n\n  async updateTask(id: number, task: Partial<InsertTask>): Promise<Task> {\n    const [updated] = await db\n      .update(tasks)\n      .set({ ...task, updatedAt: new Date() })\n      .where(eq(tasks.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteTask(id: number): Promise<void> {\n    await db.delete(tasks).where(eq(tasks.id, id));\n  }\n\n  // Approval operations\n  async getApprovals(userId: string, limit: number = 50): Promise<Approval[]> {\n    return await db\n      .select()\n      .from(approvals)\n      .where(eq(approvals.userId, userId))\n      .orderBy(desc(approvals.createdAt))\n      .limit(limit);\n  }\n\n  async getApproval(id: number): Promise<Approval | undefined> {\n    const [approval] = await db.select().from(approvals).where(eq(approvals.id, id));\n    return approval;\n  }\n\n  async createApproval(approval: InsertApproval): Promise<Approval> {\n    const [created] = await db.insert(approvals).values(approval).returning();\n    return created;\n  }\n\n  async updateApproval(id: number, approval: Partial<InsertApproval>): Promise<Approval> {\n    const [updated] = await db\n      .update(approvals)\n      .set({ ...approval, updatedAt: new Date() })\n      .where(eq(approvals.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Activity operations\n  async getActivities(userId: string, limit: number = 20): Promise<Activity[]> {\n    return await db\n      .select()\n      .from(activities)\n      .where(eq(activities.userId, userId))\n      .orderBy(desc(activities.createdAt))\n      .limit(limit);\n  }\n\n  async createActivity(activity: InsertActivity): Promise<Activity> {\n    const [created] = await db.insert(activities).values(activity).returning();\n    return created;\n  }\n\n  // Audit log operations\n  async createAuditLog(auditEntry: InsertAuditLogEntry): Promise<AuditLogEntry> {\n    const [created] = await db.insert(auditLog).values(auditEntry).returning();\n    return created;\n  }\n\n  async getAuditLogs(userId: string, limit: number = 100): Promise<AuditLogEntry[]> {\n    return await db\n      .select()\n      .from(auditLog)\n      .where(eq(auditLog.userId, userId))\n      .orderBy(desc(auditLog.createdAt))\n      .limit(limit);\n  }\n\n  // Credential operations\n  async getCredentials(userId: string): Promise<Credential[]> {\n    return await db\n      .select()\n      .from(credentials)\n      .where(and(eq(credentials.userId, userId), eq(credentials.isActive, true)))\n      .orderBy(desc(credentials.createdAt));\n  }\n\n  async createCredential(credential: InsertCredential): Promise<Credential> {\n    const [created] = await db.insert(credentials).values(credential).returning();\n    return created;\n  }\n\n  async updateCredential(id: number, credential: Partial<InsertCredential>): Promise<Credential> {\n    const [updated] = await db\n      .update(credentials)\n      .set({ ...credential, updatedAt: new Date() })\n      .where(eq(credentials.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteCredential(id: number): Promise<void> {\n    await db.update(credentials).set({ isActive: false }).where(eq(credentials.id, id));\n  }\n\n  // Dashboard statistics\n  async getDashboardStats(userId: string): Promise<{\n    activeAgents: number;\n    tasksProcessed: number;\n    pendingApprovals: number;\n    systemUptime: number;\n  }> {\n    const [activeAgentsResult] = await db\n      .select({ count: count() })\n      .from(agents)\n      .where(and(eq(agents.userId, userId), eq(agents.status, \"active\")));\n\n    const [tasksProcessedResult] = await db\n      .select({ count: count() })\n      .from(tasks)\n      .where(and(eq(tasks.userId, userId), eq(tasks.status, \"completed\")));\n\n    const [pendingApprovalsResult] = await db\n      .select({ count: count() })\n      .from(approvals)\n      .where(and(eq(approvals.userId, userId), eq(approvals.status, \"pending\")));\n\n    return {\n      activeAgents: activeAgentsResult?.count || 0,\n      tasksProcessed: tasksProcessedResult?.count || 0,\n      pendingApprovals: pendingApprovalsResult?.count || 0,\n      systemUptime: 99.9, // Static for now\n    };\n  }\n\n  // Flywheel operations\n  async getFlywheelRuns(userId: string): Promise<FlywheelRun[]> {\n    return await db\n      .select()\n      .from(flywheelRuns)\n      .where(eq(flywheelRuns.userId, userId))\n      .orderBy(desc(flywheelRuns.createdAt));\n  }\n\n  async createFlywheelRun(run: InsertFlywheelRun): Promise<FlywheelRun> {\n    const [created] = await db.insert(flywheelRuns).values(run).returning();\n    return created;\n  }\n\n  async updateFlywheelRun(id: number, run: Partial<InsertFlywheelRun>): Promise<FlywheelRun> {\n    const [updated] = await db\n      .update(flywheelRuns)\n      .set({ ...run, updatedAt: new Date() })\n      .where(eq(flywheelRuns.id, id))\n      .returning();\n    return updated;\n  }\n\n  async getFlywheelRunById(id: number): Promise<FlywheelRun | undefined> {\n    const [run] = await db.select().from(flywheelRuns).where(eq(flywheelRuns.id, id));\n    return run;\n  }\n\n  // Model evaluation operations\n  async createModelEvaluation(evaluation: InsertModelEvaluation): Promise<ModelEvaluation> {\n    const [created] = await db.insert(modelEvaluations).values(evaluation).returning();\n    return created;\n  }\n\n  async getModelEvaluationsByRunId(runId: number): Promise<ModelEvaluation[]> {\n    return await db\n      .select()\n      .from(modelEvaluations)\n      .where(eq(modelEvaluations.flywheelRunId, runId))\n      .orderBy(desc(modelEvaluations.createdAt));\n  }\n\n  // Multimodal operations\n  async createMultimodalSession(session: InsertMultimodalSession): Promise<MultimodalSession> {\n    const [created] = await db.insert(multimodalSessions).values(session).returning();\n    return created;\n  }\n\n  async getMultimodalSession(sessionId: string): Promise<MultimodalSession | undefined> {\n    const [session] = await db\n      .select()\n      .from(multimodalSessions)\n      .where(eq(multimodalSessions.sessionId, sessionId));\n    return session;\n  }\n\n  async updateMultimodalSession(id: number, session: Partial<InsertMultimodalSession>): Promise<MultimodalSession> {\n    const [updated] = await db\n      .update(multimodalSessions)\n      .set({ ...session, updatedAt: new Date() })\n      .where(eq(multimodalSessions.id, id))\n      .returning();\n    return updated;\n  }\n\n  async createMultimodalInteraction(interaction: InsertMultimodalInteraction): Promise<MultimodalInteraction> {\n    const [created] = await db.insert(multimodalInteractions).values(interaction).returning();\n    return created;\n  }\n\n  async getMultimodalInteractionsBySession(sessionId: string): Promise<MultimodalInteraction[]> {\n    const session = await this.getMultimodalSession(sessionId);\n    if (!session) return [];\n\n    return await db\n      .select()\n      .from(multimodalInteractions)\n      .where(eq(multimodalInteractions.sessionId, session.id))\n      .orderBy(desc(multimodalInteractions.createdAt));\n  }\n\n  async createMultimodalFile(file: InsertMultimodalFile): Promise<MultimodalFile> {\n    const [created] = await db.insert(multimodalFiles).values(file).returning();\n    return created;\n  }\n\n  async updateMultimodalFile(id: number, file: Partial<InsertMultimodalFile>): Promise<MultimodalFile> {\n    const [updated] = await db\n      .update(multimodalFiles)\n      .set({ ...file, updatedAt: new Date() })\n      .where(eq(multimodalFiles.id, id))\n      .returning();\n    return updated;\n  }\n\n  async getMultimodalFileById(id: number): Promise<MultimodalFile | undefined> {\n    const [file] = await db.select().from(multimodalFiles).where(eq(multimodalFiles.id, id));\n    return file;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n",
      "size_bytes": 14985
    },
    "server/vite.ts": {
      "content": "import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n",
      "size_bytes": 2254
    },
    "shared/schema.ts": {
      "content": "import {\n  pgTable,\n  text,\n  varchar,\n  timestamp,\n  jsonb,\n  index,\n  serial,\n  boolean,\n  integer,\n  unique,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().notNull(),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  passwordHash: varchar(\"password_hash\"),\n  passwordSetAt: timestamp(\"password_set_at\"),\n  mustChangePassword: boolean(\"must_change_password\").default(false),\n  twoFactorEnabled: boolean(\"two_factor_enabled\").default(false),\n  twoFactorSecret: varchar(\"two_factor_secret\"),\n  twoFactorBackupCodes: jsonb(\"two_factor_backup_codes\"),\n  lastPasswordChange: timestamp(\"last_password_change\"),\n  securityQuestions: jsonb(\"security_questions\"),\n  loginAttempts: integer(\"login_attempts\").default(0),\n  lockedUntil: timestamp(\"locked_until\"),\n  sessionTimeout: integer(\"session_timeout\").default(3600), // 1 hour default\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Agent types and configurations\nexport const agentTypes = pgTable(\"agent_types\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  category: varchar(\"category\", { length: 100 }).notNull(),\n  icon: varchar(\"icon\", { length: 50 }),\n  color: varchar(\"color\", { length: 50 }),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Agent instances\nexport const agents = pgTable(\"agents\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  typeId: integer(\"type_id\").references(() => agentTypes.id),\n  userId: varchar(\"user_id\").references(() => users.id),\n  status: varchar(\"status\", { length: 50 }).default(\"inactive\"), // inactive, active, error, paused\n  priority: varchar(\"priority\", { length: 20 }).default(\"medium\"), // low, medium, high\n  rank: varchar(\"rank\", { length: 50 }).default(\"private\"), // Military hierarchy: private, corporal, sergeant, lieutenant, captain, major, colonel, general\n  commandLevel: integer(\"command_level\").default(1), // 1-10 command authority level\n  specialization: jsonb(\"specialization\").default('[]'), // Areas of expertise and capabilities\n  patternRecognition: jsonb(\"pattern_recognition\").default('{}'), // Learned communication patterns and behaviors\n  communicationAnalysis: jsonb(\"communication_analysis\").default('{}'), // Speech pattern analysis and leet detection\n  collaborationNetwork: jsonb(\"collaboration_network\").default('[]'), // Connected agents for cross-collaboration\n  selfOptimization: jsonb(\"self_optimization\").default('{}'), // Auto-improvement metrics and learning\n  osiLayerSecurity: jsonb(\"osi_layer_security\").default('{}'), // Security configurations per OSI layer\n  configuration: jsonb(\"configuration\"),\n  securityConfig: jsonb(\"security_config\"),\n  lastActivity: timestamp(\"last_activity\"),\n  // Multimodal agent capabilities\n  llmProvider: varchar(\"llm_provider\", { length: 50 }).default(\"openai\"), // openai, anthropic, gemini\n  modelName: varchar(\"model_name\", { length: 100 }).default(\"gpt-4\"), // specific model version\n  temperature: integer(\"temperature\").default(70), // 0-200, stored as hundredths\n  maxTokens: integer(\"max_tokens\").default(4096),\n  systemPrompt: text(\"system_prompt\"),\n  enableVision: boolean(\"enable_vision\").default(false),\n  enableAudio: boolean(\"enable_audio\").default(false),\n  enableFunctions: boolean(\"enable_functions\").default(true),\n  enableMemory: boolean(\"enable_memory\").default(true),\n  imageDetail: varchar(\"image_detail\", { length: 20 }).default(\"auto\"), // low, high, auto\n  audioLanguage: varchar(\"audio_language\", { length: 10 }).default(\"en\"),\n  multimodalReasoning: boolean(\"multimodal_reasoning\").default(true),\n  capabilities: jsonb(\"capabilities\").default('{}'), // vision, audio, streaming, functions\n  conversationHistory: jsonb(\"conversation_history\").default('[]'), // stored conversation memory\n  toolConfigurations: jsonb(\"tool_configurations\").default('[]'), // available tools and settings\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Task queue\nexport const tasks = pgTable(\"tasks\", {\n  id: serial(\"id\").primaryKey(),\n  agentId: integer(\"agent_id\").references(() => agents.id),\n  userId: varchar(\"user_id\").references(() => users.id),\n  type: varchar(\"type\", { length: 100 }).notNull(),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  status: varchar(\"status\", { length: 50 }).default(\"pending\"), // pending, processing, completed, failed, cancelled\n  priority: varchar(\"priority\", { length: 20 }).default(\"medium\"),\n  payload: jsonb(\"payload\"),\n  result: jsonb(\"result\"),\n  error: text(\"error\"),\n  scheduledFor: timestamp(\"scheduled_for\"),\n  startedAt: timestamp(\"started_at\"),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Approval requests\nexport const approvals = pgTable(\"approvals\", {\n  id: serial(\"id\").primaryKey(),\n  taskId: integer(\"task_id\").references(() => tasks.id),\n  agentId: integer(\"agent_id\").references(() => agents.id),\n  userId: varchar(\"user_id\").references(() => users.id),\n  type: varchar(\"type\", { length: 100 }).notNull(),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  status: varchar(\"status\", { length: 50 }).default(\"pending\"), // pending, approved, rejected\n  requestData: jsonb(\"request_data\"),\n  suggestedResponse: text(\"suggested_response\"),\n  reviewedBy: varchar(\"reviewed_by\").references(() => users.id),\n  reviewedAt: timestamp(\"reviewed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Activity log\nexport const activities = pgTable(\"activities\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  agentId: integer(\"agent_id\").references(() => agents.id),\n  taskId: integer(\"task_id\").references(() => tasks.id),\n  type: varchar(\"type\", { length: 100 }).notNull(),\n  message: text(\"message\").notNull(),\n  metadata: jsonb(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Security audit log\nexport const auditLog = pgTable(\"audit_log\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  action: varchar(\"action\", { length: 100 }).notNull(),\n  resource: varchar(\"resource\", { length: 100 }).notNull(),\n  resourceId: varchar(\"resource_id\", { length: 100 }),\n  ipAddress: varchar(\"ip_address\", { length: 45 }),\n  userAgent: text(\"user_agent\"),\n  success: boolean(\"success\").default(true),\n  error: text(\"error\"),\n  metadata: jsonb(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// API keys and credentials\nexport const credentials = pgTable(\"credentials\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  service: varchar(\"service\", { length: 100 }).notNull(),\n  encryptedKey: text(\"encrypted_key\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  lastUsed: timestamp(\"last_used\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// NVIDIA Data Flywheel Implementation Tables\n\n// Model catalog for the flywheel\nexport const models = pgTable(\"models\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  provider: varchar(\"provider\", { length: 100 }).notNull(), // nvidia, openai, anthropic, etc.\n  modelId: varchar(\"model_id\", { length: 255 }).notNull(), // actual model identifier\n  size: varchar(\"size\", { length: 50 }), // 1B, 7B, 70B, etc.\n  type: varchar(\"type\", { length: 50 }).notNull(), // base, instruct, chat, code\n  costPerToken: integer(\"cost_per_token\").default(0), // cost in micro-cents per token\n  inferenceLatency: integer(\"inference_latency\").default(0), // average ms per request\n  capabilities: jsonb(\"capabilities\").default('[]'), // [\"reasoning\", \"code\", \"math\", etc.]\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Flywheel experiments and runs\nexport const flywheelRuns = pgTable(\"flywheel_runs\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  status: varchar(\"status\", { length: 50 }).default(\"pending\"), // pending, running, completed, failed\n  baseModelId: integer(\"base_model_id\").references(() => models.id),\n  targetWorkload: varchar(\"target_workload\", { length: 255 }).notNull(),\n  datasetSize: integer(\"dataset_size\").default(0),\n  experimentTypes: jsonb(\"experiment_types\").default('[\"base\", \"icl\", \"customized\"]'),\n  configuration: jsonb(\"configuration\").default('{}'),\n  results: jsonb(\"results\").default('{}'),\n  metrics: jsonb(\"metrics\").default('{}'),\n  costSavings: integer(\"cost_savings\").default(0), // percentage cost reduction\n  accuracyRetention: integer(\"accuracy_retention\").default(0), // percentage accuracy retained\n  startedAt: timestamp(\"started_at\"),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Model performance evaluations\nexport const modelEvaluations = pgTable(\"model_evaluations\", {\n  id: serial(\"id\").primaryKey(),\n  flywheelRunId: integer(\"flywheel_run_id\").references(() => flywheelRuns.id),\n  modelId: integer(\"model_id\").references(() => models.id),\n  experimentType: varchar(\"experiment_type\", { length: 50 }).notNull(), // base, icl, customized\n  workloadId: varchar(\"workload_id\", { length: 255 }).notNull(),\n  accuracyScore: integer(\"accuracy_score\").default(0), // 0-100 similarity score\n  latency: integer(\"latency\").default(0), // ms per request\n  costPerRequest: integer(\"cost_per_request\").default(0), // micro-cents\n  throughput: integer(\"throughput\").default(0), // requests per second\n  qualityMetrics: jsonb(\"quality_metrics\").default('{}'),\n  isPromoted: boolean(\"is_promoted\").default(false),\n  promotedAt: timestamp(\"promoted_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Production traffic logs for flywheel data collection\nexport const trafficLogs = pgTable(\"traffic_logs\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  agentId: integer(\"agent_id\").references(() => agents.id),\n  workloadId: varchar(\"workload_id\", { length: 255 }).notNull(),\n  clientId: varchar(\"client_id\", { length: 255 }).notNull(),\n  requestTimestamp: timestamp(\"request_timestamp\").notNull(),\n  request: jsonb(\"request\").notNull(), // OpenAI format request\n  response: jsonb(\"response\").notNull(), // OpenAI format response\n  modelUsed: varchar(\"model_used\", { length: 255 }),\n  latency: integer(\"latency\").default(0),\n  tokenUsage: jsonb(\"token_usage\").default('{}'),\n  userFeedback: integer(\"user_feedback\"), // 1-5 rating if available\n  isProcessed: boolean(\"is_processed\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Flywheel discovered optimizations\nexport const optimizations = pgTable(\"optimizations\", {\n  id: serial(\"id\").primaryKey(),\n  flywheelRunId: integer(\"flywheel_run_id\").references(() => flywheelRuns.id),\n  originalModelId: integer(\"original_model_id\").references(() => models.id),\n  optimizedModelId: integer(\"optimized_model_id\").references(() => models.id),\n  workloadId: varchar(\"workload_id\", { length: 255 }).notNull(),\n  optimizationType: varchar(\"optimization_type\", { length: 100 }).notNull(), // distillation, fine-tuning, quantization\n  costReduction: integer(\"cost_reduction\").default(0), // percentage\n  speedImprovement: integer(\"speed_improvement\").default(0), // percentage\n  accuracyRetention: integer(\"accuracy_retention\").default(0), // percentage\n  confidence: integer(\"confidence\").default(0), // 0-100 confidence in optimization\n  productionReady: boolean(\"production_ready\").default(false),\n  deployedAt: timestamp(\"deployed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Multimodal interactions and file storage\nexport const multimodalSessions = pgTable(\"multimodal_sessions\", {\n  id: serial(\"id\").primaryKey(),\n  agentId: integer(\"agent_id\").references(() => agents.id),\n  userId: varchar(\"user_id\").references(() => users.id),\n  sessionId: varchar(\"session_id\", { length: 255 }).notNull(),\n  status: varchar(\"status\", { length: 50 }).default(\"active\"), // active, paused, completed\n  modalities: jsonb(\"modalities\").default('[]'), // [\"text\", \"image\", \"audio\"]\n  totalInteractions: integer(\"total_interactions\").default(0),\n  lastInteraction: timestamp(\"last_interaction\"),\n  metadata: jsonb(\"metadata\").default('{}'),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Individual multimodal interactions\nexport const multimodalInteractions = pgTable(\"multimodal_interactions\", {\n  id: serial(\"id\").primaryKey(),\n  sessionId: integer(\"session_id\").references(() => multimodalSessions.id),\n  agentId: integer(\"agent_id\").references(() => agents.id),\n  userId: varchar(\"user_id\").references(() => users.id),\n  interactionType: varchar(\"interaction_type\", { length: 50 }).notNull(), // chat, image_analysis, audio_transcription, multimodal\n  inputData: jsonb(\"input_data\").notNull(), // text, image_base64, audio_base64, etc.\n  outputData: jsonb(\"output_data\"), // agent response\n  modalities: jsonb(\"modalities\").default('[]'), // which modalities were used\n  processingTime: integer(\"processing_time\").default(0), // milliseconds\n  tokenUsage: jsonb(\"token_usage\").default('{}'), // prompt_tokens, completion_tokens, etc.\n  cost: integer(\"cost\").default(0), // micro-cents\n  userFeedback: integer(\"user_feedback\"), // 1-5 rating\n  error: text(\"error\"),\n  metadata: jsonb(\"metadata\").default('{}'),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// File uploads and processing\nexport const multimodalFiles = pgTable(\"multimodal_files\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  agentId: integer(\"agent_id\").references(() => agents.id),\n  interactionId: integer(\"interaction_id\").references(() => multimodalInteractions.id),\n  filename: varchar(\"filename\", { length: 255 }).notNull(),\n  originalName: varchar(\"original_name\", { length: 255 }),\n  fileType: varchar(\"file_type\", { length: 50 }).notNull(), // image, audio, video, document\n  mimeType: varchar(\"mime_type\", { length: 100 }),\n  fileSize: integer(\"file_size\").default(0), // bytes\n  filePath: text(\"file_path\"), // storage path or URL\n  processingStatus: varchar(\"processing_status\", { length: 50 }).default(\"pending\"), // pending, processing, completed, failed\n  extractedText: text(\"extracted_text\"), // OCR or transcription results\n  metadata: jsonb(\"metadata\").default('{}'), // dimensions, duration, etc.\n  securityScan: jsonb(\"security_scan\").default('{}'), // virus scan, content safety\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  agents: many(agents),\n  tasks: many(tasks),\n  approvals: many(approvals),\n  activities: many(activities),\n  auditLogs: many(auditLog),\n  credentials: many(credentials),\n  flywheelRuns: many(flywheelRuns),\n  trafficLogs: many(trafficLogs),\n  multimodalSessions: many(multimodalSessions),\n  multimodalInteractions: many(multimodalInteractions),\n  multimodalFiles: many(multimodalFiles),\n}));\n\nexport const modelsRelations = relations(models, ({ many }) => ({\n  flywheelRuns: many(flywheelRuns),\n  evaluations: many(modelEvaluations),\n  originalOptimizations: many(optimizations, { relationName: \"originalModel\" }),\n  optimizedOptimizations: many(optimizations, { relationName: \"optimizedModel\" }),\n}));\n\nexport const flywheelRunsRelations = relations(flywheelRuns, ({ one, many }) => ({\n  user: one(users, {\n    fields: [flywheelRuns.userId],\n    references: [users.id],\n  }),\n  baseModel: one(models, {\n    fields: [flywheelRuns.baseModelId],\n    references: [models.id],\n  }),\n  evaluations: many(modelEvaluations),\n  optimizations: many(optimizations),\n}));\n\nexport const modelEvaluationsRelations = relations(modelEvaluations, ({ one }) => ({\n  flywheelRun: one(flywheelRuns, {\n    fields: [modelEvaluations.flywheelRunId],\n    references: [flywheelRuns.id],\n  }),\n  model: one(models, {\n    fields: [modelEvaluations.modelId],\n    references: [models.id],\n  }),\n}));\n\nexport const trafficLogsRelations = relations(trafficLogs, ({ one }) => ({\n  user: one(users, {\n    fields: [trafficLogs.userId],\n    references: [users.id],\n  }),\n  agent: one(agents, {\n    fields: [trafficLogs.agentId],\n    references: [agents.id],\n  }),\n}));\n\nexport const optimizationsRelations = relations(optimizations, ({ one }) => ({\n  flywheelRun: one(flywheelRuns, {\n    fields: [optimizations.flywheelRunId],\n    references: [flywheelRuns.id],\n  }),\n  originalModel: one(models, {\n    fields: [optimizations.originalModelId],\n    references: [models.id],\n    relationName: \"originalModel\",\n  }),\n  optimizedModel: one(models, {\n    fields: [optimizations.optimizedModelId],\n    references: [models.id],\n    relationName: \"optimizedModel\",\n  }),\n}));\n\nexport const agentTypesRelations = relations(agentTypes, ({ many }) => ({\n  agents: many(agents),\n}));\n\nexport const agentsRelations = relations(agents, ({ one, many }) => ({\n  type: one(agentTypes, {\n    fields: [agents.typeId],\n    references: [agentTypes.id],\n  }),\n  user: one(users, {\n    fields: [agents.userId],\n    references: [users.id],\n  }),\n  tasks: many(tasks),\n  approvals: many(approvals),\n  activities: many(activities),\n  multimodalSessions: many(multimodalSessions),\n  multimodalInteractions: many(multimodalInteractions),\n  multimodalFiles: many(multimodalFiles),\n}));\n\nexport const tasksRelations = relations(tasks, ({ one, many }) => ({\n  agent: one(agents, {\n    fields: [tasks.agentId],\n    references: [agents.id],\n  }),\n  user: one(users, {\n    fields: [tasks.userId],\n    references: [users.id],\n  }),\n  approvals: many(approvals),\n  activities: many(activities),\n}));\n\nexport const approvalsRelations = relations(approvals, ({ one }) => ({\n  task: one(tasks, {\n    fields: [approvals.taskId],\n    references: [tasks.id],\n  }),\n  agent: one(agents, {\n    fields: [approvals.agentId],\n    references: [agents.id],\n  }),\n  user: one(users, {\n    fields: [approvals.userId],\n    references: [users.id],\n  }),\n  reviewer: one(users, {\n    fields: [approvals.reviewedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const activitiesRelations = relations(activities, ({ one }) => ({\n  user: one(users, {\n    fields: [activities.userId],\n    references: [users.id],\n  }),\n  agent: one(agents, {\n    fields: [activities.agentId],\n    references: [agents.id],\n  }),\n  task: one(tasks, {\n    fields: [activities.taskId],\n    references: [tasks.id],\n  }),\n}));\n\nexport const auditLogRelations = relations(auditLog, ({ one }) => ({\n  user: one(users, {\n    fields: [auditLog.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const credentialsRelations = relations(credentials, ({ one }) => ({\n  user: one(users, {\n    fields: [credentials.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const multimodalSessionsRelations = relations(multimodalSessions, ({ one, many }) => ({\n  agent: one(agents, {\n    fields: [multimodalSessions.agentId],\n    references: [agents.id],\n  }),\n  user: one(users, {\n    fields: [multimodalSessions.userId],\n    references: [users.id],\n  }),\n  interactions: many(multimodalInteractions),\n}));\n\nexport const multimodalInteractionsRelations = relations(multimodalInteractions, ({ one, many }) => ({\n  session: one(multimodalSessions, {\n    fields: [multimodalInteractions.sessionId],\n    references: [multimodalSessions.id],\n  }),\n  agent: one(agents, {\n    fields: [multimodalInteractions.agentId],\n    references: [agents.id],\n  }),\n  user: one(users, {\n    fields: [multimodalInteractions.userId],\n    references: [users.id],\n  }),\n  files: many(multimodalFiles),\n}));\n\nexport const multimodalFilesRelations = relations(multimodalFiles, ({ one }) => ({\n  user: one(users, {\n    fields: [multimodalFiles.userId],\n    references: [users.id],\n  }),\n  agent: one(agents, {\n    fields: [multimodalFiles.agentId],\n    references: [agents.id],\n  }),\n  interaction: one(multimodalInteractions, {\n    fields: [multimodalFiles.interactionId],\n    references: [multimodalInteractions.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertAgentTypeSchema = createInsertSchema(agentTypes).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAgentSchema = createInsertSchema(agents).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTaskSchema = createInsertSchema(tasks).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertApprovalSchema = createInsertSchema(approvals).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertActivitySchema = createInsertSchema(activities).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAuditLogSchema = createInsertSchema(auditLog).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCredentialSchema = createInsertSchema(credentials).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertFlywheelRunSchema = createInsertSchema(flywheelRuns).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertModelEvaluationSchema = createInsertSchema(modelEvaluations).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMultimodalSessionSchema = createInsertSchema(multimodalSessions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMultimodalInteractionSchema = createInsertSchema(multimodalInteractions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMultimodalFileSchema = createInsertSchema(multimodalFiles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\nexport type AgentType = typeof agentTypes.$inferSelect;\nexport type Agent = typeof agents.$inferSelect;\nexport type Task = typeof tasks.$inferSelect;\nexport type Approval = typeof approvals.$inferSelect;\nexport type Activity = typeof activities.$inferSelect;\nexport type AuditLogEntry = typeof auditLog.$inferSelect;\nexport type Credential = typeof credentials.$inferSelect;\nexport type Model = typeof models.$inferSelect;\nexport type FlywheelRun = typeof flywheelRuns.$inferSelect;\nexport type ModelEvaluation = typeof modelEvaluations.$inferSelect;\nexport type TrafficLog = typeof trafficLogs.$inferSelect;\nexport type Optimization = typeof optimizations.$inferSelect;\nexport type MultimodalSession = typeof multimodalSessions.$inferSelect;\nexport type MultimodalInteraction = typeof multimodalInteractions.$inferSelect;\nexport type MultimodalFile = typeof multimodalFiles.$inferSelect;\n\n// Insert types\nexport type InsertAgentType = z.infer<typeof insertAgentTypeSchema>;\nexport type InsertAgent = z.infer<typeof insertAgentSchema>;\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\nexport type InsertApproval = z.infer<typeof insertApprovalSchema>;\nexport type InsertActivity = z.infer<typeof insertActivitySchema>;\nexport type InsertAuditLogEntry = z.infer<typeof insertAuditLogSchema>;\nexport type InsertCredential = z.infer<typeof insertCredentialSchema>;\nexport type InsertFlywheelRun = z.infer<typeof insertFlywheelRunSchema>;\nexport type InsertModelEvaluation = z.infer<typeof insertModelEvaluationSchema>;\nexport type InsertMultimodalSession = z.infer<typeof insertMultimodalSessionSchema>;\nexport type InsertMultimodalInteraction = z.infer<typeof insertMultimodalInteractionSchema>;\nexport type InsertMultimodalFile = z.infer<typeof insertMultimodalFileSchema>;\n",
      "size_bytes": 24973
    },
    "client/src/App.tsx": {
      "content": "import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Landing from \"@/pages/Landing\";\nimport AgentFactory from \"@/pages/AgentFactory\";\nimport AgentLibrary from \"@/pages/AgentLibrary\";\nimport TaskQueue from \"@/pages/TaskQueue\";\nimport Approvals from \"@/pages/Approvals\";\nimport Analytics from \"@/pages/Analytics\";\nimport Security from \"@/pages/Security\";\nimport Settings from \"@/pages/Settings\";\nimport NationalReserve from \"@/pages/NationalReserve\";\nimport DataFlywheel from \"@/pages/DataFlywheel\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/agents\" component={AgentFactory} />\n          <Route path=\"/library\" component={AgentLibrary} />\n          <Route path=\"/tasks\" component={TaskQueue} />\n          <Route path=\"/approvals\" component={Approvals} />\n          <Route path=\"/analytics\" component={Analytics} />\n          <Route path=\"/security\" component={Security} />\n          <Route path=\"/settings\" component={Settings} />\n          <Route path=\"/national-reserve\" component={NationalReserve} />\n          <Route path=\"/data-flywheel\" component={DataFlywheel} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n",
      "size_bytes": 1951
    },
    "client/src/index.css": {
      "content": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Custom animations for sidebar */\n@keyframes slideInFromLeft {\n  0% {\n    transform: translateX(-100%);\n    opacity: 0;\n  }\n  100% {\n    transform: translateX(0);\n    opacity: 1;\n  }\n}\n\n@keyframes slideOutToLeft {\n  0% {\n    transform: translateX(0);\n    opacity: 1;\n  }\n  100% {\n    transform: translateX(-100%);\n    opacity: 0;\n  }\n}\n\n@keyframes fadeInScale {\n  0% {\n    transform: scale(0.95);\n    opacity: 0;\n  }\n  100% {\n    transform: scale(1);\n    opacity: 1;\n  }\n}\n\n@keyframes gentleBounce {\n  0%, 20%, 50%, 80%, 100% {\n    transform: translateY(0);\n  }\n  40% {\n    transform: translateY(-2px);\n  }\n  60% {\n    transform: translateY(-1px);\n  }\n}\n\n.animate-slide-in {\n  animation: slideInFromLeft 0.3s ease-out;\n}\n\n.animate-slide-out {\n  animation: slideOutToLeft 0.3s ease-in;\n}\n\n.animate-fade-in-scale {\n  animation: fadeInScale 0.2s ease-out;\n}\n\n.animate-gentle-bounce {\n  animation: gentleBounce 2s infinite;\n}\n\n/* Enhanced hover effects */\n.sidebar-item-hover {\n  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.sidebar-item-hover:hover {\n  transform: translateX(4px) translateY(-1px);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n\n  /* Custom colors for the agent factory */\n  --success: hsl(142, 76%, 36%);\n  --warning: hsl(38, 92%, 50%);\n  --error: hsl(0, 84.2%, 60.2%);\n  --secure: hsl(142, 76%, 36%);\n  --alert: hsl(0, 84.2%, 60.2%);\n  --purple: hsl(262, 83%, 58%);\n  --blue: hsl(207, 90%, 54%);\n  --green: hsl(142, 76%, 36%);\n  --orange: hsl(38, 92%, 50%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n\n  /* Dark mode custom colors */\n  --success: hsl(142, 76%, 36%);\n  --warning: hsl(38, 92%, 50%);\n  --error: hsl(0, 62.8%, 30.6%);\n  --secure: hsl(142, 76%, 36%);\n  --alert: hsl(0, 62.8%, 30.6%);\n  --purple: hsl(262, 83%, 58%);\n  --blue: hsl(207, 90%, 54%);\n  --green: hsl(142, 76%, 36%);\n  --orange: hsl(38, 92%, 50%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', system-ui, sans-serif;\n  }\n}\n\n@layer utilities {\n  .text-success {\n    color: var(--success);\n  }\n  \n  .text-warning {\n    color: var(--warning);\n  }\n  \n  .text-error {\n    color: var(--error);\n  }\n  \n  .text-secure {\n    color: var(--secure);\n  }\n  \n  .text-alert {\n    color: var(--alert);\n  }\n  \n  .bg-success {\n    background-color: var(--success);\n  }\n  \n  .bg-warning {\n    background-color: var(--warning);\n  }\n  \n  .bg-error {\n    background-color: var(--error);\n  }\n  \n  .bg-secure {\n    background-color: var(--secure);\n  }\n  \n  .bg-alert {\n    background-color: var(--alert);\n  }\n  \n  .bg-success\\/10 {\n    background-color: hsl(142, 76%, 36%, 0.1);\n  }\n  \n  .bg-warning\\/10 {\n    background-color: hsl(38, 92%, 50%, 0.1);\n  }\n  \n  .bg-error\\/10 {\n    background-color: hsl(0, 84.2%, 60.2%, 0.1);\n  }\n  \n  .bg-secure\\/10 {\n    background-color: hsl(142, 76%, 36%, 0.1);\n  }\n  \n  .bg-primary\\/10 {\n    background-color: hsl(207, 90%, 54%, 0.1);\n  }\n  \n  .bg-purple-100 {\n    background-color: hsl(262, 83%, 58%, 0.1);\n  }\n  \n  .bg-blue-100 {\n    background-color: hsl(207, 90%, 54%, 0.1);\n  }\n  \n  .bg-green-100 {\n    background-color: hsl(142, 76%, 36%, 0.1);\n  }\n  \n  .bg-orange-100 {\n    background-color: hsl(38, 92%, 50%, 0.1);\n  }\n  \n  .text-purple-600 {\n    color: hsl(262, 83%, 58%);\n  }\n  \n  .text-blue-600 {\n    color: hsl(207, 90%, 54%);\n  }\n  \n  .text-green-600 {\n    color: hsl(142, 76%, 36%);\n  }\n  \n  .text-orange-600 {\n    color: hsl(38, 92%, 50%);\n  }\n  \n  .border-primary {\n    border-color: var(--primary);\n  }\n  \n  .hover\\:border-primary:hover {\n    border-color: var(--primary);\n  }\n  \n  .hover\\:bg-primary\\/5:hover {\n    background-color: hsl(207, 90%, 54%, 0.05);\n  }\n}\n\n/* Animation for loading states */\n@keyframes pulse {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.5;\n  }\n}\n\n.animate-pulse {\n  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n/* Smooth transitions */\n.transition-colors {\n  transition-property: color, background-color, border-color;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n\n/* Focus styles for accessibility */\n.focus\\:ring-primary:focus {\n  --tw-ring-color: var(--primary);\n}\n\n.focus\\:border-primary:focus {\n  border-color: var(--primary);\n}\n\n/* WebSocket connection indicator */\n.ws-connected {\n  @apply bg-secure;\n}\n\n.ws-disconnected {\n  @apply bg-error;\n}\n\n.ws-connecting {\n  @apply bg-warning;\n}\n",
      "size_bytes": 5941
    },
    "client/src/main.tsx": {
      "content": "import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n",
      "size_bytes": 157
    },
    "multimodal-agent-builder/config/__init__.py": {
      "content": "",
      "size_bytes": 0
    },
    "multimodal-agent-builder/config/config.py": {
      "content": "\"\"\"Configuration management using Pydantic Settings.\"\"\"\n\nfrom functools import lru_cache\nfrom typing import List, Optional\n\nfrom pydantic import Field, field_validator\nfrom pydantic_settings import BaseSettings, SettingsConfigDict\n\n\nclass Settings(BaseSettings):\n    \"\"\"Application settings loaded from environment variables.\"\"\"\n    \n    model_config = SettingsConfigDict(\n        env_file=\".env\",\n        env_file_encoding=\"utf-8\",\n        case_sensitive=False,\n        extra=\"ignore\"\n    )\n    \n    # OpenAI Configuration\n    openai_api_key: str = Field(default=\"\", description=\"OpenAI API key\")\n    openai_model: str = Field(default=\"gpt-4-turbo-preview\", description=\"OpenAI model name\")\n    openai_max_tokens: int = Field(default=4096, description=\"Max tokens for OpenAI\")\n    openai_temperature: float = Field(default=0.7, ge=0.0, le=2.0)\n    \n    # Google Gemini Configuration\n    gemini_api_key: str = Field(default=\"\", description=\"Google Gemini API key\")\n    gemini_model: str = Field(default=\"gemini-2.5-flash\", description=\"Gemini model name\")\n    gemini_max_tokens: int = Field(default=8192, description=\"Max tokens for Gemini\")\n    gemini_temperature: float = Field(default=0.7, ge=0.0, le=1.0)\n    \n    # Anthropic Claude Configuration\n    anthropic_api_key: str = Field(default=\"\", description=\"Anthropic API key\")\n    claude_model: str = Field(default=\"claude-3-opus-20240229\", description=\"Claude model name\")\n    claude_max_tokens: int = Field(default=4096, description=\"Max tokens for Claude\")\n    claude_temperature: float = Field(default=0.7, ge=0.0, le=1.0)\n    \n    # Application Settings\n    app_name: str = Field(default=\"Multimodal Agent Builder\")\n    app_version: str = Field(default=\"0.1.0\")\n    app_env: str = Field(default=\"development\", description=\"Environment: development, staging, production\")\n    app_debug: bool = Field(default=True)\n    app_port: int = Field(default=8000, ge=1, le=65535)\n    app_host: str = Field(default=\"0.0.0.0\")\n    \n    # Logging Configuration\n    log_level: str = Field(default=\"INFO\", description=\"Logging level\")\n    log_format: str = Field(default=\"json\", description=\"Log format: json or plain\")\n    \n    # Rate Limiting\n    rate_limit_enabled: bool = Field(default=True)\n    rate_limit_requests: int = Field(default=100, ge=1)\n    rate_limit_period: int = Field(default=60, ge=1, description=\"Period in seconds\")\n    \n    # File Upload Settings\n    max_file_size_mb: int = Field(default=10, ge=1, le=100)\n    allowed_image_types: str = Field(default=\"jpg,jpeg,png,gif,bmp,webp\")\n    allowed_audio_types: str = Field(default=\"mp3,wav,ogg,m4a,flac\")\n    \n    # Agent Settings\n    default_agent_timeout: int = Field(default=300, ge=10, le=3600, description=\"Timeout in seconds\")\n    max_concurrent_agents: int = Field(default=10, ge=1, le=100)\n    enable_agent_memory: bool = Field(default=True)\n    \n    @field_validator(\"log_level\")\n    @classmethod\n    def validate_log_level(cls, v: str) -> str:\n        \"\"\"Validate log level.\"\"\"\n        valid_levels = [\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\"]\n        if v.upper() not in valid_levels:\n            raise ValueError(f\"Invalid log level. Must be one of {valid_levels}\")\n        return v.upper()\n    \n    @field_validator(\"app_env\")\n    @classmethod\n    def validate_app_env(cls, v: str) -> str:\n        \"\"\"Validate application environment.\"\"\"\n        valid_envs = [\"development\", \"staging\", \"production\"]\n        if v.lower() not in valid_envs:\n            raise ValueError(f\"Invalid environment. Must be one of {valid_envs}\")\n        return v.lower()\n    \n    @property\n    def allowed_image_extensions(self) -> List[str]:\n        \"\"\"Get list of allowed image file extensions.\"\"\"\n        return [f\".{ext.strip()}\" for ext in self.allowed_image_types.split(\",\")]\n    \n    @property\n    def allowed_audio_extensions(self) -> List[str]:\n        \"\"\"Get list of allowed audio file extensions.\"\"\"\n        return [f\".{ext.strip()}\" for ext in self.allowed_audio_types.split(\",\")]\n    \n    @property\n    def max_file_size_bytes(self) -> int:\n        \"\"\"Get max file size in bytes.\"\"\"\n        return self.max_file_size_mb * 1024 * 1024\n    \n    @property\n    def is_production(self) -> bool:\n        \"\"\"Check if running in production environment.\"\"\"\n        return self.app_env == \"production\"\n    \n    @property\n    def is_development(self) -> bool:\n        \"\"\"Check if running in development environment.\"\"\"\n        return self.app_env == \"development\"\n    \n    def get_llm_config(self, provider: str) -> dict:\n        \"\"\"Get configuration for a specific LLM provider.\n        \n        Args:\n            provider: One of 'openai', 'gemini', or 'anthropic'\n            \n        Returns:\n            Dictionary with provider-specific configuration\n        \"\"\"\n        configs = {\n            \"openai\": {\n                \"api_key\": self.openai_api_key,\n                \"model\": self.openai_model,\n                \"max_tokens\": self.openai_max_tokens,\n                \"temperature\": self.openai_temperature,\n            },\n            \"gemini\": {\n                \"api_key\": self.gemini_api_key,\n                \"model\": self.gemini_model,\n                \"max_tokens\": self.gemini_max_tokens,\n                \"temperature\": self.gemini_temperature,\n            },\n            \"anthropic\": {\n                \"api_key\": self.anthropic_api_key,\n                \"model\": self.claude_model,\n                \"max_tokens\": self.claude_max_tokens,\n                \"temperature\": self.claude_temperature,\n            }\n        }\n        \n        if provider not in configs:\n            raise ValueError(f\"Unknown provider: {provider}. Must be one of {list(configs.keys())}\")\n        \n        return configs[provider]\n    \n    def validate_api_keys(self) -> dict:\n        \"\"\"Validate which API keys are configured.\n        \n        Returns:\n            Dictionary indicating which providers have API keys configured\n        \"\"\"\n        return {\n            \"openai\": bool(self.openai_api_key),\n            \"gemini\": bool(self.gemini_api_key),\n            \"anthropic\": bool(self.anthropic_api_key),\n        }\n\n\n@lru_cache()\ndef get_settings() -> Settings:\n    \"\"\"Get cached settings instance.\n    \n    Returns:\n        Settings instance\n    \"\"\"\n    return Settings()\n\n\n# Create a global settings instance\nsettings = get_settings()\n",
      "size_bytes": 6336
    },
    "multimodal-agent-builder/examples/api_client.py": {
      "content": "\"\"\"Example Python client for the Multimodal Agent Builder API.\"\"\"\n\nimport asyncio\nimport base64\nfrom pathlib import Path\nfrom typing import Optional\n\nimport httpx\n\n\nclass AgentAPIClient:\n    \"\"\"Client for interacting with the Agent Builder API.\"\"\"\n    \n    def __init__(self, base_url: str = \"http://localhost:8000\"):\n        \"\"\"Initialize the API client.\n        \n        Args:\n            base_url: Base URL of the API\n        \"\"\"\n        self.base_url = base_url\n        self.client = httpx.AsyncClient()\n    \n    async def health_check(self) -> dict:\n        \"\"\"Check API health status.\"\"\"\n        response = await self.client.get(f\"{self.base_url}/health\")\n        return response.json()\n    \n    async def list_providers(self) -> dict:\n        \"\"\"List available LLM providers.\"\"\"\n        response = await self.client.get(f\"{self.base_url}/providers\")\n        return response.json()\n    \n    async def create_agent(\n        self,\n        name: str,\n        agent_type: str = \"multimodal\",\n        provider: str = \"openai\",\n        model: Optional[str] = None,\n        **kwargs\n    ) -> dict:\n        \"\"\"Create a new agent.\n        \n        Args:\n            name: Agent name\n            agent_type: Type of agent\n            provider: LLM provider\n            model: Model name\n            **kwargs: Additional configuration\n            \n        Returns:\n            Agent information\n        \"\"\"\n        data = {\n            \"name\": name,\n            \"type\": agent_type,\n            \"provider\": provider,\n            \"model\": model,\n            **kwargs\n        }\n        response = await self.client.post(f\"{self.base_url}/agents\", json=data)\n        return response.json()\n    \n    async def list_agents(self) -> list:\n        \"\"\"List all agents.\"\"\"\n        response = await self.client.get(f\"{self.base_url}/agents\")\n        return response.json()\n    \n    async def get_agent(self, agent_id: str) -> dict:\n        \"\"\"Get agent information.\n        \n        Args:\n            agent_id: Agent ID\n            \n        Returns:\n            Agent information\n        \"\"\"\n        response = await self.client.get(f\"{self.base_url}/agents/{agent_id}\")\n        return response.json()\n    \n    async def chat(self, agent_id: str, message: str) -> dict:\n        \"\"\"Chat with an agent.\n        \n        Args:\n            agent_id: Agent ID\n            message: User message\n            \n        Returns:\n            Agent response\n        \"\"\"\n        data = {\"message\": message}\n        response = await self.client.post(\n            f\"{self.base_url}/agents/{agent_id}/chat\",\n            json=data\n        )\n        return response.json()\n    \n    async def process_image(\n        self,\n        agent_id: str,\n        image_path: str,\n        prompt: str = \"What's in this image?\"\n    ) -> dict:\n        \"\"\"Process an image with the agent.\n        \n        Args:\n            agent_id: Agent ID\n            image_path: Path to image file\n            prompt: Text prompt\n            \n        Returns:\n            Agent response\n        \"\"\"\n        with open(image_path, \"rb\") as f:\n            files = {\"image\": f}\n            data = {\"prompt\": prompt}\n            response = await self.client.post(\n                f\"{self.base_url}/agents/{agent_id}/process-image\",\n                files=files,\n                data=data\n            )\n        return response.json()\n    \n    async def delete_agent(self, agent_id: str) -> dict:\n        \"\"\"Delete an agent.\n        \n        Args:\n            agent_id: Agent ID\n            \n        Returns:\n            Deletion confirmation\n        \"\"\"\n        response = await self.client.delete(f\"{self.base_url}/agents/{agent_id}\")\n        return response.json()\n    \n    async def quick_chat(self, provider: str, message: str) -> dict:\n        \"\"\"Quick chat with a specific provider.\n        \n        Args:\n            provider: Provider name (gpt4, gemini, claude)\n            message: User message\n            \n        Returns:\n            Agent response\n        \"\"\"\n        data = {\"message\": message}\n        response = await self.client.post(\n            f\"{self.base_url}/quick-start/chat-{provider}\",\n            data=data\n        )\n        return response.json()\n    \n    async def close(self):\n        \"\"\"Close the client.\"\"\"\n        await self.client.aclose()\n\n\nasync def example_basic_usage():\n    \"\"\"Example of basic API usage.\"\"\"\n    client = AgentAPIClient()\n    \n    try:\n        # Check health\n        print(\"🏥 Health Check:\")\n        health = await client.health_check()\n        print(f\"  Status: {health['status']}\")\n        print(f\"  Version: {health['version']}\")\n        \n        # List providers\n        print(\"\\n📋 Available Providers:\")\n        providers = await client.list_providers()\n        for provider, details in providers['details'].items():\n            configured = \"✅\" if details['configured'] else \"❌\"\n            print(f\"  {configured} {provider}: {len(details['models'])} models\")\n        \n        # Create an agent\n        print(\"\\n🤖 Creating Agent...\")\n        agent = await client.create_agent(\n            name=\"Example Assistant\",\n            agent_type=\"multimodal\",\n            provider=\"openai\",\n            model=\"gpt-4-turbo-preview\",\n            description=\"A helpful multimodal assistant\",\n            system_prompt=\"You are a helpful and friendly AI assistant.\"\n        )\n        print(f\"  Created: {agent['name']} (ID: {agent['id']})\")\n        \n        # Chat with the agent\n        print(\"\\n💬 Chatting with Agent...\")\n        response = await client.chat(\n            agent['id'],\n            \"Hello! Can you tell me a fun fact about AI?\"\n        )\n        print(f\"  Response: {response['content']}\")\n        \n        # List all agents\n        print(\"\\n📑 All Agents:\")\n        agents = await client.list_agents()\n        for a in agents:\n            print(f\"  - {a['name']} ({a['id']})\")\n        \n        # Clean up\n        print(\"\\n🧹 Cleaning up...\")\n        await client.delete_agent(agent['id'])\n        print(\"  Agent deleted\")\n        \n    finally:\n        await client.close()\n\n\nasync def example_multimodal():\n    \"\"\"Example of multimodal processing.\"\"\"\n    client = AgentAPIClient()\n    \n    try:\n        # Create a multimodal agent\n        print(\"🎨 Creating Multimodal Agent...\")\n        agent = await client.create_agent(\n            name=\"Vision Expert\",\n            agent_type=\"multimodal\",\n            provider=\"openai\",\n            model=\"gpt-4-turbo\",\n            enable_vision=True\n        )\n        print(f\"  Created: {agent['name']}\")\n        \n        # Process an image (if you have one)\n        image_path = \"example_image.jpg\"\n        if Path(image_path).exists():\n            print(\"\\n🖼️ Processing Image...\")\n            response = await client.process_image(\n                agent['id'],\n                image_path,\n                \"Describe this image in detail\"\n            )\n            print(f\"  Analysis: {response['content']}\")\n        else:\n            print(\"\\n  No example image found\")\n        \n        # Clean up\n        await client.delete_agent(agent['id'])\n        \n    finally:\n        await client.close()\n\n\nasync def example_quick_start():\n    \"\"\"Example of quick start endpoints.\"\"\"\n    client = AgentAPIClient()\n    \n    try:\n        print(\"⚡ Quick Start Examples\\n\")\n        \n        # Quick chat with GPT-4\n        print(\"🤖 GPT-4:\")\n        response = await client.quick_chat(\"gpt4\", \"What is quantum computing?\")\n        print(f\"  {response['content'][:200]}...\\n\")\n        \n        # Quick chat with Gemini\n        print(\"✨ Gemini:\")\n        response = await client.quick_chat(\"gemini\", \"Explain machine learning\")\n        print(f\"  {response['content'][:200]}...\\n\")\n        \n        # Quick chat with Claude\n        print(\"🎭 Claude:\")\n        response = await client.quick_chat(\"claude\", \"What is artificial intelligence?\")\n        print(f\"  {response['content'][:200]}...\\n\")\n        \n    finally:\n        await client.close()\n\n\nasync def example_streaming():\n    \"\"\"Example of streaming responses.\"\"\"\n    async with httpx.AsyncClient() as client:\n        # Create agent first\n        agent_data = {\n            \"name\": \"Streaming Assistant\",\n            \"type\": \"multimodal\",\n            \"provider\": \"openai\"\n        }\n        agent_response = await client.post(\n            \"http://localhost:8000/agents\",\n            json=agent_data\n        )\n        agent = agent_response.json()\n        \n        # Stream chat response\n        print(\"📡 Streaming Response:\")\n        async with client.stream(\n            \"POST\",\n            f\"http://localhost:8000/agents/{agent['id']}/chat\",\n            json={\"message\": \"Write a short poem about AI\", \"stream\": True}\n        ) as response:\n            async for chunk in response.aiter_text():\n                print(chunk, end=\"\", flush=True)\n        \n        # Clean up\n        await client.delete(f\"http://localhost:8000/agents/{agent['id']}\")\n\n\ndef main():\n    \"\"\"Run examples.\"\"\"\n    print(\"🚀 Multimodal Agent Builder API Examples\\n\")\n    print(\"=\" * 50)\n    \n    # Run examples\n    asyncio.run(example_basic_usage())\n    print(\"\\n\" + \"=\" * 50)\n    asyncio.run(example_quick_start())\n    \n    # Uncomment to run additional examples:\n    # asyncio.run(example_multimodal())\n    # asyncio.run(example_streaming())\n\n\nif __name__ == \"__main__\":\n    main()\n",
      "size_bytes": 9381
    },
    "multimodal-agent-builder/examples/curl_examples.sh": {
      "content": "#!/bin/bash\n\n# Multimodal Agent Builder API - cURL Examples\n# ============================================\n\nAPI_BASE=\"http://localhost:8000\"\n\necho \"🚀 Multimodal Agent Builder - cURL Examples\"\necho \"===========================================\"\necho \"\"\n\n# Health Check\necho \"1️⃣ Health Check\"\necho \"---------------\"\ncurl -X GET \"$API_BASE/health\" \\\n  -H \"Content-Type: application/json\" | python3 -m json.tool\necho \"\"\n\n# List Providers\necho \"2️⃣ List Available Providers\"\necho \"---------------------------\"\ncurl -X GET \"$API_BASE/providers\" \\\n  -H \"Content-Type: application/json\" | python3 -m json.tool\necho \"\"\n\n# List Agent Types\necho \"3️⃣ List Agent Types\"\necho \"-------------------\"\ncurl -X GET \"$API_BASE/agent-types\" \\\n  -H \"Content-Type: application/json\" | python3 -m json.tool\necho \"\"\n\n# Create an Agent\necho \"4️⃣ Create a New Agent\"\necho \"---------------------\"\nAGENT_RESPONSE=$(curl -X POST \"$API_BASE/agents\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"Test Assistant\",\n    \"type\": \"multimodal\",\n    \"provider\": \"openai\",\n    \"model\": \"gpt-4-turbo-preview\",\n    \"description\": \"A test multimodal assistant\",\n    \"system_prompt\": \"You are a helpful AI assistant.\",\n    \"temperature\": 0.7,\n    \"max_tokens\": 2048,\n    \"enable_memory\": true,\n    \"enable_tools\": true,\n    \"enable_vision\": true,\n    \"enable_audio\": true\n  }')\n\necho \"$AGENT_RESPONSE\" | python3 -m json.tool\n\n# Extract agent ID\nAGENT_ID=$(echo \"$AGENT_RESPONSE\" | python3 -c \"import sys, json; print(json.load(sys.stdin)['id'])\")\necho \"Created agent with ID: $AGENT_ID\"\necho \"\"\n\n# List All Agents\necho \"5️⃣ List All Agents\"\necho \"------------------\"\ncurl -X GET \"$API_BASE/agents\" \\\n  -H \"Content-Type: application/json\" | python3 -m json.tool\necho \"\"\n\n# Get Agent Info\necho \"6️⃣ Get Agent Information\"\necho \"------------------------\"\ncurl -X GET \"$API_BASE/agents/$AGENT_ID\" \\\n  -H \"Content-Type: application/json\" | python3 -m json.tool\necho \"\"\n\n# Chat with Agent\necho \"7️⃣ Chat with Agent\"\necho \"------------------\"\ncurl -X POST \"$API_BASE/agents/$AGENT_ID/chat\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"message\": \"Hello! Tell me a fun fact about artificial intelligence.\",\n    \"stream\": false\n  }' | python3 -m json.tool\necho \"\"\n\n# Invoke Agent (Think-Act-Observe)\necho \"8️⃣ Invoke Agent with Custom Input\"\necho \"---------------------------------\"\ncurl -X POST \"$API_BASE/agents/$AGENT_ID/invoke\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"input\": \"Analyze the impact of AI on society\",\n    \"kwargs\": {}\n  }' | python3 -m json.tool\necho \"\"\n\n# Process Image (requires an actual image file)\necho \"9️⃣ Process Image (Example)\"\necho \"--------------------------\"\necho \"To process an image, use:\"\necho \"curl -X POST \\\"$API_BASE/agents/$AGENT_ID/process-image\\\" \\\\\"\necho \"  -F \\\"image=@path/to/your/image.jpg\\\" \\\\\"\necho \"  -F \\\"prompt=What's in this image?\\\"\"\necho \"\"\n\n# Process Multimodal\necho \"🔟 Process Multimodal Input (Example)\"\necho \"------------------------------------\"\necho \"To process multimodal input:\"\necho \"curl -X POST \\\"$API_BASE/agents/$AGENT_ID/process-multimodal\\\" \\\\\"\necho \"  -F \\\"text=Describe and analyze this content\\\" \\\\\"\necho \"  -F \\\"image=@path/to/image.jpg\\\" \\\\\"\necho \"  -F \\\"audio=@path/to/audio.mp3\\\"\"\necho \"\"\n\n# Get Agent Tools\necho \"1️⃣1️⃣ Get Agent Tools\"\necho \"--------------------\"\ncurl -X GET \"$API_BASE/agents/$AGENT_ID/tools\" \\\n  -H \"Content-Type: application/json\" | python3 -m json.tool\necho \"\"\n\n# Clear Agent Memory\necho \"1️⃣2️⃣ Clear Agent Memory\"\necho \"-----------------------\"\ncurl -X POST \"$API_BASE/agents/$AGENT_ID/clear-memory\" \\\n  -H \"Content-Type: application/json\" | python3 -m json.tool\necho \"\"\n\n# Quick Start Examples\necho \"1️⃣3️⃣ Quick Start - Chat with GPT-4\"\necho \"-----------------------------------\"\ncurl -X POST \"$API_BASE/quick-start/chat-gpt4\" \\\n  -F \"message=What is the meaning of life?\" | python3 -m json.tool\necho \"\"\n\necho \"1️⃣4️⃣ Quick Start - Chat with Gemini\"\necho \"------------------------------------\"\ncurl -X POST \"$API_BASE/quick-start/chat-gemini\" \\\n  -F \"message=Explain quantum computing in simple terms\" | python3 -m json.tool\necho \"\"\n\necho \"1️⃣5️⃣ Quick Start - Chat with Claude\"\necho \"------------------------------------\"\ncurl -X POST \"$API_BASE/quick-start/chat-claude\" \\\n  -F \"message=Write a haiku about technology\" | python3 -m json.tool\necho \"\"\n\n# Delete Agent\necho \"1️⃣6️⃣ Delete Agent\"\necho \"-----------------\"\ncurl -X DELETE \"$API_BASE/agents/$AGENT_ID\" \\\n  -H \"Content-Type: application/json\" | python3 -m json.tool\necho \"\"\n\necho \"✅ Examples Complete!\"\necho \"\"\necho \"📚 Additional Resources:\"\necho \"  - API Documentation: $API_BASE/docs\"\necho \"  - ReDoc: $API_BASE/redoc\"\necho \"  - OpenAPI Schema: $API_BASE/openapi.json\"\n",
      "size_bytes": 4816
    },
    "multimodal-agent-builder/examples/training_example.py": {
      "content": "\"\"\"Example usage of the training API with recursive loop closure.\"\"\"\n\nimport asyncio\nimport requests\nimport json\nfrom typing import Dict, Any\n\n\nclass TrainingAPIClient:\n    \"\"\"Client for interacting with the training API.\"\"\"\n    \n    def __init__(self, base_url: str = \"http://localhost:8000\"):\n        \"\"\"Initialize the training client.\n        \n        Args:\n            base_url: Base URL of the API server\n        \"\"\"\n        self.base_url = base_url\n        self.training_url = f\"{base_url}/training\"\n    \n    def start_training(\n        self,\n        agent_name: str,\n        dataset_type: str = \"open_images\",\n        epochs: int = 3\n    ) -> Dict[str, Any]:\n        \"\"\"Start training for an agent.\n        \n        Args:\n            agent_name: Name of the agent to train\n            dataset_type: Type of dataset to use\n            epochs: Number of training epochs\n            \n        Returns:\n            Training status\n        \"\"\"\n        response = requests.post(\n            f\"{self.training_url}/start\",\n            json={\n                \"agent_name\": agent_name,\n                \"dataset_type\": dataset_type,\n                \"epochs\": epochs,\n                \"enable_closure\": True\n            }\n        )\n        response.raise_for_status()\n        return response.json()\n    \n    def check_training_status(self, agent_name: str) -> Dict[str, Any]:\n        \"\"\"Check training status for an agent.\n        \n        Args:\n            agent_name: Name of the agent\n            \n        Returns:\n            Current training status\n        \"\"\"\n        response = requests.get(f\"{self.training_url}/status/{agent_name}\")\n        response.raise_for_status()\n        return response.json()\n    \n    def log_closure(\n        self,\n        hypothesis: str,\n        pattern: str,\n        structure: str,\n        explanation: str,\n        topic: str = \"\"\n    ) -> Dict[str, Any]:\n        \"\"\"Log a recursive loop closure.\n        \n        Args:\n            hypothesis: Hypothesis being tested\n            pattern: Pattern identified\n            structure: Structure used\n            explanation: Why the loop was closed\n            topic: Optional topic\n            \n        Returns:\n            Closure confirmation\n        \"\"\"\n        response = requests.post(\n            f\"{self.training_url}/closure\",\n            json={\n                \"hypothesis\": hypothesis,\n                \"pattern\": pattern,\n                \"structure\": structure,\n                \"explanation\": explanation,\n                \"topic\": topic\n            }\n        )\n        response.raise_for_status()\n        return response.json()\n    \n    def get_ledger(self, agent_name: str) -> Dict[str, Any]:\n        \"\"\"Get the recursive loop closure ledger.\n        \n        Args:\n            agent_name: Name of the agent\n            \n        Returns:\n            Ledger information\n        \"\"\"\n        response = requests.get(f\"{self.training_url}/ledger/{agent_name}\")\n        response.raise_for_status()\n        return response.json()\n    \n    def get_summary(self, agent_name: str) -> Dict[str, Any]:\n        \"\"\"Get comprehensive training summary.\n        \n        Args:\n            agent_name: Name of the agent\n            \n        Returns:\n            Training summary\n        \"\"\"\n        response = requests.get(f\"{self.training_url}/summary/{agent_name}\")\n        response.raise_for_status()\n        return response.json()\n    \n    def create_pipeline(\n        self,\n        agent_name: str,\n        dataset_type: str = \"open_images\"\n    ) -> Dict[str, Any]:\n        \"\"\"Create and run a complete training pipeline.\n        \n        Args:\n            agent_name: Name of the agent\n            dataset_type: Type of dataset\n            \n        Returns:\n            Pipeline results\n        \"\"\"\n        response = requests.post(\n            f\"{self.training_url}/pipeline/{agent_name}\",\n            params={\"dataset_type\": dataset_type}\n        )\n        response.raise_for_status()\n        return response.json()\n    \n    def list_datasets(self) -> Dict[str, Any]:\n        \"\"\"List available training datasets.\n        \n        Returns:\n            Available datasets\n        \"\"\"\n        response = requests.get(f\"{self.training_url}/datasets\")\n        response.raise_for_status()\n        return response.json()\n    \n    def reset_training(self, agent_name: str) -> Dict[str, Any]:\n        \"\"\"Reset training for an agent.\n        \n        Args:\n            agent_name: Name of the agent\n            \n        Returns:\n            Confirmation message\n        \"\"\"\n        response = requests.delete(f\"{self.training_url}/reset/{agent_name}\")\n        response.raise_for_status()\n        return response.json()\n\n\nasync def demo_training_workflow():\n    \"\"\"Demonstrate the complete training workflow.\"\"\"\n    \n    client = TrainingAPIClient()\n    agent_name = \"vision_agent_v1\"\n    \n    print(\"🚀 Training API Demo\")\n    print(\"=\" * 50)\n    \n    try:\n        # 1. List available datasets\n        print(\"\\n📊 Available Datasets:\")\n        datasets = client.list_datasets()\n        for dataset_name, info in datasets[\"datasets\"].items():\n            print(f\"  - {dataset_name}: {info['description']}\")\n            print(f\"    Training files: {len(info['training_files'])}\")\n            print(f\"    Validation files: {len(info['validation_files'])}\")\n        \n        # 2. Start training\n        print(f\"\\n🎯 Starting training for {agent_name}...\")\n        result = client.start_training(\n            agent_name=agent_name,\n            dataset_type=\"open_images\",\n            epochs=3\n        )\n        print(f\"  Status: {result['status']}\")\n        print(f\"  Message: {result['message']}\")\n        \n        # 3. Monitor training progress\n        print(\"\\n📈 Monitoring training progress...\")\n        for i in range(5):\n            await asyncio.sleep(2)  # Wait 2 seconds\n            status = client.check_training_status(agent_name)\n            print(f\"  [{i+1}/5] Status: {status['status']}\")\n            print(f\"    - Loops closed: {status['loops_closed']}\")\n            print(f\"    - Patterns found: {status['patterns_found']}\")\n            \n            if status['status'] == 'completed':\n                print(f\"    - Accuracy: {status['accuracy']:.2%}\")\n                break\n        \n        # 4. Log a manual closure\n        print(\"\\n🔒 Logging manual loop closure...\")\n        closure_result = client.log_closure(\n            hypothesis=\"Manual testing confirms pattern recognition\",\n            pattern=\"Consistent object detection in images\",\n            structure=\"CNN-based vision model\",\n            explanation=\"Pattern recognition achieved 95% accuracy threshold\",\n            topic=\"Manual Vision Test\"\n        )\n        print(f\"  Loop ID: {closure_result['loop_id']}\")\n        print(f\"  Total loops: {closure_result['total_loops']}\")\n        \n        # 5. Get training ledger\n        print(\"\\n📜 Training Ledger:\")\n        ledger = client.get_ledger(agent_name)\n        print(f\"  Total loops closed: {ledger['total_loops']}\")\n        print(f\"  Closure rate: {ledger['closure_rate']:.2%}\")\n        \n        if ledger['recent_loops']:\n            print(\"  Recent loops:\")\n            for loop in ledger['recent_loops'][:3]:\n                print(f\"    - {loop['Loop ID']}: {loop['Topic']}\")\n        \n        # 6. Get comprehensive summary\n        print(\"\\n📋 Training Summary:\")\n        summary = client.get_summary(agent_name)\n        print(f\"  Total iterations: {summary['total_iterations']}\")\n        print(f\"  Loops closed: {summary['loops_closed']}\")\n        print(f\"  Patterns discovered: {summary['patterns_discovered']}\")\n        \n        # 7. Create a pipeline (alternative workflow)\n        print(\"\\n🔧 Creating training pipeline for new agent...\")\n        pipeline_agent = \"vision_agent_v2\"\n        pipeline_result = client.create_pipeline(\n            agent_name=pipeline_agent,\n            dataset_type=\"open_images\"\n        )\n        print(f\"  Success: {pipeline_result['success']}\")\n        print(f\"  Message: {pipeline_result['message']}\")\n        \n        # Clean up\n        print(\"\\n🧹 Cleaning up...\")\n        client.reset_training(agent_name)\n        client.reset_training(pipeline_agent)\n        print(\"  Training reset complete\")\n        \n    except requests.exceptions.RequestException as e:\n        print(f\"\\n❌ API Error: {e}\")\n        print(\"Make sure the API server is running!\")\n    except Exception as e:\n        print(f\"\\n❌ Error: {e}\")\n    \n    print(\"\\n✅ Training demo complete!\")\n\n\ndef demo_closure_tracking():\n    \"\"\"Demonstrate recursive loop closure tracking.\"\"\"\n    \n    client = TrainingAPIClient()\n    \n    print(\"🔄 Recursive Loop Closure Demo\")\n    print(\"=\" * 50)\n    \n    # Define test closures\n    test_closures = [\n        {\n            \"hypothesis\": \"Agent learns spatial relationships in images\",\n            \"pattern\": \"Consistent bounding box predictions\",\n            \"structure\": \"Object detection network\",\n            \"explanation\": \"Spatial accuracy > 90% on validation set\",\n            \"topic\": \"Spatial Learning\"\n        },\n        {\n            \"hypothesis\": \"Audio transcription improves with context\",\n            \"pattern\": \"Context-aware speech recognition\",\n            \"structure\": \"Transformer-based ASR model\",\n            \"explanation\": \"WER reduced by 15% with context\",\n            \"topic\": \"Audio Context Learning\"\n        },\n        {\n            \"hypothesis\": \"Multimodal fusion enhances understanding\",\n            \"pattern\": \"Cross-modal attention patterns\",\n            \"structure\": \"Multimodal transformer\",\n            \"explanation\": \"Combined accuracy exceeds individual modalities\",\n            \"topic\": \"Multimodal Fusion\"\n        }\n    ]\n    \n    print(\"\\n📝 Logging test closures...\")\n    for closure in test_closures:\n        result = client.log_closure(**closure)\n        print(f\"  ✓ {closure['topic']}: {result['loop_id']}\")\n    \n    print(\"\\n🎯 Closures logged successfully!\")\n\n\nif __name__ == \"__main__\":\n    print(\"Choose demo:\")\n    print(\"1. Full training workflow (async)\")\n    print(\"2. Closure tracking demo\")\n    \n    choice = input(\"\\nEnter choice (1 or 2): \").strip()\n    \n    if choice == \"1\":\n        asyncio.run(demo_training_workflow())\n    elif choice == \"2\":\n        demo_closure_tracking()\n    else:\n        print(\"Invalid choice. Running closure tracking demo...\")\n        demo_closure_tracking()\n",
      "size_bytes": 10424
    },
    "multimodal-agent-builder/scripts/reassemble_files.sh": {
      "content": "#!/bin/bash\n\n################################################################################\n# Reassemble Chunked Dataset Files\n# \n# This script reassembles chunked dataset files that were split for GitHub \n# compatibility. It reads manifest files, concatenates chunks in order,\n# and verifies checksums to ensure data integrity.\n#\n# Usage: ./scripts/reassemble_files.sh [options]\n#\n# Options:\n#   -h, --help     Show this help message\n#   -v, --verbose  Enable verbose output\n#   -d, --dry-run  Show what would be done without actually doing it\n#   -f, --force    Overwrite existing files without prompting\n#   -c, --cleanup  Remove chunk files after successful reassembly\n#\n################################################################################\n\nset -euo pipefail\n\n# Color codes for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Default options\nVERBOSE=false\nDRY_RUN=false\nFORCE=false\nCLEANUP=false\n\n# Script configuration\nSCRIPT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\nREPO_ROOT=\"$(dirname \"$SCRIPT_DIR\")\"\nCHUNKS_DIR=\"${REPO_ROOT}/train-test-validate/chunks\"\nOUTPUT_BASE=\"${REPO_ROOT}/train-test-validate\"\n\n# Statistics\nTOTAL_FILES=0\nPROCESSED_FILES=0\nSKIPPED_FILES=0\nFAILED_FILES=0\n\n# Function to display usage\nshow_usage() {\n    cat << EOF\nUsage: $0 [options]\n\nReassemble chunked dataset files from manifest specifications.\n\nOptions:\n    -h, --help     Show this help message\n    -v, --verbose  Enable verbose output\n    -d, --dry-run  Show what would be done without actually doing it\n    -f, --force    Overwrite existing files without prompting\n    -c, --cleanup  Remove chunk files after successful reassembly\n\nExamples:\n    $0                    # Reassemble all files\n    $0 -v                 # Reassemble with verbose output\n    $0 -d                 # Dry run to see what would be done\n    $0 -f -c              # Force overwrite and cleanup chunks\n\nEOF\n}\n\n# Function to print colored output\nprint_message() {\n    local color=$1\n    local message=$2\n    echo -e \"${color}${message}${NC}\"\n}\n\n# Function to print verbose messages\nverbose_print() {\n    if [ \"$VERBOSE\" = true ]; then\n        print_message \"$BLUE\" \"[VERBOSE] $1\"\n    fi\n}\n\n# Function to calculate MD5 checksum\ncalculate_md5() {\n    local file=$1\n    if [[ \"$OSTYPE\" == \"darwin\"* ]]; then\n        # macOS\n        md5 -q \"$file\"\n    else\n        # Linux\n        md5sum \"$file\" | awk '{print $1}'\n    fi\n}\n\n# Function to format file size\nformat_size() {\n    local size=$1\n    local units=(\"B\" \"KB\" \"MB\" \"GB\")\n    local unit=0\n    local formatted_size=$size\n    \n    while (( formatted_size > 1024 && unit < 3 )); do\n        formatted_size=$(( formatted_size / 1024 ))\n        unit=$(( unit + 1 ))\n    done\n    \n    echo \"${formatted_size} ${units[$unit]}\"\n}\n\n# Function to parse manifest file\nparse_manifest() {\n    local manifest_file=$1\n    local manifest_dir=$(dirname \"$manifest_file\")\n    \n    verbose_print \"Parsing manifest: $manifest_file\"\n    \n    # Extract values from manifest\n    local original_file=$(grep \"^original_file:\" \"$manifest_file\" | cut -d' ' -f2)\n    local original_size=$(grep \"^original_size:\" \"$manifest_file\" | cut -d' ' -f2)\n    local original_md5=$(grep \"^original_md5:\" \"$manifest_file\" | cut -d' ' -f2)\n    \n    # Extract chunk information\n    local chunks=()\n    while IFS= read -r line; do\n        if [[ \"$line\" =~ name:\\ (.+) ]]; then\n            chunks+=(\"${BASH_REMATCH[1]}\")\n        fi\n    done < \"$manifest_file\"\n    \n    echo \"$original_file|$original_size|$original_md5|${chunks[*]}\"\n}\n\n# Function to reassemble a single file\nreassemble_file() {\n    local manifest_file=$1\n    local manifest_dir=$(dirname \"$manifest_file\")\n    local manifest_basename=$(basename \"$manifest_file\" .manifest)\n    \n    print_message \"$BLUE\" \"\\n📦 Processing: $manifest_basename\"\n    \n    # Parse manifest\n    IFS='|' read -r original_file original_size original_md5 chunks_str <<< \"$(parse_manifest \"$manifest_file\")\"\n    IFS=' ' read -ra chunks <<< \"$chunks_str\"\n    \n    # Determine output path\n    local output_file=\"${REPO_ROOT}/${original_file}\"\n    local output_dir=$(dirname \"$output_file\")\n    \n    verbose_print \"Output file: $output_file\"\n    verbose_print \"Original size: $(format_size $original_size)\"\n    verbose_print \"Original MD5: $original_md5\"\n    verbose_print \"Number of chunks: ${#chunks[@]}\"\n    \n    # Check if output file already exists\n    if [ -f \"$output_file\" ] && [ \"$FORCE\" = false ] && [ \"$DRY_RUN\" = false ]; then\n        print_message \"$YELLOW\" \"  ⚠️  File already exists: $output_file\"\n        \n        # Calculate MD5 of existing file\n        local existing_md5=$(calculate_md5 \"$output_file\")\n        if [ \"$existing_md5\" = \"$original_md5\" ]; then\n            print_message \"$GREEN\" \"  ✅ Existing file has correct checksum. Skipping.\"\n            ((SKIPPED_FILES++))\n            return 0\n        else\n            print_message \"$YELLOW\" \"  ⚠️  Existing file has different checksum!\"\n            read -p \"  Overwrite? (y/N): \" -n 1 -r\n            echo\n            if [[ ! $REPLY =~ ^[Yy]$ ]]; then\n                print_message \"$YELLOW\" \"  ⏭️  Skipping file\"\n                ((SKIPPED_FILES++))\n                return 0\n            fi\n        fi\n    fi\n    \n    # Dry run check\n    if [ \"$DRY_RUN\" = true ]; then\n        print_message \"$YELLOW\" \"  [DRY RUN] Would reassemble ${#chunks[@]} chunks into: $output_file\"\n        if [ \"$VERBOSE\" = true ]; then\n            for chunk in \"${chunks[@]}\"; do\n                echo \"           - $chunk\"\n            done\n        fi\n        return 0\n    fi\n    \n    # Create output directory if it doesn't exist\n    mkdir -p \"$output_dir\"\n    \n    # Reassemble chunks\n    print_message \"$BLUE\" \"  📂 Reassembling ${#chunks[@]} chunks...\"\n    \n    # Remove existing file if forcing\n    if [ -f \"$output_file\" ]; then\n        rm -f \"$output_file\"\n    fi\n    \n    # Concatenate chunks\n    local chunk_count=0\n    for chunk in \"${chunks[@]}\"; do\n        local chunk_path=\"${manifest_dir}/${chunk}\"\n        \n        if [ ! -f \"$chunk_path\" ]; then\n            print_message \"$RED\" \"  ❌ ERROR: Chunk not found: $chunk_path\"\n            ((FAILED_FILES++))\n            return 1\n        fi\n        \n        verbose_print \"  Appending chunk: $chunk\"\n        cat \"$chunk_path\" >> \"$output_file\"\n        \n        ((chunk_count++))\n        if [ \"$VERBOSE\" = false ]; then\n            printf \"\\r  📂 Progress: %d/%d chunks\" \"$chunk_count\" \"${#chunks[@]}\"\n        fi\n    done\n    \n    if [ \"$VERBOSE\" = false ]; then\n        echo  # New line after progress indicator\n    fi\n    \n    # Verify file size\n    local actual_size=$(stat -f%z \"$output_file\" 2>/dev/null || stat -c%s \"$output_file\" 2>/dev/null)\n    if [ \"$actual_size\" != \"$original_size\" ]; then\n        print_message \"$RED\" \"  ❌ ERROR: Size mismatch! Expected: $original_size, Got: $actual_size\"\n        ((FAILED_FILES++))\n        return 1\n    fi\n    \n    verbose_print \"  Size verification passed\"\n    \n    # Verify checksum\n    print_message \"$BLUE\" \"  🔍 Verifying checksum...\"\n    local actual_md5=$(calculate_md5 \"$output_file\")\n    \n    if [ \"$actual_md5\" != \"$original_md5\" ]; then\n        print_message \"$RED\" \"  ❌ ERROR: Checksum mismatch!\"\n        print_message \"$RED\" \"     Expected: $original_md5\"\n        print_message \"$RED\" \"     Got:      $actual_md5\"\n        ((FAILED_FILES++))\n        return 1\n    fi\n    \n    print_message \"$GREEN\" \"  ✅ Successfully reassembled: $(format_size $actual_size)\"\n    ((PROCESSED_FILES++))\n    \n    # Cleanup chunks if requested\n    if [ \"$CLEANUP\" = true ]; then\n        print_message \"$YELLOW\" \"  🧹 Removing chunk files...\"\n        for chunk in \"${chunks[@]}\"; do\n            local chunk_path=\"${manifest_dir}/${chunk}\"\n            rm -f \"$chunk_path\"\n            verbose_print \"     Removed: $chunk\"\n        done\n        print_message \"$GREEN\" \"  ✅ Chunks removed\"\n    fi\n    \n    return 0\n}\n\n# Parse command line arguments\nwhile [[ $# -gt 0 ]]; do\n    case $1 in\n        -h|--help)\n            show_usage\n            exit 0\n            ;;\n        -v|--verbose)\n            VERBOSE=true\n            shift\n            ;;\n        -d|--dry-run)\n            DRY_RUN=true\n            shift\n            ;;\n        -f|--force)\n            FORCE=true\n            shift\n            ;;\n        -c|--cleanup)\n            CLEANUP=true\n            shift\n            ;;\n        *)\n            print_message \"$RED\" \"Unknown option: $1\"\n            show_usage\n            exit 1\n            ;;\n    esac\ndone\n\n# Main execution\nprint_message \"$GREEN\" \"════════════════════════════════════════════════════════════════\"\nprint_message \"$GREEN\" \"                Dataset File Reassembly Script                  \"\nprint_message \"$GREEN\" \"════════════════════════════════════════════════════════════════\"\n\nif [ \"$DRY_RUN\" = true ]; then\n    print_message \"$YELLOW\" \"🔍 DRY RUN MODE - No files will be modified\"\nfi\n\n# Check if chunks directory exists\nif [ ! -d \"$CHUNKS_DIR\" ]; then\n    print_message \"$RED\" \"❌ ERROR: Chunks directory not found: $CHUNKS_DIR\"\n    exit 1\nfi\n\n# Find all manifest files\nprint_message \"$BLUE\" \"\\n📋 Searching for manifest files...\"\n# Use array assignment for better compatibility (mapfile not available on older bash)\nmanifest_files=()\nwhile IFS= read -r line; do\n    manifest_files+=(\"$line\")\ndone < <(find \"$CHUNKS_DIR\" -name \"*.manifest\" -type f | sort)\n\nif [ ${#manifest_files[@]} -eq 0 ]; then\n    print_message \"$YELLOW\" \"⚠️  No manifest files found in $CHUNKS_DIR\"\n    exit 0\nfi\n\nTOTAL_FILES=${#manifest_files[@]}\nprint_message \"$GREEN\" \"📊 Found $TOTAL_FILES manifest file(s) to process\"\n\n# Process each manifest file\nfor manifest_file in \"${manifest_files[@]}\"; do\n    reassemble_file \"$manifest_file\" || true\ndone\n\n# Print summary\nprint_message \"$GREEN\" \"\\n════════════════════════════════════════════════════════════════\"\nprint_message \"$GREEN\" \"                         Summary                                \"\nprint_message \"$GREEN\" \"════════════════════════════════════════════════════════════════\"\nprint_message \"$BLUE\" \"📊 Total manifests:    $TOTAL_FILES\"\nprint_message \"$GREEN\" \"✅ Successfully reassembled: $PROCESSED_FILES\"\n\nif [ $SKIPPED_FILES -gt 0 ]; then\n    print_message \"$YELLOW\" \"⏭️  Skipped (already exist): $SKIPPED_FILES\"\nfi\n\nif [ $FAILED_FILES -gt 0 ]; then\n    print_message \"$RED\" \"❌ Failed:             $FAILED_FILES\"\nfi\n\n# Exit with appropriate code\nif [ $FAILED_FILES -gt 0 ]; then\n    print_message \"$RED\" \"\\n⚠️  Some files failed to reassemble. Check the errors above.\"\n    exit 1\nelse\n    print_message \"$GREEN\" \"\\n🎉 All operations completed successfully!\"\n    \n    if [ \"$CLEANUP\" = false ] && [ \"$DRY_RUN\" = false ]; then\n        print_message \"$BLUE\" \"\\n💡 Tip: Run with -c flag to remove chunk files after reassembly\"\n    fi\nfi\n\n# Show location of reassembled files\nif [ $PROCESSED_FILES -gt 0 ] && [ \"$DRY_RUN\" = false ]; then\n    print_message \"$BLUE\" \"\\n📁 Reassembled files are located in:\"\n    print_message \"$BLUE\" \"   • ${OUTPUT_BASE}/ML-Testing/\"\n    print_message \"$BLUE\" \"   • ${OUTPUT_BASE}/ML-Training/\"\n    print_message \"$BLUE\" \"   • ${OUTPUT_BASE}/ML-Validation/\"\nfi\n",
      "size_bytes": 11768
    },
    "multimodal-agent-builder/scripts/split_large_files.sh": {
      "content": "#!/bin/bash\n\n# Script to split large data files into smaller chunks for GitHub compatibility\n# Each chunk will be max 90MB to stay safely under GitHub's 100MB limit\n\necho \"Creating data chunks directory...\"\nmkdir -p train-test-validate/chunks\n\n# Function to split a file\nsplit_file() {\n    local file_path=\"$1\"\n    local file_name=$(basename \"$file_path\")\n    local dir_name=$(dirname \"$file_path\")\n    local chunk_dir=\"train-test-validate/chunks/${dir_name#train-test-validate/}\"\n    \n    mkdir -p \"$chunk_dir\"\n    \n    echo \"Splitting $file_path...\"\n    \n    # Split into 90MB chunks\n    split -b 90m \"$file_path\" \"$chunk_dir/${file_name}.part_\"\n    \n    # Create a manifest file with checksums\n    echo \"Creating manifest for $file_name...\"\n    echo \"# Manifest for $file_name\" > \"$chunk_dir/${file_name}.manifest\"\n    echo \"original_file: $file_path\" >> \"$chunk_dir/${file_name}.manifest\"\n    echo \"original_size: $(stat -f%z \"$file_path\" 2>/dev/null || stat -c%s \"$file_path\" 2>/dev/null)\" >> \"$chunk_dir/${file_name}.manifest\"\n    echo \"original_md5: $(md5sum \"$file_path\" | cut -d' ' -f1)\" >> \"$chunk_dir/${file_name}.manifest\"\n    echo \"chunks:\" >> \"$chunk_dir/${file_name}.manifest\"\n    \n    for chunk in \"$chunk_dir/${file_name}.part_\"*; do\n        if [ -f \"$chunk\" ]; then\n            chunk_name=$(basename \"$chunk\")\n            chunk_md5=$(md5sum \"$chunk\" | cut -d' ' -f1)\n            echo \"  - name: $chunk_name\" >> \"$chunk_dir/${file_name}.manifest\"\n            echo \"    md5: $chunk_md5\" >> \"$chunk_dir/${file_name}.manifest\"\n        fi\n    done\n    \n    echo \"Split $file_name into $(ls -1 \"$chunk_dir/${file_name}.part_\"* 2>/dev/null | wc -l) chunks\"\n}\n\n# Split large files (over 90MB)\necho \"Finding and splitting large files...\"\n\n# Testing data\nif [ -f \"train-test-validate/ML-Testing/open_images_test_asr.jsonl\" ]; then\n    split_file \"train-test-validate/ML-Testing/open_images_test_asr.jsonl\"\nfi\n\nif [ -f \"train-test-validate/ML-Testing/open_images_test_localized_narratives.jsonl\" ]; then\n    split_file \"train-test-validate/ML-Testing/open_images_test_localized_narratives.jsonl\"\nfi\n\n# Training data\nif [ -f \"train-test-validate/ML-Training/open_images_train_v6_asr.jsonl\" ]; then\n    split_file \"train-test-validate/ML-Training/open_images_train_v6_asr.jsonl\"\nfi\n\nif [ -f \"train-test-validate/ML-Training/open_images_train_v6_localized_narratives-00009-of-00010.jsonl\" ]; then\n    split_file \"train-test-validate/ML-Training/open_images_train_v6_localized_narratives-00009-of-00010.jsonl\"\nfi\n\n# Validation data\nif [ -f \"train-test-validate/ML-Validation/open_images_validation_localized_narratives.jsonl\" ]; then\n    split_file \"train-test-validate/ML-Validation/open_images_validation_localized_narratives.jsonl\"\nfi\n\necho \"\"\necho \"✅ Splitting complete!\"\necho \"\"\necho \"Large files have been split into chunks in train-test-validate/chunks/\"\necho \"You can now remove the original large files from git and add the chunks instead.\"\necho \"\"\necho \"To reassemble files later, use: ./scripts/reassemble_files.sh\"\n",
      "size_bytes": 3032
    },
    "multimodal-agent-builder/src/__init__.py": {
      "content": "",
      "size_bytes": 0
    },
    "multimodal-agent-builder/src/main.py": {
      "content": "\"\"\"Main FastAPI application for the Multimodal Agent Builder.\"\"\"\n\nimport asyncio\nimport uuid\nfrom contextlib import asynccontextmanager\nfrom typing import Any, Dict, List, Optional, Union\n\nfrom fastapi import FastAPI, HTTPException, UploadFile, File, Form, BackgroundTasks, status\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom fastapi.responses import StreamingResponse\nfrom pydantic import BaseModel, Field\n\nfrom config.config import settings\nfrom src.agents.agent_factory import AgentFactory, AgentType, LLMProvider\nfrom src.agents.base_agent import AgentResponse, BaseAgent\nfrom src.agents.multimodal_agent import MultimodalInput\nfrom src.api.training_endpoints import router as training_router\n\n\n# Global agent storage (in production, use a database)\nagent_store: Dict[str, BaseAgent] = {}\n\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    \"\"\"Application lifespan manager.\"\"\"\n    # Startup\n    print(f\"Starting {settings.app_name} v{settings.app_version}\")\n    print(f\"Environment: {settings.app_env}\")\n    \n    # Check API keys\n    api_keys = settings.validate_api_keys()\n    print(f\"API Keys configured: {api_keys}\")\n    \n    yield\n    \n    # Shutdown\n    print(\"Shutting down application...\")\n    # Clean up agents\n    agent_store.clear()\n\n\n# Initialize FastAPI app\napp = FastAPI(\n    title=settings.app_name,\n    version=settings.app_version,\n    description=\"A powerful framework for building multimodal AI agents\",\n    lifespan=lifespan,\n    debug=settings.app_debug\n)\n\n# Add CORS middleware\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],  # In production, specify actual origins\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# Include training router\napp.include_router(training_router)\n\n\n# Request/Response Models\nclass CreateAgentRequest(BaseModel):\n    \"\"\"Request model for creating an agent.\"\"\"\n    name: str = Field(description=\"Agent name\")\n    type: str = Field(default=\"multimodal\", description=\"Agent type\")\n    provider: str = Field(default=\"openai\", description=\"LLM provider\")\n    model: Optional[str] = Field(default=None, description=\"Model name\")\n    description: Optional[str] = Field(default=\"\", description=\"Agent description\")\n    system_prompt: Optional[str] = Field(default=None, description=\"System prompt\")\n    temperature: float = Field(default=0.7, ge=0.0, le=2.0)\n    max_tokens: int = Field(default=4096, gt=0)\n    enable_memory: bool = Field(default=True)\n    enable_tools: bool = Field(default=True)\n    enable_vision: bool = Field(default=True)\n    enable_audio: bool = Field(default=True)\n    config: Dict[str, Any] = Field(default_factory=dict, description=\"Additional configuration\")\n\n\nclass ChatRequest(BaseModel):\n    \"\"\"Request model for chat interaction.\"\"\"\n    message: str = Field(description=\"User message\")\n    context: Optional[List[Dict[str, str]]] = Field(default=None, description=\"Conversation context\")\n    stream: bool = Field(default=False, description=\"Enable streaming response\")\n\n\nclass MultimodalRequest(BaseModel):\n    \"\"\"Request model for multimodal input.\"\"\"\n    text: Optional[str] = None\n    metadata: Dict[str, Any] = Field(default_factory=dict)\n\n\nclass InvokeRequest(BaseModel):\n    \"\"\"Request model for agent invocation.\"\"\"\n    input: Union[str, Dict[str, Any]] = Field(description=\"Input data\")\n    stream: bool = Field(default=False)\n    kwargs: Dict[str, Any] = Field(default_factory=dict)\n\n\nclass AgentInfo(BaseModel):\n    \"\"\"Agent information response.\"\"\"\n    id: str\n    name: str\n    description: str\n    type: str\n    provider: str\n    model: str\n    state: str\n    memory_enabled: bool\n    tools_enabled: bool\n    created_at: str\n    last_activity: str\n    capabilities: Dict[str, bool] = Field(default_factory=dict)\n\n\nclass HealthResponse(BaseModel):\n    \"\"\"Health check response.\"\"\"\n    status: str\n    version: str\n    environment: str\n    api_keys_configured: Dict[str, bool]\n\n\n# API Endpoints\n\n@app.get(\"/\", tags=[\"Root\"])\nasync def root():\n    \"\"\"Root endpoint.\"\"\"\n    return {\n        \"name\": settings.app_name,\n        \"version\": settings.app_version,\n        \"docs\": \"/docs\",\n        \"health\": \"/health\"\n    }\n\n\n@app.get(\"/health\", response_model=HealthResponse, tags=[\"System\"])\nasync def health_check():\n    \"\"\"Health check endpoint.\"\"\"\n    return HealthResponse(\n        status=\"healthy\",\n        version=settings.app_version,\n        environment=settings.app_env,\n        api_keys_configured=settings.validate_api_keys()\n    )\n\n\n@app.get(\"/providers\", tags=[\"System\"])\nasync def list_providers():\n    \"\"\"List available LLM providers.\"\"\"\n    return {\n        \"providers\": AgentFactory.get_available_providers(),\n        \"details\": {\n            \"openai\": {\n                \"models\": AgentFactory.get_provider_models(\"openai\"),\n                \"configured\": bool(settings.openai_api_key)\n            },\n            \"gemini\": {\n                \"models\": AgentFactory.get_provider_models(\"gemini\"),\n                \"configured\": bool(settings.gemini_api_key)\n            },\n            \"anthropic\": {\n                \"models\": AgentFactory.get_provider_models(\"anthropic\"),\n                \"configured\": bool(settings.anthropic_api_key)\n            }\n        }\n    }\n\n\n@app.get(\"/agent-types\", tags=[\"System\"])\nasync def list_agent_types():\n    \"\"\"List available agent types.\"\"\"\n    return {\n        \"types\": AgentFactory.get_available_agent_types(),\n        \"details\": {\n            \"simple\": \"Basic conversational agent\",\n            \"multimodal\": \"Agent with text, image, and audio capabilities\",\n            \"langchain\": \"Agent with advanced tool support via LangChain\"\n        }\n    }\n\n\n@app.post(\"/agents\", response_model=AgentInfo, tags=[\"Agents\"])\nasync def create_agent(request: CreateAgentRequest):\n    \"\"\"Create a new agent.\"\"\"\n    try:\n        # Create agent configuration\n        agent_config = {\n            \"name\": request.name,\n            \"type\": request.type,\n            \"provider\": request.provider,\n            \"model\": request.model,\n            \"description\": request.description,\n            \"system_prompt\": request.system_prompt,\n            \"temperature\": request.temperature,\n            \"max_tokens\": request.max_tokens,\n            \"enable_memory\": request.enable_memory,\n            \"enable_tools\": request.enable_tools,\n            \"enable_vision\": request.enable_vision,\n            \"enable_audio\": request.enable_audio,\n            **request.config\n        }\n        \n        # Create agent using factory\n        agent = AgentFactory.create_agent(**agent_config)\n        \n        # Store agent\n        agent_store[agent.id] = agent\n        \n        # Get capabilities for multimodal agents\n        capabilities = {}\n        if hasattr(agent, 'get_capabilities'):\n            capabilities = agent.get_capabilities()\n        \n        return AgentInfo(\n            id=agent.id,\n            name=agent.config.name,\n            description=agent.config.description,\n            type=request.type,\n            provider=request.provider,\n            model=agent.llm_client.model,\n            state=agent.state.value,\n            memory_enabled=agent.config.enable_memory,\n            tools_enabled=agent.config.enable_tools,\n            created_at=agent.created_at.isoformat(),\n            last_activity=agent.last_activity.isoformat(),\n            capabilities=capabilities\n        )\n        \n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=f\"Failed to create agent: {str(e)}\"\n        )\n\n\n@app.get(\"/agents\", response_model=List[AgentInfo], tags=[\"Agents\"])\nasync def list_agents():\n    \"\"\"List all agents.\"\"\"\n    agents_info = []\n    \n    for agent_id, agent in agent_store.items():\n        capabilities = {}\n        if hasattr(agent, 'get_capabilities'):\n            capabilities = agent.get_capabilities()\n        \n        agents_info.append(AgentInfo(\n            id=agent.id,\n            name=agent.config.name,\n            description=agent.config.description,\n            type=agent.config.model_provider,\n            provider=agent.config.model_provider,\n            model=agent.llm_client.model,\n            state=agent.state.value,\n            memory_enabled=agent.config.enable_memory,\n            tools_enabled=agent.config.enable_tools,\n            created_at=agent.created_at.isoformat(),\n            last_activity=agent.last_activity.isoformat(),\n            capabilities=capabilities\n        ))\n    \n    return agents_info\n\n\n@app.get(\"/agents/{agent_id}\", response_model=AgentInfo, tags=[\"Agents\"])\nasync def get_agent(agent_id: str):\n    \"\"\"Get agent information.\"\"\"\n    if agent_id not in agent_store:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Agent {agent_id} not found\"\n        )\n    \n    agent = agent_store[agent_id]\n    capabilities = {}\n    if hasattr(agent, 'get_capabilities'):\n        capabilities = agent.get_capabilities()\n    \n    return AgentInfo(\n        id=agent.id,\n        name=agent.config.name,\n        description=agent.config.description,\n        type=agent.__class__.__name__,\n        provider=agent.config.model_provider,\n        model=agent.llm_client.model,\n        state=agent.state.value,\n        memory_enabled=agent.config.enable_memory,\n        tools_enabled=agent.config.enable_tools,\n        created_at=agent.created_at.isoformat(),\n        last_activity=agent.last_activity.isoformat(),\n        capabilities=capabilities\n    )\n\n\n@app.delete(\"/agents/{agent_id}\", tags=[\"Agents\"])\nasync def delete_agent(agent_id: str):\n    \"\"\"Delete an agent.\"\"\"\n    if agent_id not in agent_store:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Agent {agent_id} not found\"\n        )\n    \n    del agent_store[agent_id]\n    return {\"message\": f\"Agent {agent_id} deleted successfully\"}\n\n\n@app.post(\"/agents/{agent_id}/chat\", response_model=AgentResponse, tags=[\"Agent Interaction\"])\nasync def chat_with_agent(agent_id: str, request: ChatRequest):\n    \"\"\"Chat with an agent.\"\"\"\n    if agent_id not in agent_store:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Agent {agent_id} not found\"\n        )\n    \n    agent = agent_store[agent_id]\n    \n    try:\n        if request.stream:\n            # Streaming response\n            async def generate():\n                async for chunk in agent.llm_client.generate_stream(\n                    [{\"role\": \"user\", \"content\": request.message}]\n                ):\n                    yield chunk\n            \n            return StreamingResponse(generate(), media_type=\"text/plain\")\n        else:\n            # Regular response\n            response = await agent.chat(request.message)\n            return response\n    \n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Chat failed: {str(e)}\"\n        )\n\n\n@app.post(\"/agents/{agent_id}/invoke\", response_model=AgentResponse, tags=[\"Agent Interaction\"])\nasync def invoke_agent(agent_id: str, request: InvokeRequest):\n    \"\"\"Invoke agent with custom input.\"\"\"\n    if agent_id not in agent_store:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Agent {agent_id} not found\"\n        )\n    \n    agent = agent_store[agent_id]\n    \n    try:\n        response = await agent.run(request.input, **request.kwargs)\n        return response\n    \n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Invocation failed: {str(e)}\"\n        )\n\n\n@app.post(\"/agents/{agent_id}/process-image\", response_model=AgentResponse, tags=[\"Multimodal\"])\nasync def process_image(\n    agent_id: str,\n    image: UploadFile = File(...),\n    prompt: str = Form(default=\"What's in this image?\"),\n):\n    \"\"\"Process an image with the agent.\"\"\"\n    if agent_id not in agent_store:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Agent {agent_id} not found\"\n        )\n    \n    agent = agent_store[agent_id]\n    \n    # Check if agent supports vision\n    if not hasattr(agent, 'process_image'):\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"This agent does not support image processing\"\n        )\n    \n    try:\n        # Read image data\n        image_data = await image.read()\n        \n        # Process image\n        response = await agent.process_image(\n            image=image_data,\n            prompt=prompt\n        )\n        \n        return response\n    \n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Image processing failed: {str(e)}\"\n        )\n\n\n@app.post(\"/agents/{agent_id}/process-audio\", response_model=AgentResponse, tags=[\"Multimodal\"])\nasync def process_audio(\n    agent_id: str,\n    audio: UploadFile = File(...),\n    task: str = Form(default=\"transcribe\"),\n):\n    \"\"\"Process audio with the agent.\"\"\"\n    if agent_id not in agent_store:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Agent {agent_id} not found\"\n        )\n    \n    agent = agent_store[agent_id]\n    \n    # Check if agent supports audio\n    if not hasattr(agent, 'process_audio'):\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"This agent does not support audio processing\"\n        )\n    \n    try:\n        # Read audio data\n        audio_data = await audio.read()\n        \n        # Process audio\n        response = await agent.process_audio(\n            audio=audio_data,\n            task=task\n        )\n        \n        return response\n    \n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Audio processing failed: {str(e)}\"\n        )\n\n\n@app.post(\"/agents/{agent_id}/process-multimodal\", response_model=AgentResponse, tags=[\"Multimodal\"])\nasync def process_multimodal(\n    agent_id: str,\n    text: Optional[str] = Form(None),\n    image: Optional[UploadFile] = File(None),\n    audio: Optional[UploadFile] = File(None),\n):\n    \"\"\"Process multimodal input with the agent.\"\"\"\n    if agent_id not in agent_store:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Agent {agent_id} not found\"\n        )\n    \n    agent = agent_store[agent_id]\n    \n    # Check if agent supports multimodal\n    if not hasattr(agent, 'process_multimodal'):\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"This agent does not support multimodal processing\"\n        )\n    \n    try:\n        # Build multimodal input\n        multimodal_input = MultimodalInput(text=text)\n        \n        if image:\n            multimodal_input.image = await image.read()\n        \n        if audio:\n            multimodal_input.audio = await audio.read()\n        \n        # Process multimodal input\n        response = await agent.process_multimodal(multimodal_input)\n        \n        return response\n    \n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Multimodal processing failed: {str(e)}\"\n        )\n\n\n@app.post(\"/agents/{agent_id}/clear-memory\", tags=[\"Agent Management\"])\nasync def clear_agent_memory(agent_id: str):\n    \"\"\"Clear an agent's memory.\"\"\"\n    if agent_id not in agent_store:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Agent {agent_id} not found\"\n        )\n    \n    agent = agent_store[agent_id]\n    agent.clear_memory()\n    \n    return {\"message\": f\"Memory cleared for agent {agent_id}\"}\n\n\n@app.post(\"/agents/{agent_id}/tools\", tags=[\"Agent Management\"])\nasync def add_tool_to_agent(\n    agent_id: str,\n    tool_name: str = Form(...),\n    tool_description: str = Form(...)\n):\n    \"\"\"Add a tool to an agent.\"\"\"\n    if agent_id not in agent_store:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Agent {agent_id} not found\"\n        )\n    \n    # This is a placeholder - actual tool implementation would be needed\n    return {\n        \"message\": f\"Tool '{tool_name}' added to agent {agent_id}\",\n        \"note\": \"Tool functionality requires implementation\"\n    }\n\n\n@app.get(\"/agents/{agent_id}/tools\", tags=[\"Agent Management\"])\nasync def get_agent_tools(agent_id: str):\n    \"\"\"Get tools available to an agent.\"\"\"\n    if agent_id not in agent_store:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Agent {agent_id} not found\"\n        )\n    \n    agent = agent_store[agent_id]\n    \n    # Get tool descriptions if available\n    if hasattr(agent, 'get_tool_descriptions'):\n        return {\"tools\": agent.get_tool_descriptions()}\n    elif hasattr(agent, 'tools'):\n        return {\"tools\": [str(tool) for tool in agent.tools]}\n    else:\n        return {\"tools\": []}\n\n\n# Quick start endpoints\n@app.post(\"/quick-start/chat-gpt4\", response_model=AgentResponse, tags=[\"Quick Start\"])\nasync def quick_chat_gpt4(message: str = Form(...)):\n    \"\"\"Quick chat with GPT-4.\"\"\"\n    # Create a temporary agent if not exists\n    temp_agent_id = \"quick-gpt4\"\n    \n    if temp_agent_id not in agent_store:\n        agent = AgentFactory.create_multimodal_agent(\n            name=\"Quick GPT-4\",\n            provider=\"openai\",\n            model=\"gpt-4-turbo-preview\"\n        )\n        agent_store[temp_agent_id] = agent\n    \n    response = await agent_store[temp_agent_id].chat(message)\n    return response\n\n\n@app.post(\"/quick-start/chat-gemini\", response_model=AgentResponse, tags=[\"Quick Start\"])\nasync def quick_chat_gemini(message: str = Form(...)):\n    \"\"\"Quick chat with Gemini.\"\"\"\n    # Create a temporary agent if not exists\n    temp_agent_id = \"quick-gemini\"\n    \n    if temp_agent_id not in agent_store:\n        agent = AgentFactory.create_multimodal_agent(\n            name=\"Quick Gemini\",\n            provider=\"gemini\",\n            model=\"gemini-2.5-flash\"\n        )\n        agent_store[temp_agent_id] = agent\n    \n    response = await agent_store[temp_agent_id].chat(message)\n    return response\n\n\n@app.post(\"/quick-start/chat-claude\", response_model=AgentResponse, tags=[\"Quick Start\"])\nasync def quick_chat_claude(message: str = Form(...)):\n    \"\"\"Quick chat with Claude.\"\"\"\n    # Create a temporary agent if not exists\n    temp_agent_id = \"quick-claude\"\n    \n    if temp_agent_id not in agent_store:\n        agent = AgentFactory.create_multimodal_agent(\n            name=\"Quick Claude\",\n            provider=\"anthropic\",\n            model=\"claude-3-opus-20240229\"\n        )\n        agent_store[temp_agent_id] = agent\n    \n    response = await agent_store[temp_agent_id].chat(message)\n    return response\n\n\nif __name__ == \"__main__\":\n    import uvicorn\n    \n    uvicorn.run(\n        \"src.main:app\",\n        host=settings.app_host,\n        port=settings.app_port,\n        reload=settings.app_debug,\n        log_level=settings.log_level.lower()\n    )\n",
      "size_bytes": 19287
    },
    "multimodal-agent-builder/tests/__init__.py": {
      "content": "",
      "size_bytes": 0
    },
    "multimodal-agent-builder/tests/conftest.py": {
      "content": "\"\"\"Shared test fixtures and configuration.\"\"\"\n\nimport os\nimport sys\nimport pytest\nimport asyncio\nfrom typing import Dict, Any, Generator\nfrom unittest.mock import Mock, AsyncMock, patch, MagicMock\nfrom pathlib import Path\n\n# Add project root to path\nproject_root = Path(__file__).parent.parent\nsys.path.insert(0, str(project_root))\n\n# Import modules to test\nfrom src.models.base_llm import BaseLLMClient, Message, LLMResponse\nfrom src.agents.base_agent import BaseAgent, AgentConfig\nfrom src.agents.agent_factory import AgentFactory\nfrom config.config import Settings\n\n\n# Fixtures for test data\n@pytest.fixture\ndef test_config() -> Dict[str, Any]:\n    \"\"\"Provide test configuration.\"\"\"\n    return {\n        \"name\": \"TestAgent\",\n        \"description\": \"Test agent for unit tests\",\n        \"model_provider\": \"openai\",\n        \"model\": \"gpt-4\",\n        \"temperature\": 0.7,\n        \"max_tokens\": 1000,\n        \"enable_memory\": True,\n        \"enable_tools\": True,\n    }\n\n\n@pytest.fixture\ndef mock_settings(monkeypatch):\n    \"\"\"Mock settings with test API keys.\"\"\"\n    monkeypatch.setenv(\"OPENAI_API_KEY\", \"test-openai-key\")\n    monkeypatch.setenv(\"ANTHROPIC_API_KEY\", \"test-anthropic-key\")\n    monkeypatch.setenv(\"GEMINI_API_KEY\", \"test-gemini-key\")\n    monkeypatch.setenv(\"APP_ENV\", \"development\")  # Use valid environment\n    \n    settings = Settings()\n    return settings\n\n\n@pytest.fixture\ndef mock_llm_client():\n    \"\"\"Create a mock LLM client.\"\"\"\n    client = AsyncMock(spec=BaseLLMClient)\n    client.generate.return_value = LLMResponse(\n        content=\"Test response\",\n        model=\"test-model\",\n        usage={\"total_tokens\": 10}\n    )\n    client.generate_stream = AsyncMock()\n    client.count_tokens.return_value = 10\n    client.model = \"test-model\"\n    client.api_key = \"test-key\"\n    return client\n\n\n@pytest.fixture\ndef mock_agent(mock_llm_client):\n    \"\"\"Create a mock agent.\"\"\"\n    config = AgentConfig(\n        name=\"TestAgent\",\n        description=\"Test agent\",\n        model_provider=\"test\",\n        model=\"test-model\"\n    )\n    \n    agent = Mock(spec=BaseAgent)\n    agent.config = config\n    agent.llm_client = mock_llm_client\n    agent.id = \"test-agent-id\"\n    agent.chat = AsyncMock(return_value={\"content\": \"Test response\"})\n    agent.run = AsyncMock(return_value={\"content\": \"Test response\"})\n    \n    return agent\n\n\n@pytest.fixture\ndef sample_image_data():\n    \"\"\"Provide sample image data for testing.\"\"\"\n    # Create a small 1x1 pixel PNG\n    return b'\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\x08\\x06\\x00\\x00\\x00\\x1f\\x15\\xc4\\x89\\x00\\x00\\x00\\rIDATx\\x9cc\\xf8\\x00\\x00\\x00\\x01\\x00\\x01UU\\x86\\x18\\x00\\x00\\x00\\x00IEND\\xaeB`\\x82'\n\n\n@pytest.fixture\ndef sample_audio_data():\n    \"\"\"Provide sample audio data for testing.\"\"\"\n    # Create a minimal WAV header + data\n    return b'RIFF$\\x00\\x00\\x00WAVEfmt \\x10\\x00\\x00\\x00\\x01\\x00\\x01\\x00D\\xac\\x00\\x00\\x88X\\x01\\x00\\x02\\x00\\x10\\x00data\\x00\\x00\\x00\\x00'\n\n\n@pytest.fixture\ndef sample_training_data():\n    \"\"\"Provide sample training data.\"\"\"\n    return [\n        {\n            \"image_id\": \"test_001\",\n            \"caption\": \"A cat sitting on a mat\",\n            \"url\": \"http://example.com/image1.jpg\"\n        },\n        {\n            \"image_id\": \"test_002\", \n            \"caption\": \"A dog playing in the park\",\n            \"url\": \"http://example.com/image2.jpg\"\n        }\n    ]\n\n\n@pytest.fixture\ndef mock_openai_response():\n    \"\"\"Mock OpenAI API response.\"\"\"\n    return {\n        \"id\": \"chatcmpl-test\",\n        \"object\": \"chat.completion\",\n        \"created\": 1234567890,\n        \"model\": \"gpt-4\",\n        \"choices\": [\n            {\n                \"index\": 0,\n                \"message\": {\n                    \"role\": \"assistant\",\n                    \"content\": \"This is a test response from OpenAI\"\n                },\n                \"finish_reason\": \"stop\"\n            }\n        ],\n        \"usage\": {\n            \"prompt_tokens\": 10,\n            \"completion_tokens\": 20,\n            \"total_tokens\": 30\n        }\n    }\n\n\n@pytest.fixture\ndef mock_gemini_response():\n    \"\"\"Mock Gemini API response.\"\"\"\n    return {\n        \"candidates\": [\n            {\n                \"content\": {\n                    \"parts\": [\n                        {\"text\": \"This is a test response from Gemini\"}\n                    ],\n                    \"role\": \"model\"\n                },\n                \"finishReason\": \"STOP\"\n            }\n        ],\n        \"usageMetadata\": {\n            \"promptTokenCount\": 10,\n            \"candidatesTokenCount\": 20,\n            \"totalTokenCount\": 30\n        }\n    }\n\n\n@pytest.fixture\ndef mock_anthropic_response():\n    \"\"\"Mock Anthropic API response.\"\"\"\n    return {\n        \"id\": \"msg_test\",\n        \"type\": \"message\",\n        \"role\": \"assistant\",\n        \"content\": [\n            {\n                \"type\": \"text\",\n                \"text\": \"This is a test response from Claude\"\n            }\n        ],\n        \"model\": \"claude-3-opus-20240229\",\n        \"stop_reason\": \"end_turn\",\n        \"usage\": {\n            \"input_tokens\": 10,\n            \"output_tokens\": 20\n        }\n    }\n\n\n@pytest.fixture\nasync def async_client():\n    \"\"\"Create an async test client for FastAPI.\"\"\"\n    from httpx import AsyncClient\n    from src.main import app\n    \n    async with AsyncClient(app=app, base_url=\"http://test\") as client:\n        yield client\n\n\n@pytest.fixture\ndef temp_dir(tmp_path):\n    \"\"\"Create a temporary directory for test files.\"\"\"\n    test_dir = tmp_path / \"test_data\"\n    test_dir.mkdir()\n    return test_dir\n\n\n@pytest.fixture\ndef mock_file_upload():\n    \"\"\"Create a mock file upload object.\"\"\"\n    from fastapi import UploadFile\n    from io import BytesIO\n    \n    def _create_upload(filename: str, content: bytes, content_type: str = \"application/octet-stream\"):\n        file = UploadFile(\n            filename=filename,\n            file=BytesIO(content),\n            content_type=content_type\n        )\n        return file\n    \n    return _create_upload\n\n\n# Event loop configuration for async tests\n@pytest.fixture(scope=\"session\")\ndef event_loop():\n    \"\"\"Create an event loop for the test session.\"\"\"\n    loop = asyncio.get_event_loop_policy().new_event_loop()\n    yield loop\n    loop.close()\n\n\n# Cleanup fixtures\n@pytest.fixture(autouse=True)\ndef cleanup_agents():\n    \"\"\"Clean up agents after each test.\"\"\"\n    yield\n    # Clear any global agent storage\n    from src.main import agent_store\n    agent_store.clear()\n\n\n@pytest.fixture(autouse=True)\ndef cleanup_env(monkeypatch):\n    \"\"\"Reset environment variables after each test.\"\"\"\n    yield\n    # Environment is automatically restored by monkeypatch\n\n\n# Mock external services\n@pytest.fixture\ndef mock_external_apis():\n    \"\"\"Mock all external API calls.\"\"\"\n    with patch(\"openai.OpenAI\") as mock_openai, \\\n         patch(\"google.generativeai.GenerativeModel\") as mock_gemini, \\\n         patch(\"anthropic.Anthropic\") as mock_anthropic:\n        \n        # Configure mocks\n        mock_openai.return_value.chat.completions.create = AsyncMock()\n        mock_gemini.return_value.generate_content = AsyncMock()\n        mock_anthropic.return_value.messages.create = AsyncMock()\n        \n        yield {\n            \"openai\": mock_openai,\n            \"gemini\": mock_gemini,\n            \"anthropic\": mock_anthropic\n        }\n",
      "size_bytes": 7272
    },
    "multimodal-agent-builder/train-test-validate/living_system.ts": {
      "content": "// Living System Intelligence Agents - Core Architecture for Replit Transport (TypeScript Version)\n\nclass ClosureRecognitionAgent {\n  private closedLoops: Array<{ hypothesis: string; pattern: string; structure: string }> = [];\n\n  detectClosure(hypothesis: string, pattern: string, structure: string): boolean {\n    console.log(\"Attempting to detect closure with:\", { hypothesis, pattern, structure });\n    const valid = [hypothesis, pattern, structure].every((v) => typeof v === 'string' && v.trim() !== '');\n    if (valid) {\n      this.closedLoops.push({ hypothesis, pattern, structure });\n      console.log(\"Closure detected and stored.\");\n      return true;\n    }\n    console.warn(\"Closure not detected. Missing or invalid parameter(s).);\n    return false;\n  }\n\n  report(): Array<{ hypothesis: string; pattern: string; structure: string }> {\n    console.log(\"Reporting closed loops:\", this.closedLoops);\n    return this.closedLoops;\n  }\n}\n\nclass StepFragmentSequenceEngine {\n  private steps: Map<number, string> = new Map();\n\n  injectStep(stepNumber: number, stepContent: string): void {\n    console.log(`Injecting step ${stepNumber}:`, stepContent);\n    this.steps.set(stepNumber, stepContent);\n  }\n\n  resolveSequence(): string[] {\n    const orderedSteps = Array.from(this.steps.entries())\n      .sort(([a], [b]) => a - b)\n      .map(([, content]) => content);\n    console.log(\"Resolved step sequence:\", orderedSteps);\n    return orderedSteps;\n  }\n}\n\nclass ArchitectureComparator {\n  private systems: Record<string, Record<string, string>> = {};\n  private systemOne: string;\n  private systemTwo: string;\n\n  constructor(systemOneName: string, systemTwoName: string) {\n    this.systemOne = systemOneName;\n    this.systemTwo = systemTwoName;\n    this.systems[systemOneName] = {};\n    this.systems[systemTwoName] = {};\n    console.log(`Initialized comparison between systems: ${systemOneName} and ${systemTwoName}`);\n  }\n\n  defineArchitecture(systemName: string, componentName: string, componentDef: string): void {\n    if (!(systemName in this.systems)) return;\n    this.systems[systemName][componentName] = componentDef;\n    console.log(`Defined component ${componentName} in ${systemName}:`, componentDef);\n  }\n\n  compare(): Record<string, { system_1: string | undefined; system_2: string | undefined; match: boolean }> {\n    const keys1 = Object.keys(this.systems[this.systemOne]);\n    const keys2 = Object.keys(this.systems[this.systemTwo]);\n    const allKeys = new Set([...keys1, ...keys2]);\n    const comparison: Record<string, { system_1: string | undefined; system_2: string | undefined; match: boolean }> = {};\n\n    allKeys.forEach((key) => {\n      const comp1 = this.systems[this.systemOne][key];\n      const comp2 = this.systems[this.systemTwo][key];\n      comparison[key] = {\n        system_1: comp1,\n        system_2: comp2,\n        match: comp1 === comp2,\n      };\n      console.log(`Compared component ${key}:`, comparison[key]);\n    });\n\n    return comparison;\n  }\n}\n\nclass AdaptiveRecursionLedger {\n  private entries: Array<{\n    hypothesis: string;\n    pattern: string;\n    structure: string;\n    explanation: string;\n  }> = [];\n\n  logClosure(hypothesis: string, pattern: string, structure: string, whyClosed: string): void {\n    const valid = [hypothesis, pattern, structure, whyClosed].every((v) => typeof v === 'string' && v.trim() !== '');\n    if (valid) {\n      const entry = { hypothesis, pattern, structure, explanation: whyClosed };\n      this.entries.push(entry);\n      console.log(\"Logged closure entry:\", entry);\n    } else {\n      console.warn(\"Invalid entry. Skipped logging.\");\n    }\n  }\n\n  getLedger(): Array<{\n    hypothesis: string;\n    pattern: string;\n    structure: string;\n    explanation: string;\n  }> {\n    console.log(\"Returning full closure ledger:\", this.entries);\n    return this.entries;\n  }\n}\n\n// To use in Replit, save this file as `living_system_agents.ts`\n// Export relevant classes if using modules.\n\n",
      "size_bytes": 3953
    },
    "server/middleware/security.ts": {
      "content": "import helmet from \"helmet\";\nimport rateLimit from \"express-rate-limit\";\nimport { Request, Response, NextFunction } from \"express\";\n\n// Security headers middleware\nexport const securityMiddleware = helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      styleSrc: [\"'self'\", \"'unsafe-inline'\", \"https://fonts.googleapis.com\", \"https://cdnjs.cloudflare.com\"],\n      fontSrc: [\"'self'\", \"https://fonts.gstatic.com\", \"https://cdnjs.cloudflare.com\"],\n      scriptSrc: [\"'self'\", \"'unsafe-inline'\", \"https://cdnjs.cloudflare.com\"],\n      imgSrc: [\"'self'\", \"data:\", \"https:\"],\n      connectSrc: [\"'self'\", \"ws:\", \"wss:\"],\n      frameSrc: [\"'none'\"],\n      objectSrc: [\"'none'\"],\n      upgradeInsecureRequests: [],\n    },\n  },\n  crossOriginEmbedderPolicy: false,\n  hsts: {\n    maxAge: 31536000,\n    includeSubDomains: true,\n    preload: true,\n  },\n});\n\n// Rate limiting configuration - Relaxed for development\nexport const rateLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 2000, // Significantly increased limit to prevent 429 errors during development\n  message: {\n    error: \"Too many requests from this IP, please try again later.\",\n  },\n  standardHeaders: true,\n  legacyHeaders: false,\n  skipSuccessfulRequests: false,\n  skipFailedRequests: false,\n  skip: (req) => {\n    // Skip rate limiting for development dashboard endpoints\n    const developmentSkipPaths = ['/api/dashboard/', '/api/auth/user'];\n    return process.env.NODE_ENV === 'development' && \n           developmentSkipPaths.some(path => req.path.includes(path));\n  },\n});\n\n// Stricter rate limiting for sensitive operations\nexport const strictRateLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 10, // limit each IP to 10 requests per windowMs\n  message: {\n    error: \"Too many sensitive operations from this IP, please try again later.\",\n  },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\n// CSRF protection middleware\nexport const csrfProtection = (req: Request, res: Response, next: NextFunction) => {\n  // Skip CSRF for GET requests and API endpoints with proper authentication\n  if (req.method === \"GET\" || req.path.startsWith(\"/api/auth/\")) {\n    return next();\n  }\n\n  const token = req.headers[\"x-csrf-token\"] || req.body._csrf;\n  const sessionToken = req.session?.csrfToken;\n\n  if (!token || !sessionToken || token !== sessionToken) {\n    return res.status(403).json({ message: \"CSRF token mismatch\" });\n  }\n\n  next();\n};\n\n// Input sanitization middleware\nexport const sanitizeInput = (req: Request, res: Response, next: NextFunction) => {\n  // Recursively sanitize object properties\n  const sanitizeObject = (obj: any): any => {\n    if (typeof obj === \"string\") {\n      // Basic HTML/script tag removal\n      return obj.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, \"\")\n                .replace(/<[^>]*>/g, \"\")\n                .trim();\n    }\n    \n    if (Array.isArray(obj)) {\n      return obj.map(sanitizeObject);\n    }\n    \n    if (obj && typeof obj === \"object\") {\n      const sanitized: any = {};\n      for (const key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          sanitized[key] = sanitizeObject(obj[key]);\n        }\n      }\n      return sanitized;\n    }\n    \n    return obj;\n  };\n\n  if (req.body) {\n    req.body = sanitizeObject(req.body);\n  }\n\n  if (req.query) {\n    req.query = sanitizeObject(req.query);\n  }\n\n  next();\n};\n\n// IP whitelisting middleware (for development/testing)\nexport const ipWhitelist = (allowedIPs: string[]) => {\n  return (req: Request, res: Response, next: NextFunction) => {\n    const clientIP = req.ip || req.connection.remoteAddress || req.headers[\"x-forwarded-for\"];\n    \n    if (process.env.NODE_ENV === \"development\") {\n      return next(); // Skip in development\n    }\n    \n    if (allowedIPs.includes(clientIP as string)) {\n      return next();\n    }\n    \n    res.status(403).json({ message: \"Access denied from this IP address\" });\n  };\n};\n\n// Request size limiting\nexport const requestSizeLimit = (limit: string = \"10mb\") => {\n  return (req: Request, res: Response, next: NextFunction) => {\n    const contentLength = req.headers[\"content-length\"];\n    const maxSize = parseSize(limit);\n    \n    if (contentLength && parseInt(contentLength) > maxSize) {\n      return res.status(413).json({ message: \"Request entity too large\" });\n    }\n    \n    next();\n  };\n};\n\nfunction parseSize(size: string): number {\n  const units: { [key: string]: number } = {\n    'b': 1,\n    'kb': 1024,\n    'mb': 1024 * 1024,\n    'gb': 1024 * 1024 * 1024,\n  };\n  \n  const match = size.toLowerCase().match(/^(\\d+(?:\\.\\d+)?)\\s*([a-z]+)?$/);\n  if (!match) return 0;\n  \n  const value = parseFloat(match[1]);\n  const unit = match[2] || 'b';\n  \n  return Math.floor(value * (units[unit] || 1));\n}\n",
      "size_bytes": 4794
    },
    "server/middleware/validation.ts": {
      "content": "import { Request, Response, NextFunction } from \"express\";\nimport { ZodSchema, ZodError } from \"zod\";\n\nexport const validateRequest = (schema: ZodSchema) => {\n  return (req: Request, res: Response, next: NextFunction) => {\n    try {\n      schema.parse(req.body);\n      next();\n    } catch (error) {\n      if (error instanceof ZodError) {\n        const validationErrors = error.errors.map(err => ({\n          field: err.path.join(\".\"),\n          message: err.message,\n        }));\n        \n        return res.status(400).json({\n          message: \"Validation failed\",\n          errors: validationErrors,\n        });\n      }\n      \n      return res.status(500).json({\n        message: \"Internal server error during validation\",\n      });\n    }\n  };\n};\n\nexport const validateQuery = (schema: ZodSchema) => {\n  return (req: Request, res: Response, next: NextFunction) => {\n    try {\n      schema.parse(req.query);\n      next();\n    } catch (error) {\n      if (error instanceof ZodError) {\n        const validationErrors = error.errors.map(err => ({\n          field: err.path.join(\".\"),\n          message: err.message,\n        }));\n        \n        return res.status(400).json({\n          message: \"Query validation failed\",\n          errors: validationErrors,\n        });\n      }\n      \n      return res.status(500).json({\n        message: \"Internal server error during query validation\",\n      });\n    }\n  };\n};\n\nexport const validateParams = (schema: ZodSchema) => {\n  return (req: Request, res: Response, next: NextFunction) => {\n    try {\n      schema.parse(req.params);\n      next();\n    } catch (error) {\n      if (error instanceof ZodError) {\n        const validationErrors = error.errors.map(err => ({\n          field: err.path.join(\".\"),\n          message: err.message,\n        }));\n        \n        return res.status(400).json({\n          message: \"Parameter validation failed\",\n          errors: validationErrors,\n        });\n      }\n      \n      return res.status(500).json({\n        message: \"Internal server error during parameter validation\",\n      });\n    }\n  };\n};\n",
      "size_bytes": 2078
    },
    "server/routes/multimodal.ts": {
      "content": "/**\n * Multimodal API Routes - Secure multimodal agent interactions\n */\n\nimport { Router } from \"express\";\nimport { multimodalAgent } from \"../services/multimodalAgent\";\nimport { auditLogger } from \"../services/auditLogger\";\nimport multer from \"multer\";\nimport { z } from \"zod\";\n\nconst router = Router();\n\n// Configure multer for file uploads\nconst upload = multer({\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB max file size\n  },\n  fileFilter: (req, file, cb) => {\n    // Allow images and audio files\n    const allowedTypes = [\n      'image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'image/gif',\n      'audio/mp3', 'audio/wav', 'audio/ogg', 'audio/m4a', 'audio/flac'\n    ];\n    \n    if (allowedTypes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error(`File type ${file.mimetype} not allowed`));\n    }\n  }\n});\n\n// Validation schemas\nconst chatRequestSchema = z.object({\n  message: z.string().min(1).max(10000),\n  sessionId: z.string().optional(),\n});\n\nconst imageRequestSchema = z.object({\n  prompt: z.string().min(1).max(1000).default(\"What's in this image?\"),\n  sessionId: z.string().optional(),\n});\n\nconst audioRequestSchema = z.object({\n  task: z.enum([\"transcribe\", \"translate\", \"analyze\"]).default(\"transcribe\"),\n  sessionId: z.string().optional(),\n});\n\n/**\n * POST /api/multimodal/agents/:agentId/chat\n * Chat with a multimodal agent\n */\nrouter.post(\"/agents/:agentId/chat\", async (req, res) => {\n  try {\n    const agentId = parseInt(req.params.agentId);\n    const userId = req.user?.id;\n\n    if (!userId) {\n      return res.status(401).json({ error: \"Unauthorized\" });\n    }\n\n    const validation = chatRequestSchema.safeParse(req.body);\n    if (!validation.success) {\n      return res.status(400).json({ \n        error: \"Invalid request\", \n        details: validation.error.issues \n      });\n    }\n\n    const { message, sessionId } = validation.data;\n\n    const response = await multimodalAgent.processText(\n      agentId,\n      userId,\n      message,\n      sessionId\n    );\n\n    res.json(response);\n\n  } catch (error) {\n    console.error(\"Chat error:\", error);\n    res.status(500).json({ \n      error: \"Internal server error\",\n      message: (error as Error).message \n    });\n  }\n});\n\n/**\n * POST /api/multimodal/agents/:agentId/image\n * Process image with an agent\n */\nrouter.post(\"/agents/:agentId/image\", upload.single('image'), async (req, res) => {\n  try {\n    const agentId = parseInt(req.params.agentId);\n    const userId = req.user?.id;\n\n    if (!userId) {\n      return res.status(401).json({ error: \"Unauthorized\" });\n    }\n\n    if (!req.file) {\n      return res.status(400).json({ error: \"No image file provided\" });\n    }\n\n    const validation = imageRequestSchema.safeParse(req.body);\n    if (!validation.success) {\n      return res.status(400).json({ \n        error: \"Invalid request\", \n        details: validation.error.issues \n      });\n    }\n\n    const { prompt, sessionId } = validation.data;\n\n    const response = await multimodalAgent.processImage(\n      agentId,\n      userId,\n      req.file.buffer,\n      prompt,\n      sessionId\n    );\n\n    res.json(response);\n\n  } catch (error) {\n    console.error(\"Image processing error:\", error);\n    res.status(500).json({ \n      error: \"Internal server error\",\n      message: (error as Error).message \n    });\n  }\n});\n\n/**\n * POST /api/multimodal/agents/:agentId/audio\n * Process audio with an agent\n */\nrouter.post(\"/agents/:agentId/audio\", upload.single('audio'), async (req, res) => {\n  try {\n    const agentId = parseInt(req.params.agentId);\n    const userId = req.user?.id;\n\n    if (!userId) {\n      return res.status(401).json({ error: \"Unauthorized\" });\n    }\n\n    if (!req.file) {\n      return res.status(400).json({ error: \"No audio file provided\" });\n    }\n\n    const validation = audioRequestSchema.safeParse(req.body);\n    if (!validation.success) {\n      return res.status(400).json({ \n        error: \"Invalid request\", \n        details: validation.error.issues \n      });\n    }\n\n    const { task, sessionId } = validation.data;\n\n    const response = await multimodalAgent.processAudio(\n      agentId,\n      userId,\n      req.file.buffer,\n      task,\n      sessionId\n    );\n\n    res.json(response);\n\n  } catch (error) {\n    console.error(\"Audio processing error:\", error);\n    res.status(500).json({ \n      error: \"Internal server error\",\n      message: (error as Error).message \n    });\n  }\n});\n\n/**\n * POST /api/multimodal/agents/:agentId/multimodal\n * Process multimodal input (text + image + audio)\n */\nrouter.post(\"/agents/:agentId/multimodal\", upload.fields([\n  { name: 'image', maxCount: 1 },\n  { name: 'audio', maxCount: 1 }\n]), async (req, res) => {\n  try {\n    const agentId = parseInt(req.params.agentId);\n    const userId = req.user?.id;\n\n    if (!userId) {\n      return res.status(401).json({ error: \"Unauthorized\" });\n    }\n\n    const files = req.files as { [fieldname: string]: Express.Multer.File[] };\n    const { text, sessionId } = req.body;\n\n    const inputs: any = { text };\n\n    if (files.image && files.image[0]) {\n      inputs.image = files.image[0].buffer;\n    }\n\n    if (files.audio && files.audio[0]) {\n      inputs.audio = files.audio[0].buffer;\n    }\n\n    if (!text && !inputs.image && !inputs.audio) {\n      return res.status(400).json({ \n        error: \"At least one input (text, image, or audio) is required\" \n      });\n    }\n\n    const response = await multimodalAgent.processMultimodal(\n      agentId,\n      userId,\n      inputs,\n      sessionId\n    );\n\n    res.json(response);\n\n  } catch (error) {\n    console.error(\"Multimodal processing error:\", error);\n    res.status(500).json({ \n      error: \"Internal server error\",\n      message: (error as Error).message \n    });\n  }\n});\n\n/**\n * GET /api/multimodal/agents/:agentId/capabilities\n * Get agent capabilities\n */\nrouter.get(\"/agents/:agentId/capabilities\", async (req, res) => {\n  try {\n    const agentId = parseInt(req.params.agentId);\n    const userId = req.user?.id;\n\n    if (!userId) {\n      return res.status(401).json({ error: \"Unauthorized\" });\n    }\n\n    const capabilities = await multimodalAgent.getAgentCapabilities(agentId);\n    res.json(capabilities);\n\n  } catch (error) {\n    console.error(\"Capabilities error:\", error);\n    res.status(500).json({ \n      error: \"Internal server error\",\n      message: (error as Error).message \n    });\n  }\n});\n\n/**\n * POST /api/multimodal/agents/:agentId/memory/clear\n * Clear agent memory\n */\nrouter.post(\"/agents/:agentId/memory/clear\", async (req, res) => {\n  try {\n    const agentId = parseInt(req.params.agentId);\n    const userId = req.user?.id;\n\n    if (!userId) {\n      return res.status(401).json({ error: \"Unauthorized\" });\n    }\n\n    await multimodalAgent.clearAgentMemory(agentId, userId);\n    res.json({ message: \"Agent memory cleared successfully\" });\n\n  } catch (error) {\n    console.error(\"Memory clear error:\", error);\n    res.status(500).json({ \n      error: \"Internal server error\",\n      message: (error as Error).message \n    });\n  }\n});\n\n/**\n * GET /api/multimodal/sessions/:sessionId/history\n * Get session interaction history\n */\nrouter.get(\"/sessions/:sessionId/history\", async (req, res) => {\n  try {\n    const { sessionId } = req.params;\n    const userId = req.user?.id;\n\n    if (!userId) {\n      return res.status(401).json({ error: \"Unauthorized\" });\n    }\n\n    const history = await multimodalAgent.getSessionHistory(sessionId);\n    res.json(history);\n\n  } catch (error) {\n    console.error(\"Session history error:\", error);\n    res.status(500).json({ \n      error: \"Internal server error\",\n      message: (error as Error).message \n    });\n  }\n});\n\n/**\n * Error handling middleware\n */\nrouter.use((error: any, req: any, res: any, next: any) => {\n  if (error instanceof multer.MulterError) {\n    if (error.code === 'LIMIT_FILE_SIZE') {\n      return res.status(400).json({ error: 'File too large. Maximum size is 10MB.' });\n    }\n    return res.status(400).json({ error: `Upload error: ${error.message}` });\n  }\n\n  if (error.message.includes('File type') && error.message.includes('not allowed')) {\n    return res.status(400).json({ error: error.message });\n  }\n\n  next(error);\n});\n\nexport default router;",
      "size_bytes": 8194
    },
    "server/services/agentFactory.ts": {
      "content": "import { Agent, AgentType } from \"@shared/schema\";\nimport { storage } from \"../storage\";\nimport { openaiService } from \"./openai\";\nimport { auditLogger } from \"./auditLogger\";\nimport { foundationModel } from \"./foundationModel\";\n\nexport interface AgentConfig {\n  apiKeys?: Record<string, string>;\n  webhooks?: string[];\n  schedules?: Array<{\n    cron: string;\n    action: string;\n  }>;\n  approvalRequired?: boolean;\n  securityLevel?: \"low\" | \"medium\" | \"high\";\n  rateLimits?: {\n    requests: number;\n    period: number;\n  };\n}\n\nexport interface AgentCapability {\n  name: string;\n  description: string;\n  parameters: Record<string, any>;\n  securityLevel: \"low\" | \"medium\" | \"high\";\n}\n\nclass AgentFactory {\n  private agentCapabilities: Map<string, AgentCapability[]> = new Map();\n\n  constructor() {\n    this.initializeCapabilities();\n  }\n\n  private initializeCapabilities() {\n    // Social Media Agent Capabilities\n    this.agentCapabilities.set(\"social_media\", [\n      {\n        name: \"generate_post\",\n        description: \"Generate social media posts with AI\",\n        parameters: { platform: \"string\", topic: \"string\", tone: \"string\" },\n        securityLevel: \"medium\",\n      },\n      {\n        name: \"schedule_post\",\n        description: \"Schedule posts for publication\",\n        parameters: { content: \"string\", publishTime: \"datetime\", platform: \"string\" },\n        securityLevel: \"high\",\n      },\n      {\n        name: \"analyze_engagement\",\n        description: \"Analyze post engagement metrics\",\n        parameters: { postId: \"string\", platform: \"string\" },\n        securityLevel: \"low\",\n      },\n    ]);\n\n    // Email Marketing Agent Capabilities\n    this.agentCapabilities.set(\"email_marketing\", [\n      {\n        name: \"create_campaign\",\n        description: \"Create email marketing campaigns\",\n        parameters: { subject: \"string\", content: \"string\", recipients: \"array\" },\n        securityLevel: \"high\",\n      },\n      {\n        name: \"send_email\",\n        description: \"Send individual emails\",\n        parameters: { to: \"string\", subject: \"string\", content: \"string\" },\n        securityLevel: \"high\",\n      },\n      {\n        name: \"analyze_campaign\",\n        description: \"Analyze campaign performance\",\n        parameters: { campaignId: \"string\" },\n        securityLevel: \"low\",\n      },\n    ]);\n\n    // Analytics Agent Capabilities\n    this.agentCapabilities.set(\"analytics\", [\n      {\n        name: \"generate_report\",\n        description: \"Generate analytics reports\",\n        parameters: { metrics: \"array\", timeRange: \"string\", format: \"string\" },\n        securityLevel: \"low\",\n      },\n      {\n        name: \"monitor_traffic\",\n        description: \"Monitor website traffic\",\n        parameters: { domain: \"string\", alerts: \"boolean\" },\n        securityLevel: \"medium\",\n      },\n      {\n        name: \"create_dashboard\",\n        description: \"Create custom dashboards\",\n        parameters: { widgets: \"array\", layout: \"object\" },\n        securityLevel: \"low\",\n      },\n    ]);\n\n    // File System Agent Capabilities\n    this.agentCapabilities.set(\"file_system\", [\n      {\n        name: \"organize_files\",\n        description: \"Organize files and folders\",\n        parameters: { path: \"string\", rules: \"object\" },\n        securityLevel: \"high\",\n      },\n      {\n        name: \"backup_files\",\n        description: \"Create file backups\",\n        parameters: { source: \"string\", destination: \"string\", schedule: \"string\" },\n        securityLevel: \"high\",\n      },\n      {\n        name: \"monitor_changes\",\n        description: \"Monitor file system changes\",\n        parameters: { watchPaths: \"array\", notifications: \"boolean\" },\n        securityLevel: \"medium\",\n      },\n    ]);\n\n    // DNS Agent Capabilities\n    this.agentCapabilities.set(\"dns\", [\n      {\n        name: \"update_records\",\n        description: \"Update DNS records\",\n        parameters: { domain: \"string\", recordType: \"string\", value: \"string\" },\n        securityLevel: \"high\",\n      },\n      {\n        name: \"monitor_propagation\",\n        description: \"Monitor DNS propagation\",\n        parameters: { domain: \"string\", recordType: \"string\" },\n        securityLevel: \"low\",\n      },\n    ]);\n  }\n\n  async initializeAgent(agent: Agent): Promise<void> {\n    try {\n      await auditLogger.log(\n        agent.userId!,\n        \"agent.initialize\",\n        \"agent\",\n        agent.id.toString(),\n        null,\n        true,\n        null,\n        { agentName: agent.name, agentType: agent.typeId }\n      );\n\n      // Initialize agent with default configuration\n      const defaultConfig = this.getDefaultConfig(agent);\n      \n      await storage.updateAgent(agent.id, {\n        configuration: defaultConfig,\n        status: \"active\",\n        lastActivity: new Date(),\n      });\n\n      await storage.createActivity({\n        userId: agent.userId!,\n        agentId: agent.id,\n        type: \"agent.initialized\",\n        message: `Agent \"${agent.name}\" has been initialized and is ready for tasks`,\n        metadata: { configuration: defaultConfig },\n      });\n\n    } catch (error) {\n      console.error(\"Error initializing agent:\", error);\n      \n      await storage.updateAgent(agent.id, {\n        status: \"error\",\n        lastActivity: new Date(),\n      });\n\n      await auditLogger.log(\n        agent.userId!,\n        \"agent.initialize\",\n        \"agent\",\n        agent.id.toString(),\n        null,\n        false,\n        error.message\n      );\n\n      throw error;\n    }\n  }\n\n  async executeAgentTask(agentId: number, taskType: string, parameters: any): Promise<any> {\n    const agent = await storage.getAgent(agentId);\n    if (!agent) {\n      throw new Error(\"Agent not found\");\n    }\n\n    try {\n      await auditLogger.log(\n        agent.userId!,\n        \"agent.task.execute\",\n        \"task\",\n        null,\n        null,\n        true,\n        null,\n        { agentId, taskType, parameters }\n      );\n\n      const result = await this.processTask(agent, taskType, parameters);\n\n      await storage.createActivity({\n        userId: agent.userId!,\n        agentId: agent.id,\n        type: \"task.completed\",\n        message: `Agent \"${agent.name}\" completed task: ${taskType}`,\n        metadata: { taskType, parameters, result },\n      });\n\n      return result;\n\n    } catch (error) {\n      console.error(\"Error executing agent task:\", error);\n      \n      await auditLogger.log(\n        agent.userId!,\n        \"agent.task.execute\",\n        \"task\",\n        null,\n        null,\n        false,\n        error.message,\n        { agentId, taskType, parameters }\n      );\n\n      await storage.createActivity({\n        userId: agent.userId!,\n        agentId: agent.id,\n        type: \"task.failed\",\n        message: `Agent \"${agent.name}\" failed to complete task: ${taskType}`,\n        metadata: { taskType, parameters, error: error.message },\n      });\n\n      throw error;\n    }\n  }\n\n  private async processTask(agent: Agent, taskType: string, parameters: any): Promise<any> {\n    const agentType = await this.getAgentTypeFromAgent(agent);\n    \n    switch (agentType) {\n      case \"social_media\":\n        return await this.processSocialMediaTask(agent, taskType, parameters);\n      case \"email_marketing\":\n        return await this.processEmailMarketingTask(agent, taskType, parameters);\n      case \"analytics\":\n        return await this.processAnalyticsTask(agent, taskType, parameters);\n      case \"file_system\":\n        return await this.processFileSystemTask(agent, taskType, parameters);\n      default:\n        throw new Error(`Unknown agent type: ${agentType}`);\n    }\n  }\n\n  private async processSocialMediaTask(agent: Agent, taskType: string, parameters: any): Promise<any> {\n    switch (taskType) {\n      case \"generate_post\":\n        const contentRequest = {\n          type: \"social_media\" as const,\n          platform: parameters.platform,\n          topic: parameters.topic,\n          tone: parameters.tone || \"professional\",\n          length: parameters.length || \"medium\",\n          targetAudience: parameters.targetAudience,\n          keywords: parameters.keywords,\n        };\n        \n        const contentResult = await openaiService.generateContent(contentRequest);\n        \n        // Check if approval is required\n        if (agent.securityConfig?.approvalRequired) {\n          await storage.createApproval({\n            agentId: agent.id,\n            userId: agent.userId!,\n            type: \"social_media_post\",\n            title: `Social Media Post for ${parameters.platform}`,\n            description: `Generated post about ${parameters.topic}`,\n            requestData: { content: contentResult.content, platform: parameters.platform },\n            suggestedResponse: contentResult.content,\n          });\n          \n          return {\n            status: \"pending_approval\",\n            content: contentResult.content,\n            approvalRequired: true,\n          };\n        }\n        \n        return {\n          status: \"completed\",\n          content: contentResult.content,\n          suggestions: contentResult.suggestions,\n          metadata: contentResult.metadata,\n        };\n        \n      case \"schedule_post\":\n        return {\n          status: \"scheduled\",\n          scheduledFor: parameters.publishTime,\n          platform: parameters.platform,\n          message: \"Post has been scheduled for publication\",\n        };\n        \n      case \"analyze_engagement\":\n        return {\n          status: \"completed\",\n          engagement: {\n            likes: Math.floor(Math.random() * 1000),\n            shares: Math.floor(Math.random() * 100),\n            comments: Math.floor(Math.random() * 50),\n            reach: Math.floor(Math.random() * 5000),\n          },\n          insights: [\"High engagement during evening hours\", \"Visual content performs better\"],\n        };\n        \n      default:\n        throw new Error(`Unknown social media task: ${taskType}`);\n    }\n  }\n\n  private async processEmailMarketingTask(agent: Agent, taskType: string, parameters: any): Promise<any> {\n    switch (taskType) {\n      case \"create_campaign\":\n        const campaignId = `campaign_${Date.now()}`;\n        \n        if (agent.securityConfig?.approvalRequired) {\n          await storage.createApproval({\n            agentId: agent.id,\n            userId: agent.userId!,\n            type: \"email_campaign\",\n            title: `Email Campaign: ${parameters.subject}`,\n            description: `Campaign to ${parameters.recipients.length} recipients`,\n            requestData: parameters,\n            suggestedResponse: `Send campaign to ${parameters.recipients.length} recipients`,\n          });\n          \n          return {\n            status: \"pending_approval\",\n            campaignId,\n            approvalRequired: true,\n          };\n        }\n        \n        return {\n          status: \"created\",\n          campaignId,\n          recipients: parameters.recipients.length,\n          subject: parameters.subject,\n        };\n        \n      case \"send_email\":\n        return {\n          status: \"sent\",\n          messageId: `msg_${Date.now()}`,\n          deliveredAt: new Date().toISOString(),\n        };\n        \n      case \"analyze_campaign\":\n        return {\n          status: \"completed\",\n          metrics: {\n            sent: 1000,\n            delivered: 985,\n            opened: 320,\n            clicked: 45,\n            bounced: 15,\n            unsubscribed: 3,\n          },\n          openRate: 0.325,\n          clickRate: 0.046,\n          deliveryRate: 0.985,\n        };\n        \n      default:\n        throw new Error(`Unknown email marketing task: ${taskType}`);\n    }\n  }\n\n  private async processAnalyticsTask(agent: Agent, taskType: string, parameters: any): Promise<any> {\n    switch (taskType) {\n      case \"generate_report\":\n        return {\n          status: \"completed\",\n          reportId: `report_${Date.now()}`,\n          format: parameters.format,\n          metrics: parameters.metrics,\n          timeRange: parameters.timeRange,\n          data: {\n            pageViews: Math.floor(Math.random() * 10000),\n            uniqueVisitors: Math.floor(Math.random() * 5000),\n            bounceRate: Math.random() * 0.5,\n            averageSessionDuration: Math.floor(Math.random() * 300),\n          },\n        };\n        \n      case \"monitor_traffic\":\n        return {\n          status: \"monitoring\",\n          domain: parameters.domain,\n          alerts: parameters.alerts,\n          currentTraffic: {\n            visitors: Math.floor(Math.random() * 100),\n            pageViews: Math.floor(Math.random() * 500),\n            loading: Math.random() * 3,\n          },\n        };\n        \n      case \"create_dashboard\":\n        return {\n          status: \"created\",\n          dashboardId: `dashboard_${Date.now()}`,\n          widgets: parameters.widgets,\n          layout: parameters.layout,\n          url: `/dashboard/${Date.now()}`,\n        };\n        \n      default:\n        throw new Error(`Unknown analytics task: ${taskType}`);\n    }\n  }\n\n  private async processFileSystemTask(agent: Agent, taskType: string, parameters: any): Promise<any> {\n    switch (taskType) {\n      case \"organize_files\":\n        return {\n          status: \"completed\",\n          path: parameters.path,\n          filesOrganized: Math.floor(Math.random() * 100),\n          foldersCreated: Math.floor(Math.random() * 10),\n          rules: parameters.rules,\n        };\n        \n      case \"backup_files\":\n        return {\n          status: \"completed\",\n          source: parameters.source,\n          destination: parameters.destination,\n          filesBackedUp: Math.floor(Math.random() * 1000),\n          backupSize: `${Math.floor(Math.random() * 100)}MB`,\n          schedule: parameters.schedule,\n        };\n        \n      case \"monitor_changes\":\n        return {\n          status: \"monitoring\",\n          watchPaths: parameters.watchPaths,\n          notifications: parameters.notifications,\n          changesDetected: Math.floor(Math.random() * 5),\n        };\n        \n      default:\n        throw new Error(`Unknown file system task: ${taskType}`);\n    }\n  }\n\n  private getDefaultConfig(agent: Agent): AgentConfig {\n    return {\n      apiKeys: {},\n      webhooks: [],\n      schedules: [],\n      approvalRequired: true,\n      securityLevel: \"high\",\n      rateLimits: {\n        requests: 100,\n        period: 3600, // 1 hour\n      },\n    };\n  }\n\n  private async getAgentTypeFromAgent(agent: Agent): Promise<string> {\n    if (!agent.typeId) {\n      throw new Error(\"Agent type not specified\");\n    }\n\n    // Map type IDs to type names (this would be dynamic based on agent types)\n    const typeMap: Record<number, string> = {\n      1: \"social_media\",\n      2: \"email_marketing\", \n      3: \"analytics\",\n      4: \"file_system\",\n      5: \"dns\",\n    };\n\n    return typeMap[agent.typeId] || \"unknown\";\n  }\n\n  getAgentCapabilities(agentType: string): AgentCapability[] {\n    return this.agentCapabilities.get(agentType) || [];\n  }\n\n  async validateAgentSecurity(agent: Agent): Promise<{\n    valid: boolean;\n    issues: string[];\n    recommendations: string[];\n  }> {\n    const issues: string[] = [];\n    const recommendations: string[] = [];\n\n    // Check security configuration\n    if (!agent.securityConfig) {\n      issues.push(\"No security configuration found\");\n      recommendations.push(\"Configure security settings for the agent\");\n    }\n\n    // Check encryption settings\n    if (!agent.securityConfig?.encryption) {\n      issues.push(\"Encryption not enabled\");\n      recommendations.push(\"Enable encryption for sensitive data\");\n    }\n\n    // Check approval requirements\n    if (!agent.securityConfig?.approvalRequired) {\n      recommendations.push(\"Consider enabling approval requirements for high-risk actions\");\n    }\n\n    return {\n      valid: issues.length === 0,\n      issues,\n      recommendations,\n    };\n  }\n}\n\nexport const agentFactory = new AgentFactory();\n",
      "size_bytes": 15838
    },
    "server/services/auditLogger.ts": {
      "content": "import { InsertAuditLog } from \"@shared/schema\";\nimport { storage } from \"../storage\";\nimport { Request } from \"express\";\n\ninterface AuditLogEntry {\n  userId: string;\n  action: string;\n  resource: string;\n  resourceId?: string | null;\n  ipAddress?: string;\n  userAgent?: string;\n  success: boolean;\n  error?: string | null;\n  metadata?: Record<string, any>;\n}\n\nclass AuditLogger {\n  async log(\n    userId: string | null,\n    action: string,\n    resource: string,\n    resourceId?: string | null,\n    req?: Request | null,\n    success: boolean = true,\n    error?: string | null,\n    metadata?: Record<string, any>\n  ): Promise<void> {\n    try {\n      const auditEntry: InsertAuditLog = {\n        userId: userId || \"system\",\n        action,\n        resource,\n        resourceId,\n        ipAddress: req?.ip || req?.connection?.remoteAddress || null,\n        userAgent: req?.get(\"User-Agent\") || null,\n        success,\n        error,\n        metadata,\n      };\n\n      await storage.createAuditLog(auditEntry);\n\n      // Log to console for immediate visibility\n      const logLevel = success ? \"INFO\" : \"ERROR\";\n      const logMessage = `[${logLevel}] ${userId || \"system\"} - ${action} on ${resource}${resourceId ? ` (${resourceId})` : \"\"} - ${success ? \"SUCCESS\" : \"FAILED\"}`;\n      \n      if (success) {\n        console.log(logMessage);\n      } else {\n        console.error(logMessage, error);\n      }\n\n      // Additional security alerting for critical actions\n      if (this.isCriticalAction(action) || !success) {\n        await this.handleCriticalEvent(auditEntry);\n      }\n\n    } catch (auditError) {\n      console.error(\"Failed to write audit log:\", auditError);\n      // Still log to console even if database fails\n      console.error(`AUDIT FAILURE: ${action} by ${userId} on ${resource} - ${success ? \"SUCCESS\" : \"FAILED\"}`);\n    }\n  }\n\n  async logSecurityEvent(\n    userId: string | null,\n    eventType: string,\n    severity: \"low\" | \"medium\" | \"high\" | \"critical\",\n    description: string,\n    req?: Request | null,\n    metadata?: Record<string, any>\n  ): Promise<void> {\n    const action = `security.${eventType}`;\n    const success = severity !== \"critical\";\n    \n    await this.log(\n      userId,\n      action,\n      \"security\",\n      null,\n      req,\n      success,\n      severity === \"critical\" ? description : null,\n      {\n        ...metadata,\n        severity,\n        eventType,\n        description,\n      }\n    );\n\n    // Immediate console output for security events\n    const logMessage = `[SECURITY:${severity.toUpperCase()}] ${eventType} - ${description}`;\n    \n    if (severity === \"critical\" || severity === \"high\") {\n      console.error(logMessage);\n    } else {\n      console.warn(logMessage);\n    }\n  }\n\n  async logAuthEvent(\n    userId: string | null,\n    eventType: \"login\" | \"logout\" | \"login_failure\" | \"password_change\" | \"account_locked\",\n    req?: Request | null,\n    metadata?: Record<string, any>\n  ): Promise<void> {\n    const success = !eventType.includes(\"failure\") && eventType !== \"account_locked\";\n    \n    await this.log(\n      userId,\n      `auth.${eventType}`,\n      \"authentication\",\n      userId,\n      req,\n      success,\n      success ? null : `Authentication event: ${eventType}`,\n      metadata\n    );\n  }\n\n  async logDataAccess(\n    userId: string,\n    resource: string,\n    resourceId: string,\n    operation: \"read\" | \"write\" | \"delete\",\n    req?: Request | null,\n    metadata?: Record<string, any>\n  ): Promise<void> {\n    await this.log(\n      userId,\n      `data.${operation}`,\n      resource,\n      resourceId,\n      req,\n      true,\n      null,\n      {\n        ...metadata,\n        operation,\n        sensitive: this.isSensitiveResource(resource),\n      }\n    );\n  }\n\n  async logSystemEvent(\n    eventType: string,\n    description: string,\n    success: boolean = true,\n    metadata?: Record<string, any>\n  ): Promise<void> {\n    await this.log(\n      null,\n      `system.${eventType}`,\n      \"system\",\n      null,\n      null,\n      success,\n      success ? null : description,\n      {\n        ...metadata,\n        description,\n        timestamp: new Date().toISOString(),\n      }\n    );\n  }\n\n  async getSecurityAlerts(\n    userId: string,\n    timeRange: { from: Date; to: Date },\n    severity?: \"low\" | \"medium\" | \"high\" | \"critical\"\n  ): Promise<any[]> {\n    // This would fetch security-related audit logs\n    const auditLogs = await storage.getAuditLogs(userId, 100);\n    \n    return auditLogs\n      .filter(log => \n        log.action.startsWith(\"security.\") &&\n        log.createdAt >= timeRange.from &&\n        log.createdAt <= timeRange.to &&\n        (!severity || log.metadata?.severity === severity)\n      )\n      .map(log => ({\n        id: log.id,\n        action: log.action,\n        severity: log.metadata?.severity || \"medium\",\n        description: log.metadata?.description || log.action,\n        timestamp: log.createdAt,\n        userId: log.userId,\n        ipAddress: log.ipAddress,\n        success: log.success,\n      }));\n  }\n\n  async generateSecurityReport(\n    userId: string,\n    timeRange: { from: Date; to: Date }\n  ): Promise<{\n    totalEvents: number;\n    securityEvents: number;\n    failedLogins: number;\n    criticalEvents: number;\n    topActions: Array<{ action: string; count: number }>;\n    ipAddresses: Array<{ ip: string; count: number }>;\n  }> {\n    const auditLogs = await storage.getAuditLogs(userId, 1000);\n    \n    const filteredLogs = auditLogs.filter(log => \n      log.createdAt >= timeRange.from &&\n      log.createdAt <= timeRange.to\n    );\n\n    const securityEvents = filteredLogs.filter(log => \n      log.action.startsWith(\"security.\") || log.action.startsWith(\"auth.\")\n    );\n\n    const failedLogins = filteredLogs.filter(log => \n      log.action === \"auth.login_failure\"\n    );\n\n    const criticalEvents = filteredLogs.filter(log => \n      log.metadata?.severity === \"critical\" || !log.success\n    );\n\n    // Count actions\n    const actionCounts = new Map<string, number>();\n    filteredLogs.forEach(log => {\n      const count = actionCounts.get(log.action) || 0;\n      actionCounts.set(log.action, count + 1);\n    });\n\n    // Count IP addresses\n    const ipCounts = new Map<string, number>();\n    filteredLogs.forEach(log => {\n      if (log.ipAddress) {\n        const count = ipCounts.get(log.ipAddress) || 0;\n        ipCounts.set(log.ipAddress, count + 1);\n      }\n    });\n\n    return {\n      totalEvents: filteredLogs.length,\n      securityEvents: securityEvents.length,\n      failedLogins: failedLogins.length,\n      criticalEvents: criticalEvents.length,\n      topActions: Array.from(actionCounts.entries())\n        .sort((a, b) => b[1] - a[1])\n        .slice(0, 10)\n        .map(([action, count]) => ({ action, count })),\n      ipAddresses: Array.from(ipCounts.entries())\n        .sort((a, b) => b[1] - a[1])\n        .slice(0, 10)\n        .map(([ip, count]) => ({ ip, count })),\n    };\n  }\n\n  private isCriticalAction(action: string): boolean {\n    const criticalActions = [\n      \"auth.login_failure\",\n      \"auth.account_locked\",\n      \"security.breach\",\n      \"security.unauthorized_access\",\n      \"agent.delete\",\n      \"credential.create\",\n      \"credential.delete\",\n      \"system.shutdown\",\n      \"system.configuration_change\",\n    ];\n\n    return criticalActions.some(critical => action.includes(critical));\n  }\n\n  private isSensitiveResource(resource: string): boolean {\n    const sensitiveResources = [\n      \"credential\",\n      \"user\",\n      \"security\",\n      \"payment\",\n      \"personal_data\",\n    ];\n\n    return sensitiveResources.some(sensitive => resource.includes(sensitive));\n  }\n\n  private async handleCriticalEvent(auditEntry: AuditLogEntry): Promise<void> {\n    // In a production environment, this would:\n    // 1. Send alerts to administrators\n    // 2. Trigger automated security responses\n    // 3. Log to external security monitoring systems\n    // 4. Create incident tickets\n\n    const alertMessage = `CRITICAL SECURITY EVENT: ${auditEntry.action} on ${auditEntry.resource} by ${auditEntry.userId}`;\n    \n    console.error(\"🚨 SECURITY ALERT:\", alertMessage);\n    \n    // Here you would integrate with:\n    // - Email/SMS alerting systems\n    // - Slack/Teams notifications\n    // - External SIEM systems\n    // - Incident management tools\n    \n    // For now, we'll just ensure it's logged prominently\n    if (auditEntry.error) {\n      console.error(\"Error details:\", auditEntry.error);\n    }\n    \n    if (auditEntry.metadata) {\n      console.error(\"Additional context:\", auditEntry.metadata);\n    }\n  }\n}\n\nexport const auditLogger = new AuditLogger();\n",
      "size_bytes": 8582
    },
    "server/services/foundationModel.ts": {
      "content": "import OpenAI from \"openai\";\nimport { z } from \"zod\";\n\n// Foundation model interface for BERT and reasoning capabilities\ninterface FoundationModel {\n  generateText(prompt: string, options?: GenerationOptions): Promise<string>;\n  embedText(text: string): Promise<number[]>;\n  analyzeIntent(text: string): Promise<IntentAnalysis>;\n  executeReasoning(query: string, context?: string): Promise<ReasoningResult>;\n  createWorkflow(description: string): Promise<WorkflowPlan>;\n}\n\ninterface GenerationOptions {\n  maxTokens?: number;\n  temperature?: number;\n  topP?: number;\n  model?: string;\n}\n\ninterface IntentAnalysis {\n  intent: string;\n  confidence: number;\n  entities: Array<{ name: string; value: string; type: string }>;\n  actions: string[];\n}\n\ninterface ReasoningResult {\n  reasoning: string;\n  conclusion: string;\n  confidence: number;\n  steps: string[];\n  sources?: string[];\n}\n\ninterface WorkflowPlan {\n  id: string;\n  steps: WorkflowStep[];\n  estimatedDuration: number;\n  dependencies: string[];\n  resources: string[];\n}\n\ninterface WorkflowStep {\n  id: string;\n  name: string;\n  description: string;\n  type: 'analysis' | 'action' | 'decision' | 'communication';\n  parameters: Record<string, any>;\n  expectedOutput: string;\n  nextSteps: string[];\n}\n\n// Schema definitions for structured outputs\nconst IntentSchema = z.object({\n  intent: z.string(),\n  confidence: z.number().min(0).max(1),\n  entities: z.array(z.object({\n    name: z.string(),\n    value: z.string(),\n    type: z.string()\n  })),\n  actions: z.array(z.string())\n});\n\nconst ReasoningSchema = z.object({\n  reasoning: z.string(),\n  conclusion: z.string(),\n  confidence: z.number().min(0).max(1),\n  steps: z.array(z.string()),\n  sources: z.array(z.string()).optional()\n});\n\nconst WorkflowSchema = z.object({\n  id: z.string(),\n  steps: z.array(z.object({\n    id: z.string(),\n    name: z.string(),\n    description: z.string(),\n    type: z.enum(['analysis', 'action', 'decision', 'communication']),\n    parameters: z.record(z.any()),\n    expectedOutput: z.string(),\n    nextSteps: z.array(z.string())\n  })),\n  estimatedDuration: z.number(),\n  dependencies: z.array(z.string()),\n  resources: z.array(z.string())\n});\n\nclass BERTFoundationModel implements FoundationModel {\n  private openai: OpenAI;\n  \n  constructor() {\n    this.openai = new OpenAI({\n      apiKey: process.env.OPENAI_API_KEY\n    });\n  }\n\n  async generateText(prompt: string, options: GenerationOptions = {}): Promise<string> {\n    try {\n      const response = await this.openai.chat.completions.create({\n        model: options.model || \"gpt-4\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are BERT, a foundational reasoning model integrated into the Agent Factory platform. Provide clear, structured responses with logical reasoning.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        max_tokens: options.maxTokens || 1500,\n        temperature: options.temperature || 0.7,\n        top_p: options.topP || 0.9\n      });\n\n      return response.choices[0]?.message?.content || \"\";\n    } catch (error) {\n      console.error(\"Error generating text:\", error);\n      throw new Error(\"Failed to generate text from foundation model\");\n    }\n  }\n\n  async embedText(text: string): Promise<number[]> {\n    try {\n      const response = await this.openai.embeddings.create({\n        model: \"text-embedding-ada-002\",\n        input: text\n      });\n      return response.data[0].embedding;\n    } catch (error) {\n      console.error(\"Error creating embeddings:\", error);\n      throw new Error(\"Failed to create text embeddings\");\n    }\n  }\n\n  async analyzeIntent(text: string): Promise<IntentAnalysis> {\n    const prompt = `\n    Analyze the following text for intent, entities, and required actions.\n    \n    Text: \"${text}\"\n    \n    Provide a structured analysis with:\n    1. The primary intent\n    2. Confidence level (0-1)\n    3. Named entities (name, value, type)\n    4. Suggested actions\n    \n    Format as JSON with fields: intent, confidence, entities, actions\n    `;\n\n    try {\n      const response = await this.generateText(prompt, { temperature: 0.3 });\n      const parsed = JSON.parse(response);\n      return IntentSchema.parse(parsed);\n    } catch (error) {\n      console.error(\"Error analyzing intent:\", error);\n      // Fallback basic analysis\n      return {\n        intent: \"general_query\",\n        confidence: 0.5,\n        entities: [],\n        actions: [\"process_request\"]\n      };\n    }\n  }\n\n  async executeReasoning(query: string, context?: string): Promise<ReasoningResult> {\n    const prompt = `\n    Execute step-by-step reasoning for the following query.\n    \n    Query: \"${query}\"\n    ${context ? `Context: \"${context}\"` : \"\"}\n    \n    Provide:\n    1. Detailed reasoning process\n    2. Clear conclusion\n    3. Confidence level (0-1)\n    4. Step-by-step breakdown\n    5. Sources or references if applicable\n    \n    Format as JSON with fields: reasoning, conclusion, confidence, steps, sources\n    `;\n\n    try {\n      const response = await this.generateText(prompt, { temperature: 0.2, maxTokens: 2000 });\n      const parsed = JSON.parse(response);\n      return ReasoningSchema.parse(parsed);\n    } catch (error) {\n      console.error(\"Error executing reasoning:\", error);\n      return {\n        reasoning: \"Unable to complete full reasoning analysis\",\n        conclusion: \"Analysis incomplete due to processing error\",\n        confidence: 0.1,\n        steps: [\"Error in reasoning pipeline\"],\n        sources: []\n      };\n    }\n  }\n\n  async createWorkflow(description: string): Promise<WorkflowPlan> {\n    const prompt = `\n    Create a detailed workflow plan for the following requirement:\n    \n    Description: \"${description}\"\n    \n    Generate a comprehensive workflow with:\n    1. Unique workflow ID\n    2. Sequential steps with clear descriptions\n    3. Step types (analysis, action, decision, communication)\n    4. Parameters for each step\n    5. Expected outputs\n    6. Next step connections\n    7. Estimated duration in minutes\n    8. Dependencies and required resources\n    \n    Format as JSON with fields: id, steps, estimatedDuration, dependencies, resources\n    `;\n\n    try {\n      const response = await this.generateText(prompt, { temperature: 0.4, maxTokens: 2500 });\n      const parsed = JSON.parse(response);\n      const workflow = WorkflowSchema.parse(parsed);\n      \n      // Ensure unique ID if not provided\n      if (!workflow.id) {\n        workflow.id = `workflow_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      }\n      \n      return workflow;\n    } catch (error) {\n      console.error(\"Error creating workflow:\", error);\n      // Return basic fallback workflow\n      return {\n        id: `fallback_${Date.now()}`,\n        steps: [\n          {\n            id: \"step_1\",\n            name: \"Initial Analysis\",\n            description: \"Analyze the requirements\",\n            type: \"analysis\",\n            parameters: { input: description },\n            expectedOutput: \"Requirements analysis\",\n            nextSteps: [\"step_2\"]\n          },\n          {\n            id: \"step_2\",\n            name: \"Execute Action\",\n            description: \"Perform the requested action\",\n            type: \"action\",\n            parameters: {},\n            expectedOutput: \"Action completed\",\n            nextSteps: []\n          }\n        ],\n        estimatedDuration: 30,\n        dependencies: [],\n        resources: [\"foundation_model\", \"agent_factory\"]\n      };\n    }\n  }\n\n  // Enhanced capabilities for National Reserve integration\n  async analyzePatterns(data: string[], context: string): Promise<any> {\n    const prompt = `\n    Analyze the following data patterns for the National Reserve system:\n    \n    Data: ${JSON.stringify(data)}\n    Context: ${context}\n    \n    Identify:\n    1. Communication patterns\n    2. Behavioral indicators\n    3. Potential security concerns\n    4. Recommendations for agent deployment\n    `;\n\n    return await this.generateText(prompt, { temperature: 0.3 });\n  }\n\n  async optimizeAgentConfiguration(agentType: string, performance: any): Promise<any> {\n    const prompt = `\n    Optimize configuration for ${agentType} agent based on performance metrics:\n    \n    Performance Data: ${JSON.stringify(performance)}\n    \n    Provide:\n    1. Configuration adjustments\n    2. Performance improvement strategies\n    3. Resource allocation recommendations\n    4. Training data suggestions\n    `;\n\n    return await this.generateText(prompt, { temperature: 0.2 });\n  }\n}\n\n// Singleton instance\nexport const foundationModel = new BERTFoundationModel();\n\n// Export types for use in other modules\nexport type {\n  FoundationModel,\n  IntentAnalysis,\n  ReasoningResult,\n  WorkflowPlan,\n  WorkflowStep,\n  GenerationOptions\n};",
      "size_bytes": 8794
    },
    "server/services/multimodalAgent.ts": {
      "content": "/**\n * Multimodal Agent Service - Integrates OpenAI multimodal capabilities with secure platform\n * Based on the cloned multimodal-agent-builder repository\n */\n\nimport { storage } from \"../storage\";\nimport { auditLogger } from \"./auditLogger\";\nimport OpenAI from \"openai\";\nimport { nanoid } from \"nanoid\";\nimport { Agent, MultimodalSession, MultimodalInteraction, MultimodalFile } from \"../../shared/schema\";\n\ninterface MultimodalInput {\n  text?: string;\n  image?: string | Buffer; // base64 or buffer\n  audio?: string | Buffer; // base64 or buffer\n  metadata?: Record<string, any>;\n}\n\ninterface AgentResponse {\n  id: string;\n  agentId: number;\n  agentName: string;\n  content: string;\n  usage?: {\n    prompt_tokens?: number;\n    completion_tokens?: number;\n    total_tokens?: number;\n  };\n  modalities?: string[];\n  processingTime?: number;\n  cost?: number;\n  metadata?: Record<string, any>;\n  state?: string;\n  error?: string;\n}\n\ninterface AgentCapabilities {\n  text: boolean;\n  image: boolean;\n  audio: boolean;\n  streaming: boolean;\n  functions: boolean;\n  memory: boolean;\n  multimodal_reasoning: boolean;\n}\n\nexport class MultimodalAgentService {\n  private openai: OpenAI;\n  private activeSessions: Map<string, MultimodalSession> = new Map();\n\n  constructor() {\n    this.openai = new OpenAI({\n      apiKey: process.env.OPENAI_API_KEY,\n    });\n  }\n\n  /**\n   * Create a multimodal session for an agent\n   */\n  async createSession(agentId: number, userId: string): Promise<MultimodalSession> {\n    const sessionId = nanoid();\n    \n    const session = await storage.createMultimodalSession({\n      agentId,\n      userId,\n      sessionId,\n      status: \"active\",\n      modalities: [],\n      totalInteractions: 0,\n      lastInteraction: new Date(),\n      metadata: {},\n    });\n\n    this.activeSessions.set(sessionId, session);\n\n    await auditLogger.log(\n      userId,\n      \"multimodal.session.create\",\n      \"session\",\n      sessionId,\n      null,\n      true,\n      null,\n      { agentId, sessionId }\n    );\n\n    return session;\n  }\n\n  /**\n   * Process text input with an agent\n   */\n  async processText(\n    agentId: number,\n    userId: string,\n    text: string,\n    sessionId?: string\n  ): Promise<AgentResponse> {\n    const startTime = Date.now();\n    \n    try {\n      const agent = await storage.getAgent(agentId);\n      if (!agent) {\n        throw new Error(`Agent ${agentId} not found`);\n      }\n\n      // Create session if not provided\n      let session: MultimodalSession;\n      if (sessionId) {\n        session = this.activeSessions.get(sessionId) || await storage.getMultimodalSession(sessionId);\n      } else {\n        session = await this.createSession(agentId, userId);\n      }\n\n      if (!session) {\n        throw new Error(\"Failed to create or retrieve session\");\n      }\n\n      // Prepare messages\n      const messages: OpenAI.Chat.ChatCompletionMessageParam[] = [];\n      \n      if (agent.systemPrompt) {\n        messages.push({\n          role: \"system\",\n          content: agent.systemPrompt\n        });\n      }\n\n      // Add conversation history from memory\n      if (agent.enableMemory && agent.conversationHistory) {\n        const history = Array.isArray(agent.conversationHistory) ? agent.conversationHistory : [];\n        messages.push(...history.slice(-10)); // Last 10 messages for context\n      }\n\n      messages.push({\n        role: \"user\",\n        content: text\n      });\n\n      // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n      const response = await this.openai.chat.completions.create({\n        model: agent.modelName || \"gpt-5\",\n        messages,\n        temperature: (agent.temperature || 70) / 100,\n        max_tokens: agent.maxTokens || 4096,\n      });\n\n      const completion = response.choices[0].message.content || \"\";\n      const processingTime = Date.now() - startTime;\n\n      // Update agent memory\n      if (agent.enableMemory) {\n        const newHistory = [\n          ...(Array.isArray(agent.conversationHistory) ? agent.conversationHistory : []),\n          { role: \"user\", content: text },\n          { role: \"assistant\", content: completion }\n        ].slice(-20); // Keep last 20 messages\n\n        await storage.updateAgent(agentId, {\n          conversationHistory: newHistory,\n          lastActivity: new Date(),\n        });\n      }\n\n      // Create interaction record\n      const interaction = await storage.createMultimodalInteraction({\n        sessionId: session.id,\n        agentId,\n        userId,\n        interactionType: \"chat\",\n        inputData: { text },\n        outputData: { content: completion },\n        modalities: [\"text\"],\n        processingTime,\n        tokenUsage: {\n          prompt_tokens: response.usage?.prompt_tokens || 0,\n          completion_tokens: response.usage?.completion_tokens || 0,\n          total_tokens: response.usage?.total_tokens || 0,\n        },\n        cost: this.calculateCost(response.usage?.total_tokens || 0, agent.modelName || \"gpt-5\"),\n        metadata: {},\n      });\n\n      // Update session\n      await storage.updateMultimodalSession(session.id, {\n        totalInteractions: session.totalInteractions + 1,\n        lastInteraction: new Date(),\n        modalities: [...new Set([...(session.modalities as string[] || []), \"text\"])],\n      });\n\n      await auditLogger.log(\n        userId,\n        \"multimodal.chat.process\",\n        \"interaction\",\n        interaction.id.toString(),\n        null,\n        true,\n        null,\n        { \n          agentId, \n          sessionId: session.sessionId, \n          processingTime,\n          tokenUsage: response.usage \n        }\n      );\n\n      return {\n        id: interaction.id.toString(),\n        agentId,\n        agentName: agent.name,\n        content: completion,\n        usage: {\n          prompt_tokens: response.usage?.prompt_tokens,\n          completion_tokens: response.usage?.completion_tokens,\n          total_tokens: response.usage?.total_tokens,\n        },\n        modalities: [\"text\"],\n        processingTime,\n        cost: this.calculateCost(response.usage?.total_tokens || 0, agent.modelName || \"gpt-5\"),\n        metadata: { sessionId: session.sessionId },\n        state: \"completed\",\n      };\n\n    } catch (error) {\n      const processingTime = Date.now() - startTime;\n      \n      await auditLogger.log(\n        userId,\n        \"multimodal.chat.error\",\n        \"interaction\",\n        agentId.toString(),\n        null,\n        false,\n        (error as Error).message,\n        { agentId, processingTime }\n      );\n\n      throw error;\n    }\n  }\n\n  /**\n   * Process image input with an agent\n   */\n  async processImage(\n    agentId: number,\n    userId: string,\n    image: Buffer,\n    prompt: string = \"What's in this image?\",\n    sessionId?: string\n  ): Promise<AgentResponse> {\n    const startTime = Date.now();\n    \n    try {\n      const agent = await storage.getAgent(agentId);\n      if (!agent) {\n        throw new Error(`Agent ${agentId} not found`);\n      }\n\n      if (!agent.enableVision) {\n        throw new Error(\"This agent does not have vision capabilities enabled\");\n      }\n\n      // Create session if not provided\n      let session: MultimodalSession;\n      if (sessionId) {\n        session = this.activeSessions.get(sessionId) || await storage.getMultimodalSession(sessionId);\n      } else {\n        session = await this.createSession(agentId, userId);\n      }\n\n      if (!session) {\n        throw new Error(\"Failed to create or retrieve session\");\n      }\n\n      // Convert image to base64\n      const imageBase64 = image.toString('base64');\n\n      // Prepare messages with image\n      const messages: OpenAI.Chat.ChatCompletionMessageParam[] = [];\n      \n      if (agent.systemPrompt) {\n        messages.push({\n          role: \"system\",\n          content: agent.systemPrompt\n        });\n      }\n\n      messages.push({\n        role: \"user\",\n        content: [\n          { type: \"text\", text: prompt },\n          {\n            type: \"image_url\",\n            image_url: {\n              url: `data:image/jpeg;base64,${imageBase64}`,\n              detail: agent.imageDetail || \"auto\"\n            }\n          }\n        ]\n      });\n\n      // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n      const response = await this.openai.chat.completions.create({\n        model: agent.modelName || \"gpt-5\",\n        messages,\n        temperature: (agent.temperature || 70) / 100,\n        max_tokens: agent.maxTokens || 4096,\n      });\n\n      const completion = response.choices[0].message.content || \"\";\n      const processingTime = Date.now() - startTime;\n\n      // Store file record\n      const file = await storage.createMultimodalFile({\n        userId,\n        agentId,\n        filename: `image_${nanoid()}.jpg`,\n        originalName: \"uploaded_image.jpg\",\n        fileType: \"image\",\n        mimeType: \"image/jpeg\",\n        fileSize: image.length,\n        filePath: `base64:${imageBase64.substring(0, 100)}...`, // Store truncated reference\n        processingStatus: \"completed\",\n        metadata: { \n          width: \"unknown\", \n          height: \"unknown\",\n          processedAt: new Date().toISOString()\n        },\n        securityScan: { status: \"passed\", scannedAt: new Date().toISOString() },\n      });\n\n      // Create interaction record\n      const interaction = await storage.createMultimodalInteraction({\n        sessionId: session.id,\n        agentId,\n        userId,\n        interactionType: \"image_analysis\",\n        inputData: { prompt, imageRef: file.id },\n        outputData: { content: completion },\n        modalities: [\"text\", \"image\"],\n        processingTime,\n        tokenUsage: {\n          prompt_tokens: response.usage?.prompt_tokens || 0,\n          completion_tokens: response.usage?.completion_tokens || 0,\n          total_tokens: response.usage?.total_tokens || 0,\n        },\n        cost: this.calculateCost(response.usage?.total_tokens || 0, agent.modelName || \"gpt-5\"),\n        metadata: { fileId: file.id },\n      });\n\n      // Update file with interaction reference\n      await storage.updateMultimodalFile(file.id, {\n        interactionId: interaction.id\n      });\n\n      // Update session\n      await storage.updateMultimodalSession(session.id, {\n        totalInteractions: session.totalInteractions + 1,\n        lastInteraction: new Date(),\n        modalities: [...new Set([...(session.modalities as string[] || []), \"text\", \"image\"])],\n      });\n\n      await auditLogger.log(\n        userId,\n        \"multimodal.image.process\",\n        \"interaction\",\n        interaction.id.toString(),\n        null,\n        true,\n        null,\n        { \n          agentId, \n          sessionId: session.sessionId, \n          processingTime,\n          fileId: file.id,\n          tokenUsage: response.usage \n        }\n      );\n\n      return {\n        id: interaction.id.toString(),\n        agentId,\n        agentName: agent.name,\n        content: completion,\n        usage: {\n          prompt_tokens: response.usage?.prompt_tokens,\n          completion_tokens: response.usage?.completion_tokens,\n          total_tokens: response.usage?.total_tokens,\n        },\n        modalities: [\"text\", \"image\"],\n        processingTime,\n        cost: this.calculateCost(response.usage?.total_tokens || 0, agent.modelName || \"gpt-5\"),\n        metadata: { \n          sessionId: session.sessionId,\n          fileId: file.id,\n          prompt\n        },\n        state: \"completed\",\n      };\n\n    } catch (error) {\n      const processingTime = Date.now() - startTime;\n      \n      await auditLogger.log(\n        userId,\n        \"multimodal.image.error\",\n        \"interaction\",\n        agentId.toString(),\n        null,\n        false,\n        (error as Error).message,\n        { agentId, processingTime }\n      );\n\n      throw error;\n    }\n  }\n\n  /**\n   * Process audio input with an agent (transcription)\n   */\n  async processAudio(\n    agentId: number,\n    userId: string,\n    audio: Buffer,\n    task: string = \"transcribe\",\n    sessionId?: string\n  ): Promise<AgentResponse> {\n    const startTime = Date.now();\n    \n    try {\n      const agent = await storage.getAgent(agentId);\n      if (!agent) {\n        throw new Error(`Agent ${agentId} not found`);\n      }\n\n      if (!agent.enableAudio) {\n        throw new Error(\"This agent does not have audio capabilities enabled\");\n      }\n\n      // Create session if not provided\n      let session: MultimodalSession;\n      if (sessionId) {\n        session = this.activeSessions.get(sessionId) || await storage.getMultimodalSession(sessionId);\n      } else {\n        session = await this.createSession(agentId, userId);\n      }\n\n      if (!session) {\n        throw new Error(\"Failed to create or retrieve session\");\n      }\n\n      // Use OpenAI Whisper for transcription\n      const formData = new FormData();\n      formData.append('file', new Blob([audio]), 'audio.wav');\n      formData.append('model', 'whisper-1');\n      formData.append('language', agent.audioLanguage || 'en');\n\n      const transcription = await this.openai.audio.transcriptions.create({\n        file: new File([audio], 'audio.wav', { type: 'audio/wav' }),\n        model: 'whisper-1',\n        language: agent.audioLanguage || 'en',\n      });\n\n      const transcribedText = transcription.text;\n      const processingTime = Date.now() - startTime;\n\n      // Store file record\n      const file = await storage.createMultimodalFile({\n        userId,\n        agentId,\n        filename: `audio_${nanoid()}.wav`,\n        originalName: \"uploaded_audio.wav\",\n        fileType: \"audio\",\n        mimeType: \"audio/wav\",\n        fileSize: audio.length,\n        filePath: \"temp_storage\", // In production, store in proper file storage\n        processingStatus: \"completed\",\n        extractedText: transcribedText,\n        metadata: { \n          duration: \"unknown\",\n          language: agent.audioLanguage || 'en',\n          processedAt: new Date().toISOString()\n        },\n        securityScan: { status: \"passed\", scannedAt: new Date().toISOString() },\n      });\n\n      // Create interaction record\n      const interaction = await storage.createMultimodalInteraction({\n        sessionId: session.id,\n        agentId,\n        userId,\n        interactionType: \"audio_transcription\",\n        inputData: { task, audioRef: file.id },\n        outputData: { transcription: transcribedText },\n        modalities: [\"audio\", \"text\"],\n        processingTime,\n        tokenUsage: {}, // Whisper doesn't use standard token counting\n        cost: this.calculateAudioCost(audio.length),\n        metadata: { fileId: file.id, task },\n      });\n\n      // Update file with interaction reference\n      await storage.updateMultimodalFile(file.id, {\n        interactionId: interaction.id\n      });\n\n      // Update session\n      await storage.updateMultimodalSession(session.id, {\n        totalInteractions: session.totalInteractions + 1,\n        lastInteraction: new Date(),\n        modalities: [...new Set([...(session.modalities as string[] || []), \"audio\", \"text\"])],\n      });\n\n      await auditLogger.log(\n        userId,\n        \"multimodal.audio.process\",\n        \"interaction\",\n        interaction.id.toString(),\n        null,\n        true,\n        null,\n        { \n          agentId, \n          sessionId: session.sessionId, \n          processingTime,\n          fileId: file.id,\n          transcriptionLength: transcribedText.length\n        }\n      );\n\n      return {\n        id: interaction.id.toString(),\n        agentId,\n        agentName: agent.name,\n        content: transcribedText,\n        modalities: [\"audio\", \"text\"],\n        processingTime,\n        cost: this.calculateAudioCost(audio.length),\n        metadata: { \n          sessionId: session.sessionId,\n          fileId: file.id,\n          task,\n          transcription: transcribedText\n        },\n        state: \"completed\",\n      };\n\n    } catch (error) {\n      const processingTime = Date.now() - startTime;\n      \n      await auditLogger.log(\n        userId,\n        \"multimodal.audio.error\",\n        \"interaction\",\n        agentId.toString(),\n        null,\n        false,\n        (error as Error).message,\n        { agentId, processingTime }\n      );\n\n      throw error;\n    }\n  }\n\n  /**\n   * Process multimodal input combining text, image, and audio\n   */\n  async processMultimodal(\n    agentId: number,\n    userId: string,\n    inputs: MultimodalInput,\n    sessionId?: string\n  ): Promise<AgentResponse> {\n    const startTime = Date.now();\n    \n    try {\n      const agent = await storage.getAgent(agentId);\n      if (!agent) {\n        throw new Error(`Agent ${agentId} not found`);\n      }\n\n      // Create session if not provided\n      let session: MultimodalSession;\n      if (sessionId) {\n        session = this.activeSessions.get(sessionId) || await storage.getMultimodalSession(sessionId);\n      } else {\n        session = await this.createSession(agentId, userId);\n      }\n\n      if (!session) {\n        throw new Error(\"Failed to create or retrieve session\");\n      }\n\n      let processedInputs: any = { text: inputs.text };\n      let usedModalities: string[] = [\"text\"];\n      let files: MultimodalFile[] = [];\n\n      // Process image if provided\n      if (inputs.image && agent.enableVision) {\n        const imageBuffer = Buffer.isBuffer(inputs.image) ? inputs.image : Buffer.from(inputs.image, 'base64');\n        processedInputs.imageBase64 = imageBuffer.toString('base64');\n        usedModalities.push(\"image\");\n\n        const imageFile = await storage.createMultimodalFile({\n          userId,\n          agentId,\n          filename: `multimodal_image_${nanoid()}.jpg`,\n          originalName: \"multimodal_image.jpg\",\n          fileType: \"image\",\n          mimeType: \"image/jpeg\",\n          fileSize: imageBuffer.length,\n          filePath: \"temp_storage\",\n          processingStatus: \"completed\",\n          metadata: { processedAt: new Date().toISOString() },\n          securityScan: { status: \"passed\", scannedAt: new Date().toISOString() },\n        });\n        files.push(imageFile);\n      }\n\n      // Process audio if provided\n      if (inputs.audio && agent.enableAudio) {\n        const audioBuffer = Buffer.isBuffer(inputs.audio) ? inputs.audio : Buffer.from(inputs.audio, 'base64');\n        \n        // Transcribe audio\n        const transcription = await this.openai.audio.transcriptions.create({\n          file: new File([audioBuffer], 'audio.wav', { type: 'audio/wav' }),\n          model: 'whisper-1',\n          language: agent.audioLanguage || 'en',\n        });\n\n        processedInputs.audioTranscription = transcription.text;\n        usedModalities.push(\"audio\");\n\n        const audioFile = await storage.createMultimodalFile({\n          userId,\n          agentId,\n          filename: `multimodal_audio_${nanoid()}.wav`,\n          originalName: \"multimodal_audio.wav\",\n          fileType: \"audio\",\n          mimeType: \"audio/wav\",\n          fileSize: audioBuffer.length,\n          filePath: \"temp_storage\",\n          processingStatus: \"completed\",\n          extractedText: transcription.text,\n          metadata: { processedAt: new Date().toISOString() },\n          securityScan: { status: \"passed\", scannedAt: new Date().toISOString() },\n        });\n        files.push(audioFile);\n      }\n\n      // Build comprehensive prompt\n      let prompt = inputs.text || \"Please analyze the provided inputs.\";\n      if (processedInputs.audioTranscription) {\n        prompt += `\\n\\nAudio transcription: \"${processedInputs.audioTranscription}\"`;\n      }\n\n      // Prepare messages\n      const messages: OpenAI.Chat.ChatCompletionMessageParam[] = [];\n      \n      if (agent.systemPrompt) {\n        messages.push({\n          role: \"system\",\n          content: agent.systemPrompt + (agent.multimodalReasoning ? \"\\n\\nYou are capable of multimodal reasoning. Analyze all provided inputs comprehensively.\" : \"\")\n        });\n      }\n\n      const messageContent: any[] = [{ type: \"text\", text: prompt }];\n\n      if (processedInputs.imageBase64) {\n        messageContent.push({\n          type: \"image_url\",\n          image_url: {\n            url: `data:image/jpeg;base64,${processedInputs.imageBase64}`,\n            detail: agent.imageDetail || \"auto\"\n          }\n        });\n      }\n\n      messages.push({\n        role: \"user\",\n        content: messageContent\n      });\n\n      // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n      const response = await this.openai.chat.completions.create({\n        model: agent.modelName || \"gpt-5\",\n        messages,\n        temperature: (agent.temperature || 70) / 100,\n        max_tokens: agent.maxTokens || 4096,\n      });\n\n      const completion = response.choices[0].message.content || \"\";\n      const processingTime = Date.now() - startTime;\n\n      // Create interaction record\n      const interaction = await storage.createMultimodalInteraction({\n        sessionId: session.id,\n        agentId,\n        userId,\n        interactionType: \"multimodal\",\n        inputData: { \n          text: inputs.text,\n          hasImage: !!inputs.image,\n          hasAudio: !!inputs.audio,\n          audioTranscription: processedInputs.audioTranscription,\n          fileIds: files.map(f => f.id)\n        },\n        outputData: { content: completion },\n        modalities: usedModalities,\n        processingTime,\n        tokenUsage: {\n          prompt_tokens: response.usage?.prompt_tokens || 0,\n          completion_tokens: response.usage?.completion_tokens || 0,\n          total_tokens: response.usage?.total_tokens || 0,\n        },\n        cost: this.calculateCost(response.usage?.total_tokens || 0, agent.modelName || \"gpt-5\"),\n        metadata: { fileIds: files.map(f => f.id) },\n      });\n\n      // Update files with interaction reference\n      for (const file of files) {\n        await storage.updateMultimodalFile(file.id, {\n          interactionId: interaction.id\n        });\n      }\n\n      // Update session\n      await storage.updateMultimodalSession(session.id, {\n        totalInteractions: session.totalInteractions + 1,\n        lastInteraction: new Date(),\n        modalities: [...new Set([...(session.modalities as string[] || []), ...usedModalities])],\n      });\n\n      await auditLogger.log(\n        userId,\n        \"multimodal.process\",\n        \"interaction\",\n        interaction.id.toString(),\n        null,\n        true,\n        null,\n        { \n          agentId, \n          sessionId: session.sessionId, \n          processingTime,\n          modalities: usedModalities,\n          fileCount: files.length,\n          tokenUsage: response.usage \n        }\n      );\n\n      return {\n        id: interaction.id.toString(),\n        agentId,\n        agentName: agent.name,\n        content: completion,\n        usage: {\n          prompt_tokens: response.usage?.prompt_tokens,\n          completion_tokens: response.usage?.completion_tokens,\n          total_tokens: response.usage?.total_tokens,\n        },\n        modalities: usedModalities,\n        processingTime,\n        cost: this.calculateCost(response.usage?.total_tokens || 0, agent.modelName || \"gpt-5\"),\n        metadata: { \n          sessionId: session.sessionId,\n          fileIds: files.map(f => f.id),\n          audioTranscription: processedInputs.audioTranscription\n        },\n        state: \"completed\",\n      };\n\n    } catch (error) {\n      const processingTime = Date.now() - startTime;\n      \n      await auditLogger.log(\n        userId,\n        \"multimodal.error\",\n        \"interaction\",\n        agentId.toString(),\n        null,\n        false,\n        (error as Error).message,\n        { agentId, processingTime }\n      );\n\n      throw error;\n    }\n  }\n\n  /**\n   * Get agent capabilities\n   */\n  async getAgentCapabilities(agentId: number): Promise<AgentCapabilities> {\n    const agent = await storage.getAgent(agentId);\n    if (!agent) {\n      throw new Error(`Agent ${agentId} not found`);\n    }\n\n    return {\n      text: true,\n      image: agent.enableVision || false,\n      audio: agent.enableAudio || false,\n      streaming: true, // OpenAI supports streaming\n      functions: agent.enableFunctions || false,\n      memory: agent.enableMemory || false,\n      multimodal_reasoning: agent.multimodalReasoning || false,\n    };\n  }\n\n  /**\n   * Clear agent memory\n   */\n  async clearAgentMemory(agentId: number, userId: string): Promise<void> {\n    await storage.updateAgent(agentId, {\n      conversationHistory: [],\n      lastActivity: new Date(),\n    });\n\n    await auditLogger.log(\n      userId,\n      \"multimodal.memory.clear\",\n      \"agent\",\n      agentId.toString(),\n      null,\n      true,\n      null,\n      { agentId }\n    );\n  }\n\n  /**\n   * Get session history\n   */\n  async getSessionHistory(sessionId: string): Promise<MultimodalInteraction[]> {\n    return await storage.getMultimodalInteractionsBySession(sessionId);\n  }\n\n  /**\n   * Calculate cost based on token usage and model\n   */\n  private calculateCost(tokens: number, model: string): number {\n    // Cost in micro-cents (1/1000000 of a dollar)\n    const costPerToken: Record<string, number> = {\n      'gpt-5': 300, // $0.003 per 1K tokens\n      'gpt-4': 300,\n      'gpt-4-turbo': 100,\n      'gpt-3.5-turbo': 50,\n    };\n\n    const rate = costPerToken[model] || costPerToken['gpt-4'];\n    return Math.round((tokens / 1000) * rate);\n  }\n\n  /**\n   * Calculate audio processing cost\n   */\n  private calculateAudioCost(audioSizeBytes: number): number {\n    // Whisper pricing: $0.006 per minute\n    // Estimate: 1MB ≈ 1 minute of audio\n    const estimatedMinutes = audioSizeBytes / (1024 * 1024);\n    return Math.round(estimatedMinutes * 600); // $0.006 in micro-cents\n  }\n}\n\nexport const multimodalAgent = new MultimodalAgentService();",
      "size_bytes": 25781
    },
    "server/services/nationalReserve.ts": {
      "content": "import { storage } from \"../storage\";\nimport { agentFactory } from \"./agentFactory\";\nimport { openaiService } from \"./openai\";\nimport { auditLogger } from \"./auditLogger\";\nimport { foundationModel } from \"./foundationModel\";\nimport { Agent, InsertAgent } from \"@shared/schema\";\n\ninterface MilitaryRank {\n  name: string;\n  commandLevel: number;\n  specializations: string[];\n  reportingStructure: string[];\n}\n\ninterface CommunicationPattern {\n  type: string;\n  pattern: string;\n  confidence: number;\n  context: string;\n  translation: string;\n}\n\ninterface PatternAnalysis {\n  leetSpeak: boolean;\n  subliminalIndicators: string[];\n  communicationStyle: string;\n  emotionalTone: string;\n  hiddenMeaning?: string;\n}\n\nclass NationalReserveService {\n  private militaryHierarchy: Record<string, MilitaryRank> = {\n    \"five_star_general\": {\n      name: \"Five Star General\",\n      commandLevel: 10,\n      specializations: [\"strategic_oversight\", \"cross_domain_intelligence\", \"system_optimization\"],\n      reportingStructure: []\n    },\n    \"general\": {\n      name: \"General\",\n      commandLevel: 9,\n      specializations: [\"multi_domain_oversight\", \"pattern_synthesis\", \"command_coordination\"],\n      reportingStructure: [\"five_star_general\"]\n    },\n    \"colonel\": {\n      name: \"Colonel\",\n      commandLevel: 8,\n      specializations: [\"operational_command\", \"domain_expertise\", \"tactical_coordination\"],\n      reportingStructure: [\"general\"]\n    },\n    \"major\": {\n      name: \"Major\",\n      commandLevel: 7,\n      specializations: [\"tactical_leadership\", \"pattern_recognition\", \"team_coordination\"],\n      reportingStructure: [\"colonel\"]\n    },\n    \"captain\": {\n      name: \"Captain\",\n      commandLevel: 6,\n      specializations: [\"unit_command\", \"communication_analysis\", \"specialized_skills\"],\n      reportingStructure: [\"major\"]\n    },\n    \"lieutenant\": {\n      name: \"Lieutenant\",\n      commandLevel: 5,\n      specializations: [\"junior_leadership\", \"real_time_monitoring\", \"focused_expertise\"],\n      reportingStructure: [\"captain\"]\n    },\n    \"sergeant\": {\n      name: \"Sergeant\",\n      commandLevel: 4,\n      specializations: [\"squad_leadership\", \"pattern_detection\", \"operational_execution\"],\n      reportingStructure: [\"lieutenant\"]\n    },\n    \"corporal\": {\n      name: \"Corporal\",\n      commandLevel: 3,\n      specializations: [\"team_coordination\", \"communication_monitoring\", \"task_execution\"],\n      reportingStructure: [\"sergeant\"]\n    },\n    \"private_first_class\": {\n      name: \"Private First Class\",\n      commandLevel: 2,\n      specializations: [\"specialized_execution\", \"communication_analysis\", \"reporting\"],\n      reportingStructure: [\"corporal\"]\n    },\n    \"private\": {\n      name: \"Private\",\n      commandLevel: 1,\n      specializations: [\"basic_execution\", \"pattern_recognition\", \"surveillance\"],\n      reportingStructure: [\"private_first_class\"]\n    }\n  };\n\n  async deployNationalReserve(userId: string): Promise<Agent[]> {\n    const deployedAgents: Agent[] = [];\n\n    // Deploy command structure\n    for (const [rankKey, rankData] of Object.entries(this.militaryHierarchy)) {\n      const agentTypes = await storage.getAgentTypes();\n      const agentType = agentTypes.find(type => \n        type.name.toLowerCase().replace(/\\s+/g, '_') === rankKey\n      );\n\n      if (agentType) {\n        const agent = await this.createMilitaryAgent(userId, agentType.id, rankData);\n        deployedAgents.push(agent);\n      }\n    }\n\n    // Deploy specialized intelligence units\n    await this.deployIntelligenceUnits(userId, deployedAgents);\n\n    // Initialize cross-collaboration network\n    await this.initializeCollaborationNetwork(deployedAgents);\n\n    // Activate pattern recognition systems\n    await this.activatePatternRecognition(deployedAgents);\n\n    await auditLogger.log(\n      userId,\n      \"national_reserve.deploy\",\n      \"agent_system\",\n      null,\n      { deployedCount: deployedAgents.length }\n    );\n\n    return deployedAgents;\n  }\n\n  private async createMilitaryAgent(\n    userId: string,\n    typeId: number,\n    rankData: MilitaryRank\n  ): Promise<Agent> {\n    const agentData: InsertAgent = {\n      name: `${rankData.name} Alpha-${Math.random().toString(36).substr(2, 6).toUpperCase()}`,\n      description: `Military-grade agent with ${rankData.name} authority and specialized capabilities`,\n      typeId,\n      userId,\n      status: \"active\",\n      priority: rankData.commandLevel >= 8 ? \"high\" : rankData.commandLevel >= 5 ? \"medium\" : \"low\",\n      rank: rankData.name.toLowerCase().replace(/\\s+/g, '_'),\n      commandLevel: rankData.commandLevel,\n      specialization: rankData.specializations,\n      patternRecognition: {\n        leetSpeakDetection: true,\n        subliminalAnalysis: true,\n        behavioralPatterns: [],\n        confidenceThreshold: 0.85\n      },\n      communicationAnalysis: {\n        realTimeMonitoring: true,\n        patternTranslation: true,\n        contextualAnalysis: true,\n        emotionalIntelligence: true\n      },\n      selfOptimization: {\n        learningRate: 0.1,\n        adaptationSpeed: \"real_time\",\n        performanceMetrics: {},\n        optimizationTargets: [\"accuracy\", \"speed\", \"collaboration\"]\n      },\n      osiLayerSecurity: {\n        layer1_physical: { encryption: \"quantum_resistant\", monitoring: true },\n        layer2_dataLink: { frameValidation: true, errorCorrection: true },\n        layer3_network: { packetInspection: true, routingProtection: true },\n        layer4_transport: { connectionSecurity: true, flowControl: true },\n        layer5_session: { sessionManagement: true, authenticationStrong: true },\n        layer6_presentation: { dataEncryption: \"AES-256\", compressionSecure: true },\n        layer7_application: { inputValidation: true, applicationFirewall: true }\n      },\n      configuration: {\n        autonomyLevel: rankData.commandLevel,\n        decisionMaking: rankData.commandLevel >= 7 ? \"autonomous\" : \"guided\",\n        reportingFrequency: \"real_time\",\n        collaborationEnabled: true\n      }\n    };\n\n    return await storage.createAgent(agentData);\n  }\n\n  private async deployIntelligenceUnits(userId: string, commandAgents: Agent[]): Promise<void> {\n    const specializedTypes = [\"Intelligence Analyst\", \"Communication Specialist\", \"Pattern Recognition Expert\"];\n    \n    for (const typeName of specializedTypes) {\n      const agentTypes = await storage.getAgentTypes();\n      const agentType = agentTypes.find(type => type.name === typeName);\n      \n      if (agentType) {\n        // Deploy multiple units for redundancy\n        for (let i = 0; i < 3; i++) {\n          await this.createSpecializedIntelligenceAgent(userId, agentType.id, typeName, i + 1);\n        }\n      }\n    }\n  }\n\n  private async createSpecializedIntelligenceAgent(\n    userId: string,\n    typeId: number,\n    specialization: string,\n    unitNumber: number\n  ): Promise<Agent> {\n    const agentData: InsertAgent = {\n      name: `${specialization} Unit-${unitNumber}`,\n      description: `Specialized intelligence agent for ${specialization.toLowerCase()} operations`,\n      typeId,\n      userId,\n      status: \"active\",\n      priority: \"high\",\n      rank: \"specialist\",\n      commandLevel: 6,\n      specialization: [specialization.toLowerCase().replace(/\\s+/g, '_')],\n      patternRecognition: {\n        leetSpeakDetection: true,\n        subliminalAnalysis: true,\n        advancedPatterns: true,\n        recursiveAnalysis: true,\n        crossReferencing: true\n      },\n      communicationAnalysis: {\n        realTimeMonitoring: true,\n        conversationAnalysis: true,\n        leetSpeakTranslation: true,\n        subliminalDetection: true,\n        contextualInference: true\n      },\n      configuration: {\n        monitoringScope: \"comprehensive\",\n        analysisDepth: \"deep\",\n        reportingProtocol: \"immediate\",\n        alertThresholds: {\n          leetSpeak: 0.3,\n          subliminalCommunication: 0.2,\n          patternDeviation: 0.15\n        }\n      }\n    };\n\n    return await storage.createAgent(agentData);\n  }\n\n  private async initializeCollaborationNetwork(agents: Agent[]): Promise<void> {\n    for (const agent of agents) {\n      const collaborationNetwork = agents\n        .filter(a => a.id !== agent.id)\n        .map(a => ({\n          agentId: a.id,\n          rank: a.rank,\n          commandLevel: a.commandLevel,\n          specializations: a.specialization\n        }));\n\n      await storage.updateAgent(agent.id, {\n        collaborationNetwork\n      });\n    }\n  }\n\n  private async activatePatternRecognition(agents: Agent[]): Promise<void> {\n    for (const agent of agents) {\n      // Initialize pattern recognition with baseline patterns\n      const patternRecognition = {\n        ...agent.patternRecognition as any,\n        activatedAt: new Date().toISOString(),\n        baselinePatterns: await this.getBaselinePatterns(),\n        learningEnabled: true,\n        adaptiveThresholds: true\n      };\n\n      await storage.updateAgent(agent.id, {\n        patternRecognition\n      });\n    }\n  }\n\n  async analyzeConversation(\n    userId: string,\n    conversationText: string,\n    context?: string\n  ): Promise<PatternAnalysis> {\n    const agents = await storage.getAgents(userId);\n    const activeAnalysts = agents.filter(a => \n      a.status === \"active\" && \n      Array.isArray(a.specialization) && \n      (a.specialization as string[]).includes(\"communication_analysis\")\n    );\n\n    if (activeAnalysts.length === 0) {\n      throw new Error(\"No active communication analysis agents available\");\n    }\n\n    // Use OpenAI for advanced pattern analysis\n    const analysis = await openaiService.analyzeContent({\n      text: conversationText,\n      analysisType: \"safety\"\n    });\n\n    const leetPatterns = this.detectLeetSpeak(conversationText);\n    const subliminalIndicators = await this.detectSubliminalCommunication(conversationText);\n\n    const patternAnalysis: PatternAnalysis = {\n      leetSpeak: leetPatterns.detected,\n      subliminalIndicators,\n      communicationStyle: this.analyzeCommunicationStyle(conversationText),\n      emotionalTone: analysis.result.sentiment || \"neutral\"\n    };\n\n    // Log analysis for learning\n    await auditLogger.log(\n      userId,\n      \"conversation.analyze\",\n      \"communication\",\n      null,\n      {\n        context,\n        analysisResults: patternAnalysis,\n        agentCount: activeAnalysts.length\n      }\n    );\n\n    return patternAnalysis;\n  }\n\n  private detectLeetSpeak(text: string): { detected: boolean; patterns: CommunicationPattern[] } {\n    const leetPatterns = [\n      { pattern: /[4@]/g, replacement: 'a', type: 'character_substitution' },\n      { pattern: /3/g, replacement: 'e', type: 'character_substitution' },\n      { pattern: /1/g, replacement: 'i', type: 'character_substitution' },\n      { pattern: /0/g, replacement: 'o', type: 'character_substitution' },\n      { pattern: /5/g, replacement: 's', type: 'character_substitution' },\n      { pattern: /7/g, replacement: 't', type: 'character_substitution' },\n      { pattern: /\\|\\|/g, replacement: 'n', type: 'character_substitution' },\n      { pattern: /\\|<\\|/g, replacement: 'k', type: 'character_substitution' }\n    ];\n\n    const detectedPatterns: CommunicationPattern[] = [];\n    let hasLeetSpeak = false;\n\n    for (const leetPattern of leetPatterns) {\n      const matches = text.match(leetPattern.pattern);\n      if (matches && matches.length > 0) {\n        hasLeetSpeak = true;\n        detectedPatterns.push({\n          type: 'leet_speak',\n          pattern: leetPattern.pattern.toString(),\n          confidence: matches.length / text.length,\n          context: `Found ${matches.length} instances of ${leetPattern.type}`,\n          translation: text.replace(leetPattern.pattern, leetPattern.replacement)\n        });\n      }\n    }\n\n    return { detected: hasLeetSpeak, patterns: detectedPatterns };\n  }\n\n  private async detectSubliminalCommunication(text: string): Promise<string[]> {\n    const indicators: string[] = [];\n\n    // Check for unusual capitalization patterns\n    const capitalPattern = /[A-Z][a-z]*[A-Z][a-z]*/g;\n    if (text.match(capitalPattern)) {\n      indicators.push(\"unusual_capitalization_pattern\");\n    }\n\n    // Check for hidden acronyms\n    const words = text.split(/\\s+/);\n    const firstLetters = words.map(word => word[0]).join('');\n    if (firstLetters.length > 3 && /^[A-Z]+$/.test(firstLetters)) {\n      indicators.push(`potential_acronym: ${firstLetters}`);\n    }\n\n    // Check for number sequences\n    const numberSequences = text.match(/\\d{3,}/g);\n    if (numberSequences) {\n      indicators.push(\"number_sequences_detected\");\n    }\n\n    // Check for repeated patterns\n    const repeatedPatterns = text.match(/(.{2,})\\1+/g);\n    if (repeatedPatterns) {\n      indicators.push(\"repeated_patterns_detected\");\n    }\n\n    return indicators;\n  }\n\n  private analyzeCommunicationStyle(text: string): string {\n    const wordCount = text.split(/\\s+/).length;\n    const avgWordLength = text.replace(/\\s+/g, '').length / wordCount;\n    const questionMarks = (text.match(/\\?/g) || []).length;\n    const exclamationMarks = (text.match(/!/g) || []).length;\n\n    if (avgWordLength > 6 && questionMarks === 0) return \"formal\";\n    if (exclamationMarks > 2) return \"enthusiastic\";\n    if (questionMarks > wordCount * 0.1) return \"inquisitive\";\n    if (avgWordLength < 4) return \"casual\";\n    \n    return \"neutral\";\n  }\n\n  private async getBaselinePatterns(): Promise<any> {\n    return {\n      commonWords: [\"the\", \"and\", \"or\", \"but\", \"in\", \"on\", \"at\", \"to\", \"for\"],\n      typicalSentenceLength: { min: 5, max: 20, average: 12 },\n      punctuationPatterns: { periods: 0.6, commas: 0.3, questions: 0.05, exclamations: 0.05 },\n      capitalizedWords: { frequency: 0.15, position: \"sentence_start\" }\n    };\n  }\n\n  async getReserveStatus(userId: string): Promise<{\n    totalAgents: number;\n    activeAgents: number;\n    commandStructure: any;\n    patternRecognitionStatus: any;\n    lastActivity: string;\n  }> {\n    const agents = await storage.getAgents(userId);\n    const reserveAgents = agents.filter(a => a.rank && a.commandLevel);\n\n    const commandStructure = {};\n    for (const agent of reserveAgents) {\n      const rank = agent.rank || \"unknown\";\n      if (!commandStructure[rank]) {\n        commandStructure[rank] = { count: 0, active: 0 };\n      }\n      commandStructure[rank].count++;\n      if (agent.status === \"active\") {\n        commandStructure[rank].active++;\n      }\n    }\n\n    return {\n      totalAgents: reserveAgents.length,\n      activeAgents: reserveAgents.filter(a => a.status === \"active\").length,\n      commandStructure,\n      patternRecognitionStatus: {\n        enabled: true,\n        activeMonitoring: reserveAgents.filter(a => \n          a.communicationAnalysis && \n          (a.communicationAnalysis as any).realTimeMonitoring\n        ).length\n      },\n      lastActivity: new Date().toISOString()\n    };\n  }\n}\n\nexport const nationalReserve = new NationalReserveService();",
      "size_bytes": 14909
    },
    "server/services/openai.ts": {
      "content": "import OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_KEY || \"default_key\",\n});\n\nexport interface ContentGenerationRequest {\n  type: \"social_media\" | \"email\" | \"blog\" | \"marketing\";\n  platform?: string;\n  topic: string;\n  tone: \"professional\" | \"casual\" | \"friendly\" | \"formal\";\n  length: \"short\" | \"medium\" | \"long\";\n  targetAudience?: string;\n  keywords?: string[];\n}\n\nexport interface ContentGenerationResponse {\n  content: string;\n  suggestions: string[];\n  safetyScore: number;\n  metadata: {\n    wordCount: number;\n    readabilityScore: number;\n    sentiment: string;\n  };\n}\n\nexport interface AnalysisRequest {\n  text: string;\n  analysisType: \"sentiment\" | \"keywords\" | \"summary\" | \"safety\";\n}\n\nexport interface AnalysisResponse {\n  result: any;\n  confidence: number;\n  metadata: Record<string, any>;\n}\n\nclass OpenAIService {\n  private isAvailable(): boolean {\n    return !!process.env.OPENAI_API_KEY || !!process.env.OPENAI_KEY;\n  }\n\n  async generateContent(request: ContentGenerationRequest): Promise<ContentGenerationResponse> {\n    if (!this.isAvailable()) {\n      throw new Error(\"OpenAI API key not configured\");\n    }\n\n    try {\n      const prompt = this.buildContentPrompt(request);\n      \n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\", // the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a professional content creator with expertise in neurodivergence-friendly communication. Generate content that is clear, structured, and accessible. Always respond in JSON format with the requested fields.\",\n          },\n          {\n            role: \"user\",\n            content: prompt,\n          },\n        ],\n        response_format: { type: \"json_object\" },\n        temperature: 0.7,\n        max_tokens: 1500,\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || \"{}\");\n      \n      return {\n        content: result.content || \"\",\n        suggestions: result.suggestions || [],\n        safetyScore: result.safetyScore || 0.95,\n        metadata: {\n          wordCount: result.wordCount || 0,\n          readabilityScore: result.readabilityScore || 0,\n          sentiment: result.sentiment || \"neutral\",\n        },\n      };\n    } catch (error) {\n      console.error(\"Error generating content:\", error);\n      throw new Error(\"Failed to generate content\");\n    }\n  }\n\n  async analyzeContent(request: AnalysisRequest): Promise<AnalysisResponse> {\n    if (!this.isAvailable()) {\n      throw new Error(\"OpenAI API key not configured\");\n    }\n\n    try {\n      const prompt = this.buildAnalysisPrompt(request);\n      \n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\", // the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are an expert content analyst. Provide detailed analysis in JSON format with confidence scores and metadata.\",\n          },\n          {\n            role: \"user\",\n            content: prompt,\n          },\n        ],\n        response_format: { type: \"json_object\" },\n        temperature: 0.3,\n        max_tokens: 1000,\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || \"{}\");\n      \n      return {\n        result: result.analysis || {},\n        confidence: result.confidence || 0,\n        metadata: result.metadata || {},\n      };\n    } catch (error) {\n      console.error(\"Error analyzing content:\", error);\n      throw new Error(\"Failed to analyze content\");\n    }\n  }\n\n  async checkContentSafety(text: string): Promise<{\n    safe: boolean;\n    score: number;\n    issues: string[];\n  }> {\n    if (!this.isAvailable()) {\n      return { safe: true, score: 0.95, issues: [] };\n    }\n\n    try {\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\", // the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a content safety moderator. Analyze the provided text for potential safety issues including harmful content, misinformation, or inappropriate material. Respond in JSON format.\",\n          },\n          {\n            role: \"user\",\n            content: `Analyze this text for safety issues: \"${text}\"`,\n          },\n        ],\n        response_format: { type: \"json_object\" },\n        temperature: 0.1,\n        max_tokens: 500,\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || \"{}\");\n      \n      return {\n        safe: result.safe !== false,\n        score: result.score || 0.95,\n        issues: result.issues || [],\n      };\n    } catch (error) {\n      console.error(\"Error checking content safety:\", error);\n      // Default to safe on error\n      return { safe: true, score: 0.95, issues: [] };\n    }\n  }\n\n  private buildContentPrompt(request: ContentGenerationRequest): string {\n    const { type, platform, topic, tone, length, targetAudience, keywords } = request;\n    \n    return `Generate ${type} content with the following specifications:\n    - Topic: ${topic}\n    - Tone: ${tone}\n    - Length: ${length}\n    ${platform ? `- Platform: ${platform}` : \"\"}\n    ${targetAudience ? `- Target Audience: ${targetAudience}` : \"\"}\n    ${keywords ? `- Keywords to include: ${keywords.join(\", \")}` : \"\"}\n    \n    Please ensure the content is:\n    1. Neurodivergence-friendly (clear structure, simple language)\n    2. Engaging and appropriate for the target audience\n    3. Optimized for the specified platform\n    4. Safe and professional\n    \n    Respond in JSON format with:\n    {\n      \"content\": \"the generated content\",\n      \"suggestions\": [\"improvement suggestion 1\", \"improvement suggestion 2\"],\n      \"safetyScore\": 0.95,\n      \"wordCount\": 150,\n      \"readabilityScore\": 0.8,\n      \"sentiment\": \"positive\"\n    }`;\n  }\n\n  private buildAnalysisPrompt(request: AnalysisRequest): string {\n    const { text, analysisType } = request;\n    \n    switch (analysisType) {\n      case \"sentiment\":\n        return `Analyze the sentiment of this text: \"${text}\"\n        \n        Respond in JSON format with:\n        {\n          \"analysis\": {\n            \"sentiment\": \"positive/negative/neutral\",\n            \"score\": 0.8,\n            \"emotions\": [\"happy\", \"excited\"]\n          },\n          \"confidence\": 0.95,\n          \"metadata\": {\n            \"wordCount\": 50,\n            \"keyPhrases\": [\"phrase1\", \"phrase2\"]\n          }\n        }`;\n        \n      case \"keywords\":\n        return `Extract keywords and key phrases from this text: \"${text}\"\n        \n        Respond in JSON format with:\n        {\n          \"analysis\": {\n            \"keywords\": [\"keyword1\", \"keyword2\"],\n            \"keyPhrases\": [\"phrase1\", \"phrase2\"],\n            \"topics\": [\"topic1\", \"topic2\"]\n          },\n          \"confidence\": 0.9,\n          \"metadata\": {\n            \"wordCount\": 50,\n            \"density\": 0.1\n          }\n        }`;\n        \n      case \"summary\":\n        return `Provide a concise summary of this text: \"${text}\"\n        \n        Respond in JSON format with:\n        {\n          \"analysis\": {\n            \"summary\": \"brief summary\",\n            \"keyPoints\": [\"point1\", \"point2\"],\n            \"mainTopic\": \"main topic\"\n          },\n          \"confidence\": 0.9,\n          \"metadata\": {\n            \"originalLength\": 200,\n            \"summaryLength\": 50,\n            \"compressionRatio\": 0.25\n          }\n        }`;\n        \n      case \"safety\":\n        return `Analyze this text for safety and appropriateness: \"${text}\"\n        \n        Respond in JSON format with:\n        {\n          \"analysis\": {\n            \"safe\": true,\n            \"riskLevel\": \"low\",\n            \"issues\": [],\n            \"recommendations\": []\n          },\n          \"confidence\": 0.95,\n          \"metadata\": {\n            \"categories\": [\"business\", \"professional\"],\n            \"flags\": []\n          }\n        }`;\n        \n      default:\n        return `Analyze this text: \"${text}\"`;\n    }\n  }\n}\n\nexport const openaiService = new OpenAIService();\n",
      "size_bytes": 8343
    },
    "server/services/taskQueue.ts": {
      "content": "import { Task, InsertTask } from \"@shared/schema\";\nimport { storage } from \"../storage\";\nimport { agentFactory } from \"./agentFactory\";\nimport { auditLogger } from \"./auditLogger\";\nimport cron from \"node-cron\";\n\ninterface QueuedTask extends Task {\n  retryCount: number;\n  maxRetries: number;\n}\n\nclass TaskQueue {\n  private queue: QueuedTask[] = [];\n  private processing: boolean = false;\n  private maxConcurrentTasks: number = 5;\n  private currentlyProcessing: Set<number> = new Set();\n\n  constructor() {\n    this.startProcessing();\n    this.scheduleCleanup();\n  }\n\n  async enqueue(task: Task, priority: \"low\" | \"medium\" | \"high\" = \"medium\"): Promise<void> {\n    const queuedTask: QueuedTask = {\n      ...task,\n      priority,\n      retryCount: 0,\n      maxRetries: 3,\n    };\n\n    // Update task status to pending\n    await storage.updateTask(task.id, {\n      status: \"pending\",\n      updatedAt: new Date(),\n    });\n\n    // Add to queue based on priority\n    if (priority === \"high\") {\n      this.queue.unshift(queuedTask);\n    } else {\n      this.queue.push(queuedTask);\n    }\n\n    await storage.createActivity({\n      userId: task.userId!,\n      taskId: task.id,\n      type: \"task.queued\",\n      message: `Task \"${task.title}\" has been added to the queue`,\n      metadata: { priority, queueLength: this.queue.length },\n    });\n\n    // Trigger immediate processing if not already processing\n    if (!this.processing) {\n      this.processQueue();\n    }\n  }\n\n  private async startProcessing(): Promise<void> {\n    // Process queue every 5 seconds\n    setInterval(() => {\n      if (!this.processing && this.queue.length > 0) {\n        this.processQueue();\n      }\n    }, 5000);\n  }\n\n  private async processQueue(): Promise<void> {\n    if (this.processing || this.queue.length === 0) {\n      return;\n    }\n\n    this.processing = true;\n\n    try {\n      while (this.queue.length > 0 && this.currentlyProcessing.size < this.maxConcurrentTasks) {\n        const task = this.queue.shift();\n        if (task && !this.currentlyProcessing.has(task.id)) {\n          this.processTask(task);\n        }\n      }\n    } finally {\n      this.processing = false;\n    }\n  }\n\n  private async processTask(task: QueuedTask): Promise<void> {\n    this.currentlyProcessing.add(task.id);\n\n    try {\n      await storage.updateTask(task.id, {\n        status: \"processing\",\n        startedAt: new Date(),\n        updatedAt: new Date(),\n      });\n\n      await auditLogger.log(\n        task.userId!,\n        \"task.process.start\",\n        \"task\",\n        task.id.toString(),\n        null,\n        true,\n        null,\n        { taskType: task.type, agentId: task.agentId }\n      );\n\n      let result: any;\n\n      // Check if task is scheduled for future execution\n      if (task.scheduledFor && new Date(task.scheduledFor) > new Date()) {\n        // Re-queue for later\n        await storage.updateTask(task.id, {\n          status: \"pending\",\n          updatedAt: new Date(),\n        });\n        \n        // Add back to queue with delay\n        setTimeout(() => {\n          this.queue.push(task);\n        }, new Date(task.scheduledFor).getTime() - Date.now());\n\n        return;\n      }\n\n      // Execute the task based on its type\n      if (task.agentId) {\n        result = await agentFactory.executeAgentTask(\n          task.agentId,\n          task.type,\n          task.payload\n        );\n      } else {\n        result = await this.executeSystemTask(task);\n      }\n\n      // Update task as completed\n      await storage.updateTask(task.id, {\n        status: \"completed\",\n        result,\n        completedAt: new Date(),\n        updatedAt: new Date(),\n      });\n\n      await storage.createActivity({\n        userId: task.userId!,\n        taskId: task.id,\n        agentId: task.agentId,\n        type: \"task.completed\",\n        message: `Task \"${task.title}\" completed successfully`,\n        metadata: { result, processingTime: Date.now() - new Date(task.startedAt!).getTime() },\n      });\n\n      await auditLogger.log(\n        task.userId!,\n        \"task.process.complete\",\n        \"task\",\n        task.id.toString(),\n        null,\n        true,\n        null,\n        { result, processingTime: Date.now() - new Date(task.startedAt!).getTime() }\n      );\n\n    } catch (error) {\n      console.error(`Error processing task ${task.id}:`, error);\n\n      // Handle retry logic\n      if (task.retryCount < task.maxRetries) {\n        task.retryCount++;\n        \n        await storage.updateTask(task.id, {\n          status: \"pending\",\n          error: (error as Error).message,\n        });\n\n        // Re-queue with exponential backoff\n        const retryDelay = Math.pow(2, task.retryCount) * 1000; // 2s, 4s, 8s\n        setTimeout(() => {\n          this.queue.push(task);\n        }, retryDelay);\n\n        await storage.createActivity({\n          userId: task.userId!,\n          taskId: task.id,\n          type: \"task.retry\",\n          message: `Task \"${task.title}\" failed, retry attempt ${task.retryCount}/${task.maxRetries}`,\n          metadata: { error: (error as Error).message, retryCount: task.retryCount },\n        });\n\n      } else {\n        // Max retries reached, mark as failed\n        await storage.updateTask(task.id, {\n          status: \"failed\",\n          error: (error as Error).message,\n          completedAt: new Date(),\n        });\n\n        await storage.createActivity({\n          userId: task.userId!,\n          taskId: task.id,\n          type: \"task.failed\",\n          message: `Task \"${task.title}\" failed after ${task.maxRetries} retry attempts`,\n          metadata: { error: (error as Error).message, retryCount: task.retryCount },\n        });\n\n        await auditLogger.log(\n          task.userId!,\n          \"task.process.fail\",\n          \"task\",\n          task.id.toString(),\n          null,\n          false,\n          (error as Error).message,\n          { retryCount: task.retryCount }\n        );\n      }\n    } finally {\n      this.currentlyProcessing.delete(task.id);\n    }\n  }\n\n  private async executeSystemTask(task: Task): Promise<any> {\n    switch (task.type) {\n      case \"system.cleanup\":\n        return await this.performSystemCleanup();\n      case \"system.backup\":\n        return await this.performSystemBackup();\n      case \"system.security_scan\":\n        return await this.performSecurityScan();\n      default:\n        throw new Error(`Unknown system task type: ${task.type}`);\n    }\n  }\n\n  private async performSystemCleanup(): Promise<any> {\n    // Simulate system cleanup\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    return {\n      status: \"completed\",\n      filesDeleted: Math.floor(Math.random() * 100),\n      spaceSaved: `${Math.floor(Math.random() * 500)}MB`,\n      duration: \"1.2s\",\n    };\n  }\n\n  private async performSystemBackup(): Promise<any> {\n    // Simulate system backup\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    return {\n      status: \"completed\",\n      backupSize: `${Math.floor(Math.random() * 1000) + 100}MB`,\n      filesBackedUp: Math.floor(Math.random() * 1000) + 100,\n      duration: \"2.1s\",\n    };\n  }\n\n  private async performSecurityScan(): Promise<any> {\n    // Simulate security scan\n    await new Promise(resolve => setTimeout(resolve, 3000));\n    \n    return {\n      status: \"completed\",\n      vulnerabilities: Math.floor(Math.random() * 3),\n      risksFound: Math.floor(Math.random() * 2),\n      recommendations: [\n        \"Update dependencies\",\n        \"Review access permissions\",\n        \"Enable additional security features\",\n      ],\n      duration: \"3.0s\",\n    };\n  }\n\n  private scheduleCleanup(): void {\n    // Clean up completed tasks older than 7 days every day at 2 AM\n    cron.schedule(\"0 2 * * *\", async () => {\n      try {\n        const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n        \n        // This would be implemented with a proper database query\n        console.log(`Scheduled cleanup of tasks older than ${sevenDaysAgo.toISOString()}`);\n        \n        // Log cleanup activity\n        await auditLogger.log(\n          \"system\",\n          \"task.cleanup.scheduled\",\n          \"system\",\n          null,\n          null,\n          true,\n          null,\n          { cleanupDate: sevenDaysAgo.toISOString() }\n        );\n        \n      } catch (error) {\n        console.error(\"Error during scheduled cleanup:\", error);\n      }\n    });\n  }\n\n  async getQueueStats(): Promise<{\n    totalQueued: number;\n    processing: number;\n    completed: number;\n    failed: number;\n    avgProcessingTime: number;\n  }> {\n    return {\n      totalQueued: this.queue.length,\n      processing: this.currentlyProcessing.size,\n      completed: 0, // Would be calculated from database\n      failed: 0, // Would be calculated from database\n      avgProcessingTime: 0, // Would be calculated from database\n    };\n  }\n\n  async pauseQueue(): Promise<void> {\n    this.processing = true; // Prevents new tasks from being processed\n  }\n\n  async resumeQueue(): Promise<void> {\n    this.processing = false;\n    this.processQueue();\n  }\n\n  async clearQueue(): Promise<void> {\n    this.queue = [];\n  }\n\n  async getQueueStatus(): Promise<{\n    status: \"running\" | \"paused\";\n    queueLength: number;\n    processing: number;\n  }> {\n    return {\n      status: this.processing ? \"paused\" : \"running\",\n      queueLength: this.queue.length,\n      processing: this.currentlyProcessing.size,\n    };\n  }\n}\n\nexport const taskQueue = new TaskQueue();\n",
      "size_bytes": 9420
    },
    "server/services/twoFactorAuth.ts": {
      "content": "import speakeasy from \"speakeasy\";\nimport QRCode from \"qrcode\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport { storage } from \"../storage\";\nimport { auditLogger } from \"./auditLogger\";\n\ninterface TwoFactorSetup {\n  secret: string;\n  qrCodeUrl: string;\n  backupCodes: string[];\n  manualEntryKey: string;\n}\n\ninterface PasswordPolicy {\n  minLength: number;\n  requireUppercase: boolean;\n  requireLowercase: boolean;\n  requireNumbers: boolean;\n  requireSpecialChars: boolean;\n  maxAge: number; // days\n  historyCount: number; // previous passwords to check\n}\n\nclass TwoFactorAuthService {\n  private readonly passwordPolicy: PasswordPolicy = {\n    minLength: 12,\n    requireUppercase: true,\n    requireLowercase: true,\n    requireNumbers: true,\n    requireSpecialChars: true,\n    maxAge: 90, // 90 days\n    historyCount: 5\n  };\n\n  private readonly jwtSecret = process.env.JWT_SECRET || \"your-super-secret-jwt-key\";\n  private readonly appName = \"Agent Factory Platform\";\n\n  /**\n   * Generate 2FA secret and QR code for user setup\n   */\n  async generateTwoFactorSetup(userId: string, userEmail: string): Promise<TwoFactorSetup> {\n    try {\n      // Generate secret\n      const secret = speakeasy.generateSecret({\n        name: `${this.appName} (${userEmail})`,\n        issuer: this.appName,\n        length: 32,\n      });\n\n      // Generate backup codes\n      const backupCodes = this.generateBackupCodes();\n\n      // Generate QR code\n      const qrCodeUrl = await QRCode.toDataURL(secret.otpauth_url!);\n\n      await auditLogger.log(userId, \"2fa.setup.generated\", \"security\", null, null);\n\n      return {\n        secret: secret.base32!,\n        qrCodeUrl,\n        backupCodes,\n        manualEntryKey: secret.base32!\n      };\n    } catch (error) {\n      await auditLogger.log(userId, \"2fa.setup.error\", \"security\", null, null, false, (error as Error).message);\n      throw new Error(\"Failed to generate 2FA setup\");\n    }\n  }\n\n  /**\n   * Verify 2FA token during setup\n   */\n  async verifySetupToken(secret: string, token: string, userId: string): Promise<boolean> {\n    try {\n      const verified = speakeasy.totp.verify({\n        secret,\n        encoding: \"base32\",\n        token,\n        window: 2, // Allow 2 time steps before/after\n      });\n\n      await auditLogger.log(userId, \"2fa.setup.verify\", \"security\", null, null, verified);\n      return verified;\n    } catch (error) {\n      await auditLogger.log(userId, \"2fa.setup.verify.error\", \"security\", null, null, false, (error as Error).message);\n      return false;\n    }\n  }\n\n  /**\n   * Enable 2FA for user after verification\n   */\n  async enableTwoFactor(userId: string, secret: string, backupCodes: string[]): Promise<boolean> {\n    try {\n      // Hash backup codes for storage\n      const hashedBackupCodes = await Promise.all(\n        backupCodes.map(code => bcrypt.hash(code, 12))\n      );\n\n      // Update user with 2FA settings\n      const user = await storage.getUser(userId);\n      if (!user) {\n        throw new Error(\"User not found\");\n      }\n\n      await storage.updateUserSecurity(userId, {\n        twoFactorEnabled: true,\n        twoFactorSecret: secret,\n        twoFactorBackupCodes: hashedBackupCodes\n      });\n\n      await auditLogger.log(userId, \"2fa.enabled\", \"security\", null, null);\n      return true;\n    } catch (error) {\n      await auditLogger.log(userId, \"2fa.enable.error\", \"security\", null, null, false, (error as Error).message);\n      return false;\n    }\n  }\n\n  /**\n   * Verify 2FA token during login\n   */\n  async verifyLoginToken(userId: string, token: string): Promise<boolean> {\n    try {\n      const user = await storage.getUser(userId);\n      if (!user || !user.twoFactorEnabled || !user.twoFactorSecret) {\n        return false;\n      }\n\n      // Check if it's a backup code\n      if (token.length === 8 && /^[A-Z0-9]{8}$/.test(token)) {\n        return await this.verifyBackupCode(userId, token);\n      }\n\n      // Verify TOTP token\n      const verified = speakeasy.totp.verify({\n        secret: user.twoFactorSecret,\n        encoding: \"base32\",\n        token,\n        window: 2,\n      });\n\n      await auditLogger.log(userId, \"2fa.login.verify\", \"security\", null, null, verified);\n      return verified;\n    } catch (error) {\n      await auditLogger.log(userId, \"2fa.login.error\", \"security\", null, null, false, (error as Error).message);\n      return false;\n    }\n  }\n\n  /**\n   * Verify backup code and invalidate it\n   */\n  private async verifyBackupCode(userId: string, code: string): Promise<boolean> {\n    try {\n      const user = await storage.getUser(userId);\n      if (!user || !user.twoFactorBackupCodes) {\n        return false;\n      }\n\n      const backupCodes = user.twoFactorBackupCodes as string[];\n      \n      for (let i = 0; i < backupCodes.length; i++) {\n        const isValid = await bcrypt.compare(code, backupCodes[i]);\n        if (isValid) {\n          // Remove used backup code\n          backupCodes.splice(i, 1);\n          \n          // Update user with remaining codes\n          await storage.updateUserSecurity(userId, {\n            twoFactorBackupCodes: backupCodes\n          });\n\n          await auditLogger.log(userId, \"2fa.backup.used\", \"security\", null, null);\n          return true;\n        }\n      }\n\n      await auditLogger.log(userId, \"2fa.backup.invalid\", \"security\", null, null, false);\n      return false;\n    } catch (error) {\n      await auditLogger.log(userId, \"2fa.backup.error\", \"security\", null, null, false, (error as Error).message);\n      return false;\n    }\n  }\n\n  /**\n   * Disable 2FA for user (with proper verification)\n   */\n  async disableTwoFactor(userId: string, currentPassword: string, token: string): Promise<boolean> {\n    try {\n      // Verify current password and 2FA token\n      const user = await storage.getUser(userId);\n      if (!user || !user.passwordHash) {\n        return false;\n      }\n\n      const passwordValid = await bcrypt.compare(currentPassword, user.passwordHash);\n      const tokenValid = await this.verifyLoginToken(userId, token);\n\n      if (!passwordValid || !tokenValid) {\n        await auditLogger.log(userId, \"2fa.disable.failed\", \"security\", null, null, false, \"Invalid credentials\");\n        return false;\n      }\n\n      // Disable 2FA\n      await storage.updateUserSecurity(userId, {\n        twoFactorEnabled: false,\n        twoFactorSecret: null,\n        twoFactorBackupCodes: null\n      });\n\n      await auditLogger.log(userId, \"2fa.disabled\", \"security\", null, null);\n      return true;\n    } catch (error) {\n      await auditLogger.log(userId, \"2fa.disable.error\", \"security\", null, null, false, (error as Error).message);\n      return false;\n    }\n  }\n\n  /**\n   * Check if user needs to change password (90-day policy)\n   */\n  async checkPasswordExpiry(userId: string): Promise<{ expired: boolean; daysRemaining: number }> {\n    try {\n      const user = await storage.getUser(userId);\n      if (!user || !user.lastPasswordChange) {\n        return { expired: true, daysRemaining: 0 };\n      }\n\n      const daysSinceChange = Math.floor(\n        (Date.now() - new Date(user.lastPasswordChange).getTime()) / (1000 * 60 * 60 * 24)\n      );\n\n      const daysRemaining = this.passwordPolicy.maxAge - daysSinceChange;\n      const expired = daysRemaining <= 0;\n\n      return { expired, daysRemaining };\n    } catch (error) {\n      console.error(\"Error checking password expiry:\", error);\n      return { expired: true, daysRemaining: 0 };\n    }\n  }\n\n  /**\n   * Validate password against policy\n   */\n  validatePassword(password: string): { valid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    if (password.length < this.passwordPolicy.minLength) {\n      errors.push(`Password must be at least ${this.passwordPolicy.minLength} characters long`);\n    }\n\n    if (this.passwordPolicy.requireUppercase && !/[A-Z]/.test(password)) {\n      errors.push(\"Password must contain at least one uppercase letter\");\n    }\n\n    if (this.passwordPolicy.requireLowercase && !/[a-z]/.test(password)) {\n      errors.push(\"Password must contain at least one lowercase letter\");\n    }\n\n    if (this.passwordPolicy.requireNumbers && !/\\d/.test(password)) {\n      errors.push(\"Password must contain at least one number\");\n    }\n\n    if (this.passwordPolicy.requireSpecialChars && !/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\n      errors.push(\"Password must contain at least one special character\");\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Hash password securely\n   */\n  async hashPassword(password: string): Promise<string> {\n    return await bcrypt.hash(password, 12);\n  }\n\n  /**\n   * Verify password\n   */\n  async verifyPassword(password: string, hash: string): Promise<boolean> {\n    return await bcrypt.compare(password, hash);\n  }\n\n  /**\n   * Generate backup codes\n   */\n  private generateBackupCodes(): string[] {\n    const codes: string[] = [];\n    const charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n    \n    for (let i = 0; i < 8; i++) {\n      let code = \"\";\n      for (let j = 0; j < 8; j++) {\n        code += charset.charAt(Math.floor(Math.random() * charset.length));\n      }\n      codes.push(code);\n    }\n    \n    return codes;\n  }\n\n  /**\n   * Generate secure session token with 2FA info\n   */\n  generateSecureToken(userId: string, twoFactorVerified: boolean): string {\n    const payload = {\n      userId,\n      twoFactorVerified,\n      iat: Math.floor(Date.now() / 1000),\n      exp: Math.floor(Date.now() / 1000) + (2 * 60 * 60) // 2 hours\n    };\n\n    return jwt.sign(payload, this.jwtSecret);\n  }\n\n  /**\n   * Verify secure session token\n   */\n  verifySecureToken(token: string): { valid: boolean; userId?: string; twoFactorVerified?: boolean } {\n    try {\n      const decoded = jwt.verify(token, this.jwtSecret) as any;\n      return {\n        valid: true,\n        userId: decoded.userId,\n        twoFactorVerified: decoded.twoFactorVerified\n      };\n    } catch (error) {\n      return { valid: false };\n    }\n  }\n\n  /**\n   * Get password policy for frontend display\n   */\n  getPasswordPolicy(): PasswordPolicy {\n    return { ...this.passwordPolicy };\n  }\n}\n\nexport const twoFactorAuthService = new TwoFactorAuthService();",
      "size_bytes": 10180
    },
    "client/src/hooks/use-mobile.tsx": {
      "content": "import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n",
      "size_bytes": 565
    },
    "client/src/hooks/use-toast.ts": {
      "content": "import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n",
      "size_bytes": 3895
    },
    "client/src/hooks/useAuth.ts": {
      "content": "import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n",
      "size_bytes": 257
    },
    "client/src/hooks/useWebSocket.ts": {
      "content": "import { useEffect, useRef, useState } from \"react\";\n\ninterface WebSocketMessage {\n  type: string;\n  data?: any;\n  timestamp?: number;\n}\n\nexport function useWebSocket() {\n  const [isConnected, setIsConnected] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState<\"connecting\" | \"connected\" | \"disconnected\">(\"disconnected\");\n  const wsRef = useRef<WebSocket | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  const connect = () => {\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\n      return;\n    }\n\n    setConnectionStatus(\"connecting\");\n    \n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const host = window.location.host || `${window.location.hostname}:5000`;\n    const wsUrl = `${protocol}//${host}/ws`;\n    \n    try {\n      wsRef.current = new WebSocket(wsUrl);\n\n      wsRef.current.onopen = () => {\n        console.log(\"WebSocket connected\");\n        setIsConnected(true);\n        setConnectionStatus(\"connected\");\n        \n        // Clear any existing reconnect timeout\n        if (reconnectTimeoutRef.current) {\n          clearTimeout(reconnectTimeoutRef.current);\n          reconnectTimeoutRef.current = null;\n        }\n      };\n\n      wsRef.current.onclose = () => {\n        console.log(\"WebSocket disconnected\");\n        setIsConnected(false);\n        setConnectionStatus(\"disconnected\");\n        \n        // Attempt to reconnect after 3 seconds\n        reconnectTimeoutRef.current = setTimeout(() => {\n          connect();\n        }, 3000);\n      };\n\n      wsRef.current.onerror = (error) => {\n        console.error(\"WebSocket error:\", error);\n        setConnectionStatus(\"disconnected\");\n      };\n\n      wsRef.current.onmessage = (event) => {\n        try {\n          const message: WebSocketMessage = JSON.parse(event.data);\n          console.log(\"WebSocket message received:\", message);\n          \n          // Handle different message types\n          switch (message.type) {\n            case \"connected\":\n              console.log(\"WebSocket connection confirmed\");\n              break;\n            case \"pong\":\n              console.log(\"WebSocket ping successful\");\n              break;\n            default:\n              // Dispatch custom event for other components to listen to\n              window.dispatchEvent(\n                new CustomEvent(\"websocket-message\", {\n                  detail: message,\n                })\n              );\n          }\n        } catch (error) {\n          console.error(\"Error parsing WebSocket message:\", error);\n        }\n      };\n    } catch (error) {\n      console.error(\"Error creating WebSocket connection:\", error);\n      setConnectionStatus(\"disconnected\");\n    }\n  };\n\n  const disconnect = () => {\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n      reconnectTimeoutRef.current = null;\n    }\n    \n    if (wsRef.current) {\n      wsRef.current.close();\n      wsRef.current = null;\n    }\n    \n    setIsConnected(false);\n    setConnectionStatus(\"disconnected\");\n  };\n\n  const sendMessage = (message: WebSocketMessage) => {\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify(message));\n    } else {\n      console.warn(\"WebSocket is not connected. Cannot send message:\", message);\n    }\n  };\n\n  const ping = () => {\n    sendMessage({ type: \"ping\" });\n  };\n\n  useEffect(() => {\n    connect();\n    \n    // Disabled automatic pinging to reduce server load\n    // Connection will be maintained by browser keep-alive\n    \n    return () => {\n      disconnect();\n    };\n  }, []);\n\n  return {\n    isConnected,\n    connectionStatus,\n    sendMessage,\n    ping,\n    connect,\n    disconnect,\n  };\n}\n",
      "size_bytes": 3733
    },
    "client/src/lib/authUtils.ts": {
      "content": "export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}",
      "size_bytes": 115
    },
    "client/src/lib/queryClient.ts": {
      "content": "import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n",
      "size_bytes": 1376
    },
    "client/src/lib/utils.ts": {
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "size_bytes": 166
    },
    "client/src/pages/AgentFactory.tsx": {
      "content": "import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/Layout/Sidebar\";\nimport Header from \"@/components/Layout/Header\";\nimport AgentTypeCard from \"@/components/AgentFactory/AgentTypeCard\";\nimport CreateAgentModal from \"@/components/AgentFactory/CreateAgentModal\";\nimport MultimodalInterface from \"@/components/AgentFactory/MultimodalInterface\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { AgentType, Agent } from \"@/types/agent\";\nimport { Plus, Brain } from \"lucide-react\";\n\nexport default function AgentFactory() {\n  const { isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [selectedAgentForTesting, setSelectedAgentForTesting] = useState<Agent | null>(null);\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: agentTypes, isLoading: agentTypesLoading, error: agentTypesError } = useQuery<AgentType[]>({\n    queryKey: [\"/api/agent-types\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: agents, isLoading: agentsLoading, error: agentsError } = useQuery<Agent[]>({\n    queryKey: [\"/api/agents\"],\n    enabled: isAuthenticated,\n  });\n\n  const getInstanceCount = (typeId: number) => {\n    return agents?.filter(agent => agent.typeId === typeId).length || 0;\n  };\n\n  const getAgentStatus = (typeId: number): \"active\" | \"setup\" | \"inactive\" => {\n    const agentsOfType = agents?.filter(agent => agent.typeId === typeId) || [];\n    if (agentsOfType.length === 0) return \"inactive\";\n    if (agentsOfType.some(agent => agent.status === \"active\")) return \"active\";\n    return \"setup\";\n  };\n\n  const handleTestMultimodal = (agentType: AgentType) => {\n    // Find first active agent of this type\n    const activeAgent = agents?.find(agent => \n      agent.typeId === agentType.id && agent.status === \"active\"\n    );\n    \n    if (activeAgent) {\n      setSelectedAgentForTesting(activeAgent);\n    } else {\n      toast({\n        title: \"No active agent\",\n        description: \"Please create and activate an agent first\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen bg-gray-50 dark:bg-gray-900\">\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n            <p className=\"text-gray-600 dark:text-gray-300\">Loading agent factory...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-gray-50 dark:bg-gray-900\">\n      <Sidebar />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden w-full\">\n        <Header \n          title=\"Agent Factory\"\n          description=\"Create and manage specialized AI agents for your business operations\"\n          onCreateAgent={() => setIsCreateModalOpen(true)}\n        />\n        \n        <main className=\"flex-1 overflow-auto p-8\">\n          <div className=\"max-w-7xl mx-auto space-y-6\">\n            \n            {/* Foundation Model Integration */}\n            <Card className=\"bg-gradient-to-r from-green-50 to-blue-50 dark:from-green-950 dark:to-blue-950 border-green-200 dark:border-green-800\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-green-900 dark:text-green-100\">\n                  <Brain className=\"w-5 h-5\" />\n                  BERT Foundation Model Integration\n                </CardTitle>\n                <CardDescription>\n                  All agents are enhanced with BERT foundation model for advanced reasoning, intent analysis, and workflow execution\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-lg font-semibold text-green-600\">Advanced Reasoning</div>\n                    <p className=\"text-sm text-muted-foreground\">Multi-step logical analysis</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-lg font-semibold text-blue-600\">Intent Understanding</div>\n                    <p className=\"text-sm text-muted-foreground\">Precise request interpretation</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-lg font-semibold text-purple-600\">Workflow Generation</div>\n                    <p className=\"text-sm text-muted-foreground\">Automated task planning</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-lg font-semibold text-orange-600\">Cross-Collaboration</div>\n                    <p className=\"text-sm text-muted-foreground\">Agent-to-agent communication</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700\">\n              <div className=\"p-6 border-b border-gray-200 dark:border-gray-700\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                    Available Agent Types\n                  </h3>\n                  <Button\n                    onClick={() => setIsCreateModalOpen(true)}\n                    className=\"bg-primary hover:bg-blue-700\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Create Agent\n                  </Button>\n                </div>\n              </div>\n              \n              <div className=\"p-6\">\n                {agentTypesLoading ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {[...Array(6)].map((_, i) => (\n                      <Card key={i}>\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-center space-x-3\">\n                            <Skeleton className=\"w-10 h-10 rounded-lg\" />\n                            <div className=\"flex-1 space-y-2\">\n                              <Skeleton className=\"h-4 w-32\" />\n                              <Skeleton className=\"h-3 w-48\" />\n                            </div>\n                            <div className=\"text-right space-y-1\">\n                              <Skeleton className=\"h-5 w-16\" />\n                              <Skeleton className=\"h-3 w-20\" />\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                ) : agentTypesError ? (\n                  <div className=\"text-center py-8\">\n                    <p className=\"text-error mb-4\">Failed to load agent types</p>\n                    <Button variant=\"outline\" onClick={() => window.location.reload()}>\n                      Retry\n                    </Button>\n                  </div>\n                ) : !agentTypes || agentTypes.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <p className=\"text-gray-500 dark:text-gray-400\">No agent types available</p>\n                  </div>\n                ) : (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n                    {agentTypes.map((agentType) => (\n                      <AgentTypeCard\n                        key={agentType.id}\n                        agentType={agentType}\n                        instanceCount={getInstanceCount(agentType.id)}\n                        status={getAgentStatus(agentType.id)}\n                        onClick={() => setIsCreateModalOpen(true)}\n                        onTestMultimodal={() => handleTestMultimodal(agentType)}\n                      />\n                    ))}\n                  </div>\n                )}\n                \n                <div className=\"border-t border-gray-200 dark:border-gray-700 pt-6\">\n                  <Button\n                    variant=\"outline\"\n                    className=\"w-full border-2 border-dashed border-gray-300 dark:border-gray-600 h-20 text-gray-600 dark:text-gray-300 hover:border-primary hover:text-primary transition-colors\"\n                    onClick={() => setIsCreateModalOpen(true)}\n                  >\n                    <div className=\"text-center\">\n                      <Plus className=\"w-6 h-6 mx-auto mb-2\" />\n                      <p className=\"font-medium\">Create Custom Agent</p>\n                      <p className=\"text-sm\">Build a specialized agent for your workflow</p>\n                    </div>\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n\n      <CreateAgentModal\n        isOpen={isCreateModalOpen}\n        onClose={() => setIsCreateModalOpen(false)}\n      />\n\n      {selectedAgentForTesting && (\n        <MultimodalInterface\n          agent={selectedAgentForTesting}\n          onClose={() => setSelectedAgentForTesting(null)}\n        />\n      )}\n    </div>\n  );\n}\n",
      "size_bytes": 9938
    },
    "client/src/pages/AgentLibrary.tsx": {
      "content": "import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/Layout/Sidebar\";\nimport Header from \"@/components/Layout/Header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Search, \n  Download, \n  Play, \n  Pause, \n  Settings, \n  MoreHorizontal,\n  Bot,\n  Brain,\n  Shield,\n  Zap\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface Agent {\n  id: number;\n  name: string;\n  type: string;\n  status: 'active' | 'inactive' | 'paused';\n  description: string;\n  capabilities: string[];\n  createdAt: string;\n  lastActive: string;\n  performanceScore: number;\n  instances: number;\n}\n\nexport default function AgentLibrary() {\n  const { isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedAgent, setSelectedAgent] = useState<Agent | null>(null);\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: agents = [], isLoading: agentsLoading } = useQuery<Agent[]>({\n    queryKey: [\"/api/agents\"],\n    enabled: isAuthenticated,\n  });\n\n  const downloadAgentMutation = useMutation({\n    mutationFn: async (agentId: number) => {\n      const response = await apiRequest(\"GET\", `/api/agents/${agentId}/download`);\n      return response;\n    },\n    onSuccess: (data, agentId) => {\n      const agent = agents.find(a => a.id === agentId);\n      toast({\n        title: \"Download Started\",\n        description: `${agent?.name} agent package is being prepared`,\n      });\n      \n      // Simulate download process\n      setTimeout(() => {\n        toast({\n          title: \"Download Complete\",\n          description: `${agent?.name} agent ready for deployment`,\n        });\n      }, 2000);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Download Failed\",\n        description: \"Failed to download agent package\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const toggleAgentMutation = useMutation({\n    mutationFn: async ({ agentId, action }: { agentId: number; action: 'start' | 'stop' | 'pause' }) => {\n      await apiRequest(\"POST\", `/api/agents/${agentId}/${action}`, {});\n    },\n    onSuccess: (_, { agentId, action }) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/agents\"] });\n      const agent = agents.find(a => a.id === agentId);\n      toast({\n        title: \"Agent Updated\",\n        description: `${agent?.name} has been ${action}ped`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Action Failed\",\n        description: \"Failed to update agent status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDownloadAgent = (agent: Agent) => {\n    downloadAgentMutation.mutate(agent.id);\n  };\n\n  const handleToggleAgent = (agent: Agent, action: 'start' | 'stop' | 'pause') => {\n    toggleAgentMutation.mutate({ agentId: agent.id, action });\n  };\n\n  const filteredAgents = agents.filter(agent =>\n    agent.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    agent.type.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-green-100 text-green-800';\n      case 'inactive': return 'bg-gray-100 text-gray-800';\n      case 'paused': return 'bg-yellow-100 text-yellow-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getAgentIcon = (type: string) => {\n    switch (type.toLowerCase()) {\n      case 'social media': return Bot;\n      case 'email marketing': return Zap;\n      case 'security': return Shield;\n      case 'analytics': return Brain;\n      default: return Bot;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen bg-gray-50 dark:bg-gray-900\">\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n            <p className=\"text-gray-600 dark:text-gray-300\">Loading agent library...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-gray-50 dark:bg-gray-900\">\n      <Sidebar />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Agent Library\"\n          description=\"Access, manage, and download your AI agents\"\n        />\n        \n        <main className=\"flex-1 overflow-auto p-8\">\n          <div className=\"max-w-7xl mx-auto space-y-6\">\n            \n            {/* Search and Controls */}\n            <div className=\"flex items-center justify-between\">\n              <div className=\"relative flex-1 max-w-md\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <Input\n                  placeholder=\"Search agents...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Button variant=\"outline\">\n                  <Settings className=\"w-4 h-4 mr-2\" />\n                  Manage\n                </Button>\n              </div>\n            </div>\n\n            <Tabs defaultValue=\"all\" className=\"space-y-6\">\n              <TabsList>\n                <TabsTrigger value=\"all\">All Agents ({agents.length})</TabsTrigger>\n                <TabsTrigger value=\"active\">Active ({agents.filter(a => a.status === 'active').length})</TabsTrigger>\n                <TabsTrigger value=\"inactive\">Inactive ({agents.filter(a => a.status === 'inactive').length})</TabsTrigger>\n                <TabsTrigger value=\"paused\">Paused ({agents.filter(a => a.status === 'paused').length})</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"all\" className=\"space-y-4\">\n                {agentsLoading ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {[...Array(6)].map((_, i) => (\n                      <Card key={i} className=\"animate-pulse\">\n                        <CardContent className=\"p-6\">\n                          <div className=\"h-4 bg-gray-300 rounded w-3/4 mb-2\"></div>\n                          <div className=\"h-3 bg-gray-300 rounded w-1/2 mb-4\"></div>\n                          <div className=\"h-20 bg-gray-300 rounded mb-4\"></div>\n                          <div className=\"flex space-x-2\">\n                            <div className=\"h-8 bg-gray-300 rounded w-16\"></div>\n                            <div className=\"h-8 bg-gray-300 rounded w-16\"></div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                ) : filteredAgents.length === 0 ? (\n                  <div className=\"text-center py-12\">\n                    <Bot className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold mb-2\">No Agents Found</h3>\n                    <p className=\"text-gray-500\">\n                      {searchTerm ? \"Try adjusting your search terms\" : \"Create your first agent to get started\"}\n                    </p>\n                  </div>\n                ) : (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {filteredAgents.map((agent) => {\n                      const IconComponent = getAgentIcon(agent.type);\n                      return (\n                        <Card key={agent.id} className=\"hover:shadow-md transition-shadow\">\n                          <CardHeader className=\"pb-3\">\n                            <div className=\"flex items-start justify-between\">\n                              <div className=\"flex items-center space-x-3\">\n                                <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                                  <IconComponent className=\"w-5 h-5 text-primary\" />\n                                </div>\n                                <div>\n                                  <CardTitle className=\"text-lg\">{agent.name}</CardTitle>\n                                  <p className=\"text-sm text-gray-500\">{agent.type}</p>\n                                </div>\n                              </div>\n                              <Badge className={getStatusColor(agent.status)}>\n                                {agent.status}\n                              </Badge>\n                            </div>\n                          </CardHeader>\n                          <CardContent className=\"space-y-4\">\n                            <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                              {agent.description}\n                            </p>\n                            \n                            <div className=\"space-y-2\">\n                              <div className=\"flex justify-between text-sm\">\n                                <span>Performance</span>\n                                <span className=\"font-medium\">{agent.performanceScore}%</span>\n                              </div>\n                              <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                                <div \n                                  className=\"bg-primary h-2 rounded-full\" \n                                  style={{ width: `${agent.performanceScore}%` }}\n                                ></div>\n                              </div>\n                            </div>\n\n                            <div className=\"flex items-center justify-between text-sm text-gray-500\">\n                              <span>{agent.instances} instances</span>\n                              <span>Updated {new Date(agent.lastActive).toLocaleDateString()}</span>\n                            </div>\n\n                            <div className=\"flex items-center space-x-2 pt-2\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => handleDownloadAgent(agent)}\n                                disabled={downloadAgentMutation.isPending}\n                              >\n                                <Download className=\"w-4 h-4 mr-1\" />\n                                Download\n                              </Button>\n                              \n                              {agent.status === 'active' ? (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  onClick={() => handleToggleAgent(agent, 'pause')}\n                                  disabled={toggleAgentMutation.isPending}\n                                >\n                                  <Pause className=\"w-4 h-4 mr-1\" />\n                                  Pause\n                                </Button>\n                              ) : (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  onClick={() => handleToggleAgent(agent, 'start')}\n                                  disabled={toggleAgentMutation.isPending}\n                                >\n                                  <Play className=\"w-4 h-4 mr-1\" />\n                                  Start\n                                </Button>\n                              )}\n                              \n                              <Button size=\"sm\" variant=\"outline\">\n                                <MoreHorizontal className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      );\n                    })}\n                  </div>\n                )}\n              </TabsContent>\n\n              {/* Similar content for other tabs with filtered data */}\n              <TabsContent value=\"active\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {filteredAgents.filter(agent => agent.status === 'active').map((agent) => {\n                    const IconComponent = getAgentIcon(agent.type);\n                    return (\n                      <Card key={agent.id} className=\"hover:shadow-md transition-shadow\">\n                        <CardHeader className=\"pb-3\">\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                                <IconComponent className=\"w-5 h-5 text-primary\" />\n                              </div>\n                              <div>\n                                <CardTitle className=\"text-lg\">{agent.name}</CardTitle>\n                                <p className=\"text-sm text-gray-500\">{agent.type}</p>\n                              </div>\n                            </div>\n                            <Badge className={getStatusColor(agent.status)}>\n                              {agent.status}\n                            </Badge>\n                          </div>\n                        </CardHeader>\n                        <CardContent className=\"space-y-4\">\n                          <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                            {agent.description}\n                          </p>\n                          <div className=\"flex items-center space-x-2\">\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => handleDownloadAgent(agent)}\n                            >\n                              <Download className=\"w-4 h-4 mr-1\" />\n                              Download\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => handleToggleAgent(agent, 'pause')}\n                            >\n                              <Pause className=\"w-4 h-4 mr-1\" />\n                              Pause\n                            </Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    );\n                  })}\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"inactive\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {filteredAgents.filter(agent => agent.status === 'inactive').map((agent) => {\n                    const IconComponent = getAgentIcon(agent.type);\n                    return (\n                      <Card key={agent.id} className=\"hover:shadow-md transition-shadow\">\n                        <CardHeader className=\"pb-3\">\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                                <IconComponent className=\"w-5 h-5 text-primary\" />\n                              </div>\n                              <div>\n                                <CardTitle className=\"text-lg\">{agent.name}</CardTitle>\n                                <p className=\"text-sm text-gray-500\">{agent.type}</p>\n                              </div>\n                            </div>\n                            <Badge className={getStatusColor(agent.status)}>\n                              {agent.status}\n                            </Badge>\n                          </div>\n                        </CardHeader>\n                        <CardContent className=\"space-y-4\">\n                          <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                            {agent.description}\n                          </p>\n                          <div className=\"flex items-center space-x-2\">\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => handleDownloadAgent(agent)}\n                            >\n                              <Download className=\"w-4 h-4 mr-1\" />\n                              Download\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => handleToggleAgent(agent, 'start')}\n                            >\n                              <Play className=\"w-4 h-4 mr-1\" />\n                              Start\n                            </Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    );\n                  })}\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"paused\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {filteredAgents.filter(agent => agent.status === 'paused').map((agent) => {\n                    const IconComponent = getAgentIcon(agent.type);\n                    return (\n                      <Card key={agent.id} className=\"hover:shadow-md transition-shadow\">\n                        <CardHeader className=\"pb-3\">\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                                <IconComponent className=\"w-5 h-5 text-primary\" />\n                              </div>\n                              <div>\n                                <CardTitle className=\"text-lg\">{agent.name}</CardTitle>\n                                <p className=\"text-sm text-gray-500\">{agent.type}</p>\n                              </div>\n                            </div>\n                            <Badge className={getStatusColor(agent.status)}>\n                              {agent.status}\n                            </Badge>\n                          </div>\n                        </CardHeader>\n                        <CardContent className=\"space-y-4\">\n                          <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                            {agent.description}\n                          </p>\n                          <div className=\"flex items-center space-x-2\">\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => handleDownloadAgent(agent)}\n                            >\n                              <Download className=\"w-4 h-4 mr-1\" />\n                              Download\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => handleToggleAgent(agent, 'start')}\n                            >\n                              <Play className=\"w-4 h-4 mr-1\" />\n                              Resume\n                            </Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    );\n                  })}\n                </div>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}",
      "size_bytes": 20780
    },
    "client/src/pages/Analytics.tsx": {
      "content": "import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/Layout/Sidebar\";\nimport Header from \"@/components/Layout/Header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { BarChart, TrendingUp, Download, Calendar } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function Analytics() {\n  const { isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n\n  const handleExportData = async () => {\n    try {\n      toast({\n        title: \"Export Started\",\n        description: \"Generating analytics export...\",\n      });\n      \n      // Simulate export process\n      setTimeout(() => {\n        toast({\n          title: \"Export Complete\",\n          description: \"Analytics data has been exported successfully\",\n        });\n      }, 2000);\n    } catch (error) {\n      toast({\n        title: \"Export Failed\",\n        description: \"Failed to export analytics data\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleScheduleReport = async () => {\n    try {\n      toast({\n        title: \"Report Scheduled\",\n        description: \"Weekly analytics report has been scheduled\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Schedule Failed\",\n        description: \"Failed to schedule report\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen bg-gray-50 dark:bg-gray-900\">\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n            <p className=\"text-gray-600 dark:text-gray-300\">Loading analytics...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-gray-50 dark:bg-gray-900\">\n      <Sidebar />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Analytics & Reporting\"\n          description=\"Monitor performance metrics and generate business intelligence reports\"\n        />\n        \n        <main className=\"flex-1 overflow-auto p-8\">\n          <div className=\"max-w-7xl mx-auto space-y-8\">\n            {/* Quick Actions */}\n            <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700\">\n              <div className=\"p-6 border-b border-gray-200 dark:border-gray-700\">\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                  Analytics Dashboard\n                </h3>\n              </div>\n              <div className=\"p-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                  <Button \n                    variant=\"outline\" \n                    className=\"h-24 flex flex-col items-center justify-center hover:bg-primary/5 hover:border-primary transition-colors\"\n                    onClick={() => toast({ title: \"Intelligence Data\", description: \"Performance report generated\" })}\n                  >\n                    <BarChart className=\"w-6 h-6 mb-2\" />\n                    <span className=\"text-sm\">Intelligence Data</span>\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    className=\"h-24 flex flex-col items-center justify-center hover:bg-primary/5 hover:border-primary transition-colors\"\n                    onClick={() => toast({ title: \"Trend Analysis\", description: \"Analyzing performance trends\" })}\n                  >\n                    <TrendingUp className=\"w-6 h-6 mb-2\" />\n                    <span className=\"text-sm\">Trend Analysis</span>\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    className=\"h-24 flex flex-col items-center justify-center hover:bg-primary/5 hover:border-primary transition-colors\"\n                    onClick={handleExportData}\n                  >\n                    <Download className=\"w-6 h-6 mb-2\" />\n                    <span className=\"text-sm\">Export Data</span>\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    className=\"h-24 flex flex-col items-center justify-center hover:bg-primary/5 hover:border-primary transition-colors\"\n                    onClick={handleScheduleReport}\n                  >\n                    <Calendar className=\"w-6 h-6 mb-2\" />\n                    <span className=\"text-sm\">Schedule Report</span>\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            {/* Analytics Grid */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Agent Performance</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center py-12\">\n                    <BarChart className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-500 dark:text-gray-400\">\n                      Analytics charts and metrics will be displayed here\n                    </p>\n                    <p className=\"text-sm text-gray-400 dark:text-gray-500 mt-2\">\n                      Connect your data sources to see detailed analytics\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Task Completion Trends</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center py-12\">\n                    <TrendingUp className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-500 dark:text-gray-400\">\n                      Task completion trends will be shown here\n                    </p>\n                    <p className=\"text-sm text-gray-400 dark:text-gray-500 mt-2\">\n                      Historical data and predictive analytics\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>System Usage</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center py-12\">\n                    <BarChart className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-500 dark:text-gray-400\">\n                      System usage metrics and resource utilization\n                    </p>\n                    <p className=\"text-sm text-gray-400 dark:text-gray-500 mt-2\">\n                      Monitor system performance and capacity\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Business Intelligence</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center py-12\">\n                    <TrendingUp className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-500 dark:text-gray-400\">\n                      Business insights and recommendations\n                    </p>\n                    <p className=\"text-sm text-gray-400 dark:text-gray-500 mt-2\">\n                      AI-powered business intelligence reports\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Recent Reports */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>Recent Reports</CardTitle>\n                  <Button variant=\"outline\" size=\"sm\">\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Generate Report\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-8\">\n                  <p className=\"text-gray-500 dark:text-gray-400\">\n                    No reports generated yet\n                  </p>\n                  <p className=\"text-sm text-gray-400 dark:text-gray-500 mt-2\">\n                    Generated reports will appear here for download and review\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n",
      "size_bytes": 9195
    },
    "client/src/pages/Approvals.tsx": {
      "content": "import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/Layout/Sidebar\";\nimport Header from \"@/components/Layout/Header\";\nimport ApprovalCard from \"@/components/Approvals/ApprovalCard\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Approval } from \"@/types/task\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { RefreshCw, CheckCheck, X } from \"lucide-react\";\n\ntype ApprovalStatus = \"all\" | \"pending\" | \"approved\" | \"rejected\";\n\nexport default function Approvals() {\n  const { isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [activeTab, setActiveTab] = useState<ApprovalStatus>(\"pending\");\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: approvals, isLoading: approvalsLoading, error: approvalsError } = useQuery<Approval[]>({\n    queryKey: [\"/api/approvals\"],\n    enabled: isAuthenticated,\n    refetchInterval: 10000, // Refresh every 10 seconds\n  });\n\n  const approveMutation = useMutation({\n    mutationFn: async (approvalId: number) => {\n      await apiRequest(\"POST\", `/api/approvals/${approvalId}/approve`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/approvals\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Approved\",\n        description: \"Request has been approved successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to approve request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const rejectMutation = useMutation({\n    mutationFn: async (approvalId: number) => {\n      await apiRequest(\"POST\", `/api/approvals/${approvalId}/reject`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/approvals\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Rejected\",\n        description: \"Request has been rejected\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to reject request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleApprove = (approvalId: number) => {\n    approveMutation.mutate(approvalId);\n  };\n\n  const handleReject = (approvalId: number) => {\n    rejectMutation.mutate(approvalId);\n  };\n\n  const handleView = (approval: Approval) => {\n    toast({\n      title: \"Approval Details\",\n      description: `Viewing details for: ${approval.title}`,\n    });\n  };\n\n  const handleRefresh = () => {\n    queryClient.invalidateQueries({ queryKey: [\"/api/approvals\"] });\n  };\n\n  const handleBulkApprove = () => {\n    const pendingApprovals = filteredApprovals.filter(approval => approval.status === \"pending\");\n    \n    if (pendingApprovals.length === 0) {\n      toast({\n        title: \"No Pending Approvals\",\n        description: \"There are no pending approvals to process\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // For demo purposes, approve the first one\n    if (pendingApprovals.length > 0) {\n      handleApprove(pendingApprovals[0].id);\n    }\n  };\n\n  const filteredApprovals = approvals?.filter(approval => \n    activeTab === \"all\" || approval.status === activeTab\n  ) || [];\n\n  const getApprovalCountByStatus = (status: ApprovalStatus) => {\n    if (status === \"all\") return approvals?.length || 0;\n    return approvals?.filter(approval => approval.status === status).length || 0;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen bg-gray-50 dark:bg-gray-900\">\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n            <p className=\"text-gray-600 dark:text-gray-300\">Loading approvals...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-gray-50 dark:bg-gray-900\">\n      <Sidebar />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Approval Center\"\n          description=\"Review and approve agent actions and automated workflows\"\n        />\n        \n        <main className=\"flex-1 overflow-auto p-8\">\n          <div className=\"max-w-7xl mx-auto\">\n            <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700\">\n              <div className=\"p-6 border-b border-gray-200 dark:border-gray-700\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                    Approval Requests\n                  </h3>\n                  <div className=\"flex items-center space-x-3\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={handleRefresh}\n                      disabled={approvalsLoading}\n                    >\n                      <RefreshCw className={`w-4 h-4 mr-2 ${approvalsLoading ? 'animate-spin' : ''}`} />\n                      Refresh\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      onClick={handleBulkApprove}\n                      className=\"bg-success hover:bg-success/90 text-white\"\n                      disabled={getApprovalCountByStatus(\"pending\") === 0}\n                    >\n                      <CheckCheck className=\"w-4 h-4 mr-2\" />\n                      Bulk Approve\n                    </Button>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"p-6\">\n                <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as ApprovalStatus)}>\n                  <TabsList className=\"grid w-full grid-cols-4 gap-1 p-1\">\n                    <TabsTrigger value=\"pending\" className=\"relative flex flex-col items-center justify-center min-h-[3rem] px-2\">\n                      <span className=\"text-xs font-medium\">Pending</span>\n                      <span className=\"bg-warning/10 text-warning text-xs px-1.5 py-0.5 rounded-full mt-1\">\n                        {getApprovalCountByStatus(\"pending\")}\n                      </span>\n                    </TabsTrigger>\n                    <TabsTrigger value=\"approved\" className=\"relative flex flex-col items-center justify-center min-h-[3rem] px-2\">\n                      <span className=\"text-xs font-medium\">Approved</span>\n                      <span className=\"bg-success/10 text-success text-xs px-1.5 py-0.5 rounded-full mt-1\">\n                        {getApprovalCountByStatus(\"approved\")}\n                      </span>\n                    </TabsTrigger>\n                    <TabsTrigger value=\"rejected\" className=\"relative flex flex-col items-center justify-center min-h-[3rem] px-2\">\n                      <span className=\"text-xs font-medium\">Rejected</span>\n                      <span className=\"bg-error/10 text-error text-xs px-1.5 py-0.5 rounded-full mt-1\">\n                        {getApprovalCountByStatus(\"rejected\")}\n                      </span>\n                    </TabsTrigger>\n                    <TabsTrigger value=\"all\" className=\"relative flex flex-col items-center justify-center min-h-[3rem] px-2\">\n                      <span className=\"text-xs font-medium\">All</span>\n                      <span className=\"bg-gray-100 dark:bg-gray-700 text-xs px-1.5 py-0.5 rounded-full mt-1\">\n                        {getApprovalCountByStatus(\"all\")}\n                      </span>\n                    </TabsTrigger>\n                  </TabsList>\n                  \n                  <div className=\"mt-6\">\n                    <TabsContent value={activeTab} className=\"mt-0\">\n                      {approvalsLoading ? (\n                        <div className=\"space-y-4\">\n                          {[...Array(3)].map((_, i) => (\n                            <Card key={i}>\n                              <CardContent className=\"p-6\">\n                                <div className=\"flex items-start justify-between\">\n                                  <div className=\"flex items-center space-x-3 mb-4\">\n                                    <Skeleton className=\"w-8 h-8 rounded-lg\" />\n                                    <div className=\"space-y-2\">\n                                      <Skeleton className=\"h-5 w-48\" />\n                                      <Skeleton className=\"h-4 w-16\" />\n                                    </div>\n                                  </div>\n                                  <div className=\"flex space-x-2\">\n                                    <Skeleton className=\"h-8 w-20\" />\n                                    <Skeleton className=\"h-8 w-20\" />\n                                  </div>\n                                </div>\n                                <Skeleton className=\"h-4 w-full mb-2\" />\n                                <Skeleton className=\"h-12 w-full\" />\n                              </CardContent>\n                            </Card>\n                          ))}\n                        </div>\n                      ) : approvalsError ? (\n                        <div className=\"text-center py-8\">\n                          <p className=\"text-error mb-4\">Failed to load approval requests</p>\n                          <Button variant=\"outline\" onClick={handleRefresh}>\n                            Retry\n                          </Button>\n                        </div>\n                      ) : filteredApprovals.length === 0 ? (\n                        <div className=\"text-center py-12\">\n                          <div className=\"w-16 h-16 bg-success/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                            <CheckCheck className=\"w-8 h-8 text-success\" />\n                          </div>\n                          <p className=\"text-gray-500 dark:text-gray-400 text-lg mb-2\">\n                            {activeTab === \"pending\" \n                              ? \"No pending approvals\" \n                              : `No ${activeTab === \"all\" ? \"\" : activeTab} approvals found`\n                            }\n                          </p>\n                          <p className=\"text-sm text-gray-400 dark:text-gray-500\">\n                            {activeTab === \"pending\" \n                              ? \"All caught up! New requests will appear here\"\n                              : \"Approval requests will appear here as agents need authorization\"\n                            }\n                          </p>\n                        </div>\n                      ) : (\n                        <div className=\"space-y-4\">\n                          {filteredApprovals.map((approval) => (\n                            <ApprovalCard\n                              key={approval.id}\n                              approval={approval}\n                              onApprove={handleApprove}\n                              onReject={handleReject}\n                              onView={handleView}\n                            />\n                          ))}\n                        </div>\n                      )}\n                    </TabsContent>\n                  </div>\n                </Tabs>\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n",
      "size_bytes": 12966
    },
    "client/src/pages/Dashboard.tsx": {
      "content": "import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/Layout/Sidebar\";\nimport Header from \"@/components/Layout/Header\";\nimport StatsGrid from \"@/components/Dashboard/StatsGrid\";\nimport ActivityFeed from \"@/components/Dashboard/ActivityFeed\";\nimport SecurityStatus from \"@/components/Dashboard/SecurityStatus\";\nimport QuickActions from \"@/components/Dashboard/QuickActions\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function Dashboard() {\n  const { isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen bg-gray-50 dark:bg-gray-900\">\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n            <p className=\"text-gray-600 dark:text-gray-300\">Loading dashboard...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-gray-50 dark:bg-gray-900\">\n      <Sidebar />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden w-full\">\n        <Header \n          title=\"Dashboard Overview\"\n          description=\"Manage your AI agents and monitor system performance\"\n        />\n        \n        <main className=\"flex-1 overflow-auto p-4 lg:p-8 w-full max-w-full\">\n          <StatsGrid />\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 mb-8\">\n            <div className=\"lg:col-span-2\">\n              {/* Agent Factory Preview - This could be its own component */}\n              <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 mb-8\">\n                <div className=\"p-6 border-b border-gray-200 dark:border-gray-700\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                      Agent Factory\n                    </h3>\n                    <button className=\"text-primary hover:text-blue-700 text-sm font-medium\">\n                      View All\n                    </button>\n                  </div>\n                </div>\n                \n                <div className=\"p-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n                    <div className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4 hover:border-primary transition-colors cursor-pointer\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-purple-100 dark:bg-purple-900 rounded-lg flex items-center justify-center\">\n                          <i className=\"fas fa-share-alt text-purple-600 dark:text-purple-400\"></i>\n                        </div>\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-gray-900 dark:text-white\">Social Media Agent</h4>\n                          <p className=\"text-sm text-gray-600 dark:text-gray-300\">Content generation & scheduling</p>\n                        </div>\n                        <div className=\"text-right\">\n                          <span className=\"text-xs bg-success/10 text-success px-2 py-1 rounded-full\">Active</span>\n                          <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">3 instances</p>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4 hover:border-primary transition-colors cursor-pointer\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-blue-100 dark:bg-blue-900 rounded-lg flex items-center justify-center\">\n                          <i className=\"fas fa-envelope text-blue-600 dark:text-blue-400\"></i>\n                        </div>\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-gray-900 dark:text-white\">Email Marketing Agent</h4>\n                          <p className=\"text-sm text-gray-600 dark:text-gray-300\">Campaign setup & management</p>\n                        </div>\n                        <div className=\"text-right\">\n                          <span className=\"text-xs bg-success/10 text-success px-2 py-1 rounded-full\">Active</span>\n                          <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">5 instances</p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"space-y-6\">\n              <ActivityFeed />\n              <SecurityStatus />\n            </div>\n          </div>\n          \n          <QuickActions />\n        </main>\n      </div>\n    </div>\n  );\n}\n",
      "size_bytes": 5536
    },
    "client/src/pages/DataFlywheel.tsx": {
      "content": "import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Zap, \n  TrendingUp, \n  DollarSign, \n  Clock, \n  Target, \n  Settings, \n  Play, \n  Pause, \n  RefreshCw,\n  ChevronRight,\n  Cpu,\n  Database,\n  BarChart3,\n  Layers\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface FlywheelRun {\n  id: number;\n  name: string;\n  description?: string;\n  status: string;\n  baseModelId?: number;\n  targetWorkload: string;\n  datasetSize: number;\n  costSavings: number;\n  accuracyRetention: number;\n  startedAt?: string;\n  completedAt?: string;\n  createdAt: string;\n}\n\ninterface ModelEvaluation {\n  id: number;\n  modelId: number;\n  experimentType: string;\n  workloadId: string;\n  accuracyScore: number;\n  latency: number;\n  costPerRequest: number;\n  isPromoted: boolean;\n  createdAt: string;\n}\n\ninterface Optimization {\n  id: number;\n  workloadId: string;\n  optimizationType: string;\n  costReduction: number;\n  speedImprovement: number;\n  accuracyRetention: number;\n  confidence: number;\n  productionReady: boolean;\n  createdAt: string;\n}\n\nexport default function DataFlywheel() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n  const [selectedRun, setSelectedRun] = useState<number | null>(null);\n\n  // Fetch flywheel runs\n  const { data: flywheelRuns = [] } = useQuery<FlywheelRun[]>({\n    queryKey: [\"/api/flywheel/runs\"],\n    enabled: isAuthenticated,\n  });\n\n  // Fetch model evaluations\n  const { data: evaluations = [] } = useQuery<ModelEvaluation[]>({\n    queryKey: [\"/api/flywheel/evaluations\"],\n    enabled: isAuthenticated,\n  });\n\n  // Fetch optimizations\n  const { data: optimizations = [] } = useQuery<Optimization[]>({\n    queryKey: [\"/api/flywheel/optimizations\"],\n    enabled: isAuthenticated,\n  });\n\n  // Start new flywheel run mutation\n  const startRunMutation = useMutation({\n    mutationFn: async (data: { name: string; targetWorkload: string; description?: string }) => {\n      const response = await fetch(\"/api/flywheel/runs\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to start flywheel run\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/flywheel/runs\"] });\n      toast({\n        title: \"Flywheel Run Started\",\n        description: \"Model discovery and optimization process initiated.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to start flywheel run\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleStartRun = () => {\n    startRunMutation.mutate({\n      name: `Optimization Run ${new Date().toLocaleDateString()}`,\n      targetWorkload: \"general_agent_tasks\",\n      description: \"Autonomous model discovery and optimization cycle\"\n    });\n  };\n\n  if (isLoading) {\n    return <div className=\"flex items-center justify-center h-64\">Loading...</div>;\n  }\n\n  const runningRuns = flywheelRuns.filter(run => run.status === \"running\");\n  const completedRuns = flywheelRuns.filter(run => run.status === \"completed\");\n  \n  // Calculate aggregate metrics\n  const totalCostSavings = optimizations.reduce((sum, opt) => sum + opt.costReduction, 0) / Math.max(optimizations.length, 1);\n  const averageAccuracy = optimizations.reduce((sum, opt) => sum + opt.accuracyRetention, 0) / Math.max(optimizations.length, 1);\n  const productionReadyOptimizations = optimizations.filter(opt => opt.productionReady).length;\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-8\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">NVIDIA Data Flywheel</h1>\n          <p className=\"text-muted-foreground\">\n            Autonomous model discovery and optimization platform powered by NeMo microservices\n          </p>\n        </div>\n        <div className=\"flex gap-3\">\n          <Button \n            onClick={handleStartRun}\n            disabled={startRunMutation.isPending || runningRuns.length > 0}\n            className=\"bg-green-600 hover:bg-green-700\"\n          >\n            <Play className=\"w-4 h-4 mr-2\" />\n            {runningRuns.length > 0 ? \"Run in Progress\" : \"Start New Run\"}\n          </Button>\n        </div>\n      </div>\n\n      {/* Key Metrics Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Cost Savings</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">\n              {totalCostSavings.toFixed(1)}%\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Average across {optimizations.length} optimizations\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Accuracy Retention</CardTitle>\n            <Target className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {averageAccuracy.toFixed(1)}%\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Model performance maintained\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Production Ready</CardTitle>\n            <Cpu className=\"h-4 w-4 text-purple-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-purple-600\">\n              {productionReadyOptimizations}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Models ready for deployment\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Runs</CardTitle>\n            <RefreshCw className={`h-4 w-4 text-orange-500 ${runningRuns.length > 0 ? 'animate-spin' : ''}`} />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-orange-600\">\n              {runningRuns.length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Flywheel processes running\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content Tabs */}\n      <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"runs\">Flywheel Runs</TabsTrigger>\n          <TabsTrigger value=\"optimizations\">Optimizations</TabsTrigger>\n          <TabsTrigger value=\"models\">Model Catalog</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Zap className=\"w-5 h-5 text-yellow-500\" />\n                  Data Flywheel Process\n                </CardTitle>\n                <CardDescription>\n                  Autonomous optimization cycle using production traffic\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                  <div className=\"flex items-center gap-3\">\n                    <Database className=\"w-4 h-4 text-blue-500\" />\n                    <span className=\"text-sm\">Traffic Collection</span>\n                  </div>\n                  <Badge variant=\"outline\">Active</Badge>\n                </div>\n                <ChevronRight className=\"w-4 h-4 mx-auto text-muted-foreground\" />\n                <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                  <div className=\"flex items-center gap-3\">\n                    <Layers className=\"w-4 h-4 text-green-500\" />\n                    <span className=\"text-sm\">Dataset Creation</span>\n                  </div>\n                  <Badge variant=\"outline\">Automated</Badge>\n                </div>\n                <ChevronRight className=\"w-4 h-4 mx-auto text-muted-foreground\" />\n                <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                  <div className=\"flex items-center gap-3\">\n                    <BarChart3 className=\"w-4 h-4 text-purple-500\" />\n                    <span className=\"text-sm\">Model Evaluation</span>\n                  </div>\n                  <Badge variant=\"outline\">NeMo</Badge>\n                </div>\n                <ChevronRight className=\"w-4 h-4 mx-auto text-muted-foreground\" />\n                <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                  <div className=\"flex items-center gap-3\">\n                    <Target className=\"w-4 h-4 text-orange-500\" />\n                    <span className=\"text-sm\">Optimization</span>\n                  </div>\n                  <Badge variant=\"outline\">Continuous</Badge>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Recent Activity</CardTitle>\n                <CardDescription>\n                  Latest flywheel discoveries and optimizations\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ScrollArea className=\"h-64\">\n                  <div className=\"space-y-3\">\n                    {optimizations.slice(0, 5).map((opt) => (\n                      <div key={opt.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                        <div className=\"space-y-1\">\n                          <p className=\"text-sm font-medium\">{opt.optimizationType}</p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {opt.costReduction}% cost reduction, {opt.accuracyRetention}% accuracy\n                          </p>\n                        </div>\n                        <Badge variant={opt.productionReady ? \"default\" : \"secondary\"}>\n                          {opt.productionReady ? \"Ready\" : \"Testing\"}\n                        </Badge>\n                      </div>\n                    ))}\n                    {optimizations.length === 0 && (\n                      <div className=\"text-center text-muted-foreground py-8\">\n                        No optimizations discovered yet. Start a flywheel run to begin.\n                      </div>\n                    )}\n                  </div>\n                </ScrollArea>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"runs\" className=\"space-y-6\">\n          <div className=\"grid gap-4\">\n            {flywheelRuns.map((run) => (\n              <Card key={run.id} className={`cursor-pointer transition-colors ${selectedRun === run.id ? 'ring-2 ring-primary' : ''}`}>\n                <CardHeader onClick={() => setSelectedRun(run.id)}>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-1\">\n                      <CardTitle className=\"text-lg\">{run.name}</CardTitle>\n                      <CardDescription>{run.description}</CardDescription>\n                    </div>\n                    <div className=\"flex items-center gap-3\">\n                      <Badge variant={\n                        run.status === \"running\" ? \"default\" :\n                        run.status === \"completed\" ? \"secondary\" :\n                        run.status === \"failed\" ? \"destructive\" : \"outline\"\n                      }>\n                        {run.status}\n                      </Badge>\n                      <div className=\"text-right text-sm\">\n                        <div className=\"font-medium\">{run.costSavings}% savings</div>\n                        <div className=\"text-muted-foreground\">{run.accuracyRetention}% accuracy</div>\n                      </div>\n                    </div>\n                  </div>\n                </CardHeader>\n                {selectedRun === run.id && (\n                  <CardContent className=\"border-t\">\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mt-4\">\n                      <div>\n                        <div className=\"text-sm text-muted-foreground\">Dataset Size</div>\n                        <div className=\"font-medium\">{run.datasetSize.toLocaleString()} samples</div>\n                      </div>\n                      <div>\n                        <div className=\"text-sm text-muted-foreground\">Target Workload</div>\n                        <div className=\"font-medium\">{run.targetWorkload}</div>\n                      </div>\n                      <div>\n                        <div className=\"text-sm text-muted-foreground\">Started</div>\n                        <div className=\"font-medium\">\n                          {run.startedAt ? new Date(run.startedAt).toLocaleDateString() : \"Not started\"}\n                        </div>\n                      </div>\n                      <div>\n                        <div className=\"text-sm text-muted-foreground\">Duration</div>\n                        <div className=\"font-medium\">\n                          {run.completedAt && run.startedAt ? \n                            `${Math.round((new Date(run.completedAt).getTime() - new Date(run.startedAt).getTime()) / (1000 * 60))} min` :\n                            run.status === \"running\" ? \"In progress\" : \"N/A\"\n                          }\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                )}\n              </Card>\n            ))}\n            {flywheelRuns.length === 0 && (\n              <Card>\n                <CardContent className=\"text-center py-12\">\n                  <Zap className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n                  <h3 className=\"text-lg font-medium mb-2\">No Flywheel Runs</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Start your first flywheel run to begin autonomous model optimization.\n                  </p>\n                  <Button onClick={handleStartRun} disabled={startRunMutation.isPending}>\n                    <Play className=\"w-4 h-4 mr-2\" />\n                    Start First Run\n                  </Button>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"optimizations\" className=\"space-y-6\">\n          <div className=\"grid gap-4\">\n            {optimizations.map((opt) => (\n              <Card key={opt.id}>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-1\">\n                      <CardTitle className=\"text-lg capitalize\">{opt.optimizationType}</CardTitle>\n                      <CardDescription>Workload: {opt.workloadId}</CardDescription>\n                    </div>\n                    <div className=\"flex items-center gap-3\">\n                      <Badge variant={opt.productionReady ? \"default\" : \"secondary\"}>\n                        {opt.productionReady ? \"Production Ready\" : \"Under Evaluation\"}\n                      </Badge>\n                      <div className=\"text-right\">\n                        <div className=\"text-lg font-bold text-green-600\">{opt.costReduction}%</div>\n                        <div className=\"text-sm text-muted-foreground\">cost reduction</div>\n                      </div>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                    <div>\n                      <div className=\"text-sm text-muted-foreground\">Speed Improvement</div>\n                      <div className=\"text-lg font-medium text-blue-600\">{opt.speedImprovement}%</div>\n                    </div>\n                    <div>\n                      <div className=\"text-sm text-muted-foreground\">Accuracy Retention</div>\n                      <div className=\"text-lg font-medium text-purple-600\">{opt.accuracyRetention}%</div>\n                    </div>\n                    <div>\n                      <div className=\"text-sm text-muted-foreground\">Confidence</div>\n                      <div className=\"text-lg font-medium\">{opt.confidence}%</div>\n                    </div>\n                    <div>\n                      <div className=\"text-sm text-muted-foreground\">Discovered</div>\n                      <div className=\"text-lg font-medium\">{new Date(opt.createdAt).toLocaleDateString()}</div>\n                    </div>\n                  </div>\n                  <div className=\"mt-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm text-muted-foreground\">Optimization Confidence</span>\n                      <span className=\"text-sm font-medium\">{opt.confidence}%</span>\n                    </div>\n                    <Progress value={opt.confidence} className=\"h-2\" />\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n            {optimizations.length === 0 && (\n              <Card>\n                <CardContent className=\"text-center py-12\">\n                  <TrendingUp className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n                  <h3 className=\"text-lg font-medium mb-2\">No Optimizations Found</h3>\n                  <p className=\"text-muted-foreground\">\n                    Run the data flywheel to discover model optimizations.\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"models\" className=\"space-y-6\">\n          <Alert>\n            <Cpu className=\"h-4 w-4\" />\n            <AlertDescription>\n              Model catalog integration with NVIDIA NIM and NeMo microservices coming soon.\n              The flywheel will automatically discover and evaluate models from the NVIDIA model catalog.\n            </AlertDescription>\n          </Alert>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}",
      "size_bytes": 19674
    },
    "client/src/pages/Landing.tsx": {
      "content": "import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Shield, Bot, Zap, Users } from \"lucide-react\";\n\nexport default function Landing() {\n  const handleLogin = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800\">\n      <div className=\"container mx-auto px-4 py-16\">\n        <div className=\"text-center mb-16\">\n          <div className=\"inline-flex items-center space-x-3 mb-6\">\n            <div className=\"w-16 h-16 bg-primary rounded-2xl flex items-center justify-center\">\n              <Bot className=\"w-8 h-8 text-white\" />\n            </div>\n            <div>\n              <h1 className=\"text-4xl font-bold text-gray-900 dark:text-white\">Agent Factory</h1>\n              <p className=\"text-lg text-gray-600 dark:text-gray-300\">Neurodivergence Framework</p>\n            </div>\n          </div>\n          \n          <h2 className=\"text-2xl font-semibold text-gray-800 dark:text-gray-200 mb-4\">\n            Secure AI Agent Platform for Business Automation\n          </h2>\n          \n          <p className=\"text-lg text-gray-600 dark:text-gray-400 max-w-3xl mx-auto mb-8\">\n            Create, manage, and deploy specialized AI agents for every aspect of your business operations. \n            Built with security-first principles and designed for neurodivergent-friendly workflows.\n          </p>\n          \n          <Button \n            onClick={handleLogin}\n            size=\"lg\"\n            className=\"bg-primary hover:bg-blue-700 text-white px-8 py-4 text-lg font-semibold rounded-lg shadow-lg hover:shadow-xl transition-all duration-200\"\n          >\n            Get Started\n          </Button>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 mb-16\">\n          <Card className=\"text-center\">\n            <CardHeader>\n              <div className=\"w-12 h-12 bg-purple-100 dark:bg-purple-900 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <Bot className=\"w-6 h-6 text-purple-600 dark:text-purple-400\" />\n              </div>\n              <CardTitle>AI Agents</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Create specialized agents for social media, email marketing, analytics, and more\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"text-center\">\n            <CardHeader>\n              <div className=\"w-12 h-12 bg-green-100 dark:bg-green-900 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <Shield className=\"w-6 h-6 text-green-600 dark:text-green-400\" />\n              </div>\n              <CardTitle>Security First</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Enterprise-grade security with encryption, audit logging, and access controls\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"text-center\">\n            <CardHeader>\n              <div className=\"w-12 h-12 bg-blue-100 dark:bg-blue-900 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <Zap className=\"w-6 h-6 text-blue-600 dark:text-blue-400\" />\n              </div>\n              <CardTitle>Automation</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Automate repetitive tasks with intelligent workflows and approval systems\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"text-center\">\n            <CardHeader>\n              <div className=\"w-12 h-12 bg-orange-100 dark:bg-orange-900 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <Users className=\"w-6 h-6 text-orange-600 dark:text-orange-400\" />\n              </div>\n              <CardTitle>Neurodivergent</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Designed with clear interfaces and structured workflows for accessibility\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-8 mb-16\">\n          <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-6 text-center\">\n            Comprehensive Agent Types\n          </h3>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            <div className=\"flex items-start space-x-3\">\n              <div className=\"w-8 h-8 bg-purple-100 dark:bg-purple-900 rounded-lg flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-purple-600 dark:text-purple-400\">SM</span>\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-gray-900 dark:text-white\">Social Media Agents</h4>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">Content generation, scheduling, and engagement analysis</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-start space-x-3\">\n              <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-lg flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">EM</span>\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-gray-900 dark:text-white\">Email Marketing</h4>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">Campaign creation, automation, and performance tracking</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-start space-x-3\">\n              <div className=\"w-8 h-8 bg-green-100 dark:bg-green-900 rounded-lg flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-green-600 dark:text-green-400\">AN</span>\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-gray-900 dark:text-white\">Analytics & BI</h4>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">Data analysis, reporting, and business intelligence</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-start space-x-3\">\n              <div className=\"w-8 h-8 bg-orange-100 dark:bg-orange-900 rounded-lg flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-orange-600 dark:text-orange-400\">FS</span>\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-gray-900 dark:text-white\">File System</h4>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">Organization, backup, and monitoring</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-start space-x-3\">\n              <div className=\"w-8 h-8 bg-indigo-100 dark:bg-indigo-900 rounded-lg flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-indigo-600 dark:text-indigo-400\">DN</span>\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-gray-900 dark:text-white\">DNS Management</h4>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">Domain configuration and propagation monitoring</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-start space-x-3\">\n              <div className=\"w-8 h-8 bg-pink-100 dark:bg-pink-900 rounded-lg flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-pink-600 dark:text-pink-400\">TR</span>\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-gray-900 dark:text-white\">Traffic Monitoring</h4>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">Real-time traffic analysis and alerting</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"text-center\">\n          <div className=\"inline-flex items-center space-x-2 bg-secure/10 text-secure px-4 py-2 rounded-lg mb-4\">\n            <Shield className=\"w-4 h-4\" />\n            <span className=\"text-sm font-medium\">Enterprise Security Standards</span>\n          </div>\n          \n          <p className=\"text-gray-600 dark:text-gray-400 mb-8\">\n            Built with enterprise-grade security features including end-to-end encryption, \n            comprehensive audit logging, and role-based access controls.\n          </p>\n          \n          <Button \n            onClick={handleLogin}\n            variant=\"outline\"\n            size=\"lg\"\n            className=\"border-primary text-primary hover:bg-primary hover:text-white\"\n          >\n            Start Building Agents\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "size_bytes": 9216
    },
    "client/src/pages/NationalReserve.tsx": {
      "content": "import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Sidebar from \"@/components/Layout/Sidebar\";\nimport Header from \"@/components/Layout/Header\";\nimport { \n  Crown, Star, Shield, Target, Compass, Binoculars, Radio, Headphones, \n  Mic, Eye, Search, MessageSquare, Brain, AlertTriangle, CheckCircle,\n  Users, Activity, Zap, Send\n} from \"lucide-react\";\n\ninterface ReserveStatus {\n  totalAgents: number;\n  activeAgents: number;\n  commandStructure: Record<string, { count: number; active: number }>;\n  patternRecognitionStatus: {\n    enabled: boolean;\n    activeMonitoring: number;\n  };\n  lastActivity: string;\n}\n\ninterface PatternAnalysis {\n  leetSpeak: boolean;\n  subliminalIndicators: string[];\n  communicationStyle: string;\n  emotionalTone: string;\n  hiddenMeaning?: string;\n}\n\nexport default function NationalReserve() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n  const [conversationText, setConversationText] = useState(\"\");\n  const [analysisContext, setAnalysisContext] = useState(\"\");\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: reserveStatus, isLoading: statusLoading } = useQuery<ReserveStatus>({\n    queryKey: [\"/api/national-reserve/status\"],\n    enabled: isAuthenticated,\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  const deployMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/national-reserve/deploy\");\n    },\n    onSuccess: () => {\n      toast({\n        title: \"National Reserve Deployed\",\n        description: \"Your military-grade agent reserve has been successfully deployed\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/national-reserve/status\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/agents\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Deployment Failed\",\n        description: \"Failed to deploy National Reserve. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const analysisMutation = useMutation({\n    mutationFn: async ({ text, context }: { text: string; context?: string }): Promise<PatternAnalysis> => {\n      const response = await fetch(\"/api/national-reserve/analyze-conversation\", {\n        method: \"POST\",\n        headers: { \n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem('token') || ''}`\n        },\n        body: JSON.stringify({ conversationText: text, context }),\n      });\n      \n      if (!response.ok) {\n        throw new Error(`${response.status}: ${response.statusText}`);\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data: PatternAnalysis) => {\n      toast({\n        title: \"Analysis Complete\",\n        description: `Communication analyzed. ${data.leetSpeak ? \"Leet speak detected!\" : \"No leet speak found.\"} ${data.subliminalIndicators.length} subliminal indicators found.`,\n        variant: data.leetSpeak || data.subliminalIndicators.length > 0 ? \"destructive\" : \"default\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Analysis Failed\",\n        description: \"Failed to analyze conversation. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDeploy = () => {\n    deployMutation.mutate();\n  };\n\n  const handleAnalyze = () => {\n    if (!conversationText.trim()) {\n      toast({\n        title: \"Input Required\",\n        description: \"Please enter conversation text to analyze\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    analysisMutation.mutate({ text: conversationText, context: analysisContext });\n  };\n\n  const getRankIcon = (rank: string) => {\n    const icons: Record<string, any> = {\n      'five_star_general': Crown,\n      'general': Star,\n      'colonel': Shield,\n      'major': Target,\n      'captain': Compass,\n      'lieutenant': Binoculars,\n      'sergeant': Radio,\n      'corporal': Headphones,\n      'private_first_class': Mic,\n      'private': Eye,\n      'specialist': Brain\n    };\n    return icons[rank] || Users;\n  };\n\n  if (isLoading || statusLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"space-y-4\">\n          <div className=\"h-8 bg-muted animate-pulse rounded\" />\n          <div className=\"h-32 bg-muted animate-pulse rounded\" />\n          <div className=\"h-64 bg-muted animate-pulse rounded\" />\n        </div>\n      </div>\n    );\n  }\n\n  const isDeployed = reserveStatus && reserveStatus.totalAgents > 0;\n  const deploymentProgress = isDeployed ? 100 : 0;\n\n  return (\n    <div className=\"flex h-screen bg-gray-50 dark:bg-gray-900\">\n      <Sidebar />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden w-full\">\n        <Header \n          title=\"National Reserve\"\n          description=\"Military-grade agent hierarchy with advanced pattern recognition\"\n        />\n        \n        <main className=\"flex-1 overflow-auto p-4 lg:p-8 w-full max-w-full\">\n          <div className=\"container mx-auto space-y-8\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">National Reserve Command</h1>\n          <p className=\"text-muted-foreground\">\n            BERT-enhanced military-grade agent hierarchy with advanced reasoning and pattern recognition\n          </p>\n        </div>\n        <Badge variant={isDeployed ? \"default\" : \"secondary\"} className=\"text-lg px-4 py-2\">\n          <Crown className=\"w-4 h-4 mr-2\" />\n          {isDeployed ? \"DEPLOYED\" : \"STANDBY\"}\n        </Badge>\n      </div>\n\n      {/* Foundation Model Integration */}\n      <Card className=\"bg-gradient-to-r from-green-50 to-blue-50 dark:from-green-950 dark:to-blue-950 border-green-200 dark:border-green-800\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-green-900 dark:text-green-100\">\n            <Brain className=\"w-5 h-5\" />\n            BERT Foundation Model\n          </CardTitle>\n          <CardDescription>\n            Advanced language model providing reasoning, intent analysis, and workflow capabilities for all agents\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"text-lg font-semibold text-green-600\">Reasoning Engine</div>\n              <p className=\"text-sm text-muted-foreground\">Multi-step logical analysis</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-lg font-semibold text-blue-600\">Intent Analysis</div>\n              <p className=\"text-sm text-muted-foreground\">Understanding user requests</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-lg font-semibold text-purple-600\">Workflow Generation</div>\n              <p className=\"text-sm text-muted-foreground\">Automated task planning</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Deployment Status */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Users className=\"w-5 h-5\" />\n            Reserve Status\n          </CardTitle>\n          <CardDescription>\n            Command structure and deployment status\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between text-sm\">\n              <span>Deployment Progress</span>\n              <span>{deploymentProgress}%</span>\n            </div>\n            <Progress value={deploymentProgress} className=\"h-2\" />\n          </div>\n\n          {!isDeployed ? (\n            <div className=\"text-center py-8\">\n              <Alert>\n                <AlertTriangle className=\"h-4 w-4\" />\n                <AlertDescription>\n                  National Reserve not deployed. Deploy your military-grade agent hierarchy to begin operations.\n                </AlertDescription>\n              </Alert>\n              <Button \n                onClick={handleDeploy} \n                disabled={deployMutation.isPending}\n                className=\"mt-4\"\n                size=\"lg\"\n              >\n                {deployMutation.isPending ? (\n                  <>\n                    <Activity className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Deploying Reserve...\n                  </>\n                ) : (\n                  <>\n                    <Crown className=\"w-4 h-4 mr-2\" />\n                    Deploy National Reserve\n                  </>\n                )}\n              </Button>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">{reserveStatus.totalAgents}</div>\n                <p className=\"text-sm text-muted-foreground\">Total Agents</p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">{reserveStatus.activeAgents}</div>\n                <p className=\"text-sm text-muted-foreground\">Active Agents</p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-purple-600\">{reserveStatus.patternRecognitionStatus.activeMonitoring}</div>\n                <p className=\"text-sm text-muted-foreground\">Monitoring</p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-orange-600\">24/7</div>\n                <p className=\"text-sm text-muted-foreground\">Operational</p>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {isDeployed && (\n        <>\n          {/* Command Structure */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Command Structure</CardTitle>\n              <CardDescription>\n                Military hierarchy and agent distribution\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {Object.entries(reserveStatus.commandStructure).map(([rank, data]) => {\n                  const Icon = getRankIcon(rank);\n                  const rankName = rank.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n                  \n                  return (\n                    <div key={rank} className=\"flex items-center space-x-3 p-3 border rounded-lg\">\n                      <Icon className=\"w-8 h-8 text-blue-600\" />\n                      <div className=\"flex-1\">\n                        <div className=\"font-medium\">{rankName}</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {data.active}/{data.count} Active\n                        </div>\n                      </div>\n                      <Badge variant={data.active > 0 ? \"default\" : \"secondary\"}>\n                        {data.active > 0 ? \"READY\" : \"STANDBY\"}\n                      </Badge>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Communication Analysis */}\n          <Tabs defaultValue=\"analysis\" className=\"space-y-4\">\n            <TabsList>\n              <TabsTrigger value=\"analysis\">Communication Analysis</TabsTrigger>\n              <TabsTrigger value=\"patterns\">Pattern Recognition</TabsTrigger>\n              <TabsTrigger value=\"monitoring\">Real-time Monitoring</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"analysis\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <MessageSquare className=\"w-5 h-5\" />\n                    Conversation Analysis\n                  </CardTitle>\n                  <CardDescription>\n                    BERT-powered analysis for leet speak, subliminal communication, and advanced pattern recognition\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium\">Conversation Text</label>\n                    <Textarea\n                      placeholder=\"Paste conversation text here for analysis...\"\n                      value={conversationText}\n                      onChange={(e) => setConversationText(e.target.value)}\n                      rows={4}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium\">Context (Optional)</label>\n                    <Textarea\n                      placeholder=\"Provide context about the conversation...\"\n                      value={analysisContext}\n                      onChange={(e) => setAnalysisContext(e.target.value)}\n                      rows={2}\n                    />\n                  </div>\n\n                  <Button\n                    onClick={handleAnalyze}\n                    disabled={analysisMutation.isPending || !conversationText.trim()}\n                    className=\"w-full\"\n                  >\n                    {analysisMutation.isPending ? (\n                      <>\n                        <Activity className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Analyzing...\n                      </>\n                    ) : (\n                      <>\n                        <Send className=\"w-4 h-4 mr-2\" />\n                        Analyze Communication\n                      </>\n                    )}\n                  </Button>\n\n                  {analysisMutation.data && (\n                    <div className=\"mt-6 space-y-4\">\n                      <h4 className=\"font-medium\">Analysis Results:</h4>\n                      \n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <Card>\n                          <CardContent className=\"pt-4\">\n                            <div className=\"flex items-center justify-between\">\n                              <span className=\"text-sm\">Leet Speech Detected</span>\n                              <Badge variant={analysisMutation.data.leetSpeak ? \"destructive\" : \"default\"}>\n                                {analysisMutation.data.leetSpeak ? \"YES\" : \"NO\"}\n                              </Badge>\n                            </div>\n                          </CardContent>\n                        </Card>\n                        \n                        <Card>\n                          <CardContent className=\"pt-4\">\n                            <div className=\"flex items-center justify-between\">\n                              <span className=\"text-sm\">Communication Style</span>\n                              <Badge variant=\"outline\">\n                                {analysisMutation.data.communicationStyle.toUpperCase()}\n                              </Badge>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      </div>\n\n                      {analysisMutation.data.subliminalIndicators.length > 0 && (\n                        <Alert variant=\"destructive\">\n                          <AlertTriangle className=\"h-4 w-4\" />\n                          <AlertDescription>\n                            <strong>Subliminal Indicators Detected:</strong>\n                            <ul className=\"mt-2 list-disc list-inside\">\n                              {analysisMutation.data.subliminalIndicators.map((indicator, index) => (\n                                <li key={index} className=\"text-sm\">{indicator}</li>\n                              ))}\n                            </ul>\n                          </AlertDescription>\n                        </Alert>\n                      )}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"patterns\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Brain className=\"w-5 h-5\" />\n                    Pattern Recognition System\n                  </CardTitle>\n                  <CardDescription>\n                    Advanced recursive pattern detection and learning capabilities\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                    <div className=\"text-center\">\n                      <CheckCircle className=\"w-12 h-12 text-green-500 mx-auto mb-2\" />\n                      <h4 className=\"font-medium\">Leet Speech Detection</h4>\n                      <p className=\"text-sm text-muted-foreground\">Real-time identification of leetspeak patterns</p>\n                    </div>\n                    <div className=\"text-center\">\n                      <Search className=\"w-12 h-12 text-blue-500 mx-auto mb-2\" />\n                      <h4 className=\"font-medium\">Subliminal Analysis</h4>\n                      <p className=\"text-sm text-muted-foreground\">Detection of hidden communication patterns</p>\n                    </div>\n                    <div className=\"text-center\">\n                      <Zap className=\"w-12 h-12 text-purple-500 mx-auto mb-2\" />\n                      <h4 className=\"font-medium\">Recursive Learning</h4>\n                      <p className=\"text-sm text-muted-foreground\">Continuous pattern learning and optimization</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"monitoring\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Activity className=\"w-5 h-5\" />\n                    Real-time Monitoring\n                  </CardTitle>\n                  <CardDescription>\n                    24/7 surveillance and communication pattern monitoring\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <Alert>\n                      <CheckCircle className=\"h-4 w-4\" />\n                      <AlertDescription>\n                        All communication channels are being monitored by {reserveStatus.patternRecognitionStatus.activeMonitoring} active agents. \n                        Pattern recognition systems are operational and learning continuously.\n                      </AlertDescription>\n                    </Alert>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <Card>\n                        <CardContent className=\"pt-4\">\n                          <div className=\"text-center\">\n                            <div className=\"text-2xl font-bold text-green-600\">ACTIVE</div>\n                            <p className=\"text-sm text-muted-foreground\">Monitoring Status</p>\n                          </div>\n                        </CardContent>\n                      </Card>\n                      \n                      <Card>\n                        <CardContent className=\"pt-4\">\n                          <div className=\"text-center\">\n                            <div className=\"text-2xl font-bold text-blue-600\">24/7</div>\n                            <p className=\"text-sm text-muted-foreground\">Operational Time</p>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </>\n      )}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}",
      "size_bytes": 21921
    },
    "client/src/pages/Security.tsx": {
      "content": "import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Shield, AlertTriangle, CheckCircle, Activity, Eye, Lock, Zap, Key, Smartphone } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport TwoFactorSetup from \"@/components/Security/TwoFactorSetup\";\nimport PasswordChangeModal from \"@/components/Security/PasswordChangeModal\";\n\nexport default function Security() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [show2FASetup, setShow2FASetup] = useState(false);\n  const [showPasswordChange, setShowPasswordChange] = useState(false);\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: securityStatus } = useQuery<{\n    overallScore: number;\n    protectedAgents: number;\n    securityEvents: number;\n    lastScanTime: string;\n    complianceLevel: string;\n  }>({\n    queryKey: [\"/api/security/status\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: auditLogs } = useQuery<Array<{\n    id: number;\n    userId: string;\n    action: string;\n    resource: string;\n    ipAddress: string;\n    success: boolean;\n    createdAt: string;\n  }>>({\n    queryKey: [\"/api/security/audit-logs\"],\n    enabled: isAuthenticated,\n  });\n\n  // Password expiry check\n  const { data: passwordExpiry } = useQuery<{\n    expired: boolean;\n    daysRemaining: number;\n  }>({\n    queryKey: [\"/api/auth/password-expiry\"],\n    enabled: isAuthenticated,\n  });\n\n  // Check if password is expired and force change\n  useEffect(() => {\n    if (passwordExpiry?.expired) {\n      setShowPasswordChange(true);\n      toast({\n        title: \"Password Expired\",\n        description: \"Your password has expired. Please change it to continue.\",\n        variant: \"destructive\",\n      });\n    } else if (passwordExpiry && passwordExpiry.daysRemaining <= 7) {\n      toast({\n        title: \"Password Expiring Soon\",\n        description: `Your password expires in ${passwordExpiry.daysRemaining} days.`,\n        variant: \"destructive\",\n      });\n    }\n  }, [passwordExpiry, toast]);\n\n  const { data: threatAnalysis } = useQuery<{\n    activeThreats: number;\n    threats: Array<{\n      type: string;\n      description: string;\n      severity: string;\n      timestamp: string;\n    }>;\n    riskLevel: string;\n    lastAnalysis: string;\n  }>({\n    queryKey: [\"/api/security/threat-analysis\"],\n    enabled: isAuthenticated,\n  });\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  const securityScore = securityStatus?.overallScore ?? 0;\n  const getScoreColor = (score: number) => {\n    if (score >= 90) return \"text-green-600\";\n    if (score >= 70) return \"text-yellow-600\";\n    return \"text-red-600\";\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-8\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Security Center</h1>\n          <p className=\"text-muted-foreground\">\n            Monitor and manage security across all layers\n          </p>\n        </div>\n        <Badge variant=\"outline\" className=\"text-lg px-4 py-2\">\n          <Shield className=\"w-4 h-4 mr-2\" />\n          Security Score: <span className={getScoreColor(securityScore)}>{securityScore}/100</span>\n        </Badge>\n      </div>\n\n      {/* Security Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Threats</CardTitle>\n            <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">\n              {threatAnalysis?.activeThreats ?? 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Critical incidents detected\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Protected Agents</CardTitle>\n            <Shield className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">\n              {securityStatus?.protectedAgents ?? 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Actively monitored\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Security Events</CardTitle>\n            <Activity className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {auditLogs?.length ?? 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Last 24 hours\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Compliance Status</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">98%</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Security standards met\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Security Progress */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Security Posture</CardTitle>\n          <CardDescription>\n            Overall security health across all OSI layers\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between text-sm\">\n              <span>Overall Security Score</span>\n              <span className={getScoreColor(securityScore)}>{securityScore}%</span>\n            </div>\n            <Progress value={securityScore} className=\"h-2\" />\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-6\">\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span>Network Security</span>\n                <span className=\"text-green-600\">100%</span>\n              </div>\n              <Progress value={100} className=\"h-1\" />\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span>Application Security</span>\n                <span className=\"text-green-600\">100%</span>\n              </div>\n              <Progress value={100} className=\"h-1\" />\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span>Data Protection</span>\n                <span className=\"text-green-600\">100%</span>\n              </div>\n              <Progress value={100} className=\"h-1\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Tabs defaultValue=\"threats\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"threats\">Threat Detection</TabsTrigger>\n          <TabsTrigger value=\"authentication\">Authentication</TabsTrigger>\n          <TabsTrigger value=\"audit\">Audit Logs</TabsTrigger>\n          <TabsTrigger value=\"compliance\">Compliance</TabsTrigger>\n          <TabsTrigger value=\"monitoring\">Real-time Monitoring</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"threats\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <AlertTriangle className=\"w-5 h-5\" />\n                Active Threat Analysis\n              </CardTitle>\n              <CardDescription>\n                Real-time threat detection and response\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {threatAnalysis?.threats && threatAnalysis.threats.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {threatAnalysis.threats.map((threat, index: number) => (\n                    <Alert key={index} variant={threat.severity === 'high' ? 'destructive' : 'default'}>\n                      <AlertTriangle className=\"h-4 w-4\" />\n                      <AlertDescription>\n                        <div className=\"flex justify-between items-start\">\n                          <div>\n                            <strong>{threat.type}</strong>: {threat.description}\n                            <div className=\"text-sm text-muted-foreground mt-1\">\n                              Detected: {threat.timestamp}\n                            </div>\n                          </div>\n                          <Badge variant={threat.severity === 'high' ? 'destructive' : 'secondary'}>\n                            {threat.severity}\n                          </Badge>\n                        </div>\n                      </AlertDescription>\n                    </Alert>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <CheckCircle className=\"w-16 h-16 text-green-500 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No Active Threats</h3>\n                  <p className=\"text-muted-foreground\">\n                    Your system is secure and all monitoring systems are operational.\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"authentication\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Two-Factor Authentication */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Smartphone className=\"w-5 h-5\" />\n                  Two-Factor Authentication\n                </CardTitle>\n                <CardDescription>\n                  Add an extra layer of security to your account\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Check user's 2FA status here - mock for now */}\n                <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Shield className=\"w-5 h-5 text-gray-400\" />\n                    <div>\n                      <p className=\"font-medium\">Authenticator App</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Use an app like Google Authenticator\n                      </p>\n                    </div>\n                  </div>\n                  <Badge variant=\"outline\">Not Enabled</Badge>\n                </div>\n                \n                <Button onClick={() => setShow2FASetup(true)} className=\"w-full\">\n                  <Key className=\"w-4 h-4 mr-2\" />\n                  Enable Two-Factor Authentication\n                </Button>\n                \n                <Alert>\n                  <Shield className=\"w-4 h-4\" />\n                  <AlertDescription>\n                    Two-factor authentication significantly increases your account security by requiring a second verification step during login.\n                  </AlertDescription>\n                </Alert>\n              </CardContent>\n            </Card>\n\n            {/* Password Management */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Lock className=\"w-5 h-5\" />\n                  Password Management\n                </CardTitle>\n                <CardDescription>\n                  Secure password policies and management\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div>\n                      <p className=\"font-medium\">Password Age</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {passwordExpiry?.daysRemaining !== undefined \n                          ? `${passwordExpiry.daysRemaining} days remaining`\n                          : \"Not set\"\n                        }\n                      </p>\n                    </div>\n                    {passwordExpiry?.expired && (\n                      <Badge variant=\"destructive\">Expired</Badge>\n                    )}\n                    {passwordExpiry && passwordExpiry.daysRemaining <= 7 && !passwordExpiry.expired && (\n                      <Badge variant=\"destructive\">Expiring Soon</Badge>\n                    )}\n                    {passwordExpiry && passwordExpiry.daysRemaining > 7 && (\n                      <Badge variant=\"outline\">Valid</Badge>\n                    )}\n                  </div>\n\n                  <Button \n                    onClick={() => setShowPasswordChange(true)} \n                    variant=\"outline\" \n                    className=\"w-full\"\n                  >\n                    <Lock className=\"w-4 h-4 mr-2\" />\n                    Change Password\n                  </Button>\n                </div>\n\n                <Alert>\n                  <AlertTriangle className=\"w-4 h-4\" />\n                  <AlertDescription>\n                    <strong>Password Policy:</strong> Passwords must be changed every 90 days and meet complexity requirements (12+ characters, uppercase, lowercase, numbers, special characters).\n                  </AlertDescription>\n                </Alert>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Security Sessions */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Activity className=\"w-5 h-5\" />\n                Active Sessions\n              </CardTitle>\n              <CardDescription>\n                Monitor and manage your active login sessions\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-3 h-3 bg-green-500 rounded-full\" />\n                    <div>\n                      <p className=\"font-medium\">Current Session</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Active now • Session timeout: 1 hour\n                      </p>\n                    </div>\n                  </div>\n                  <Badge variant=\"default\">Active</Badge>\n                </div>\n                \n                <Button variant=\"outline\" className=\"w-full\">\n                  <Zap className=\"w-4 h-4 mr-2\" />\n                  Revoke All Other Sessions\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"audit\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Eye className=\"w-5 h-5\" />\n                Security Audit Log\n              </CardTitle>\n              <CardDescription>\n                Comprehensive activity tracking and compliance logging\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ScrollArea className=\"h-96\">\n                <div className=\"space-y-4\">\n                  {auditLogs?.map((log, index: number) => (\n                    <div key={index} className=\"flex items-start space-x-4 p-4 border rounded-lg\">\n                      <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0\" />\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center justify-between\">\n                          <p className=\"text-sm font-medium\">{log.action}</p>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {log.resource}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-muted-foreground\">\n                          User: {log.userId} • IP: {log.ipAddress}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          {new Date(log.createdAt).toLocaleString()}\n                        </p>\n                      </div>\n                      <Badge variant={log.success ? \"default\" : \"destructive\"}>\n                        {log.success ? \"Success\" : \"Failed\"}\n                      </Badge>\n                    </div>\n                  )) || (\n                    <div className=\"text-center py-12\">\n                      <Activity className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-semibold mb-2\">No Recent Activity</h3>\n                      <p className=\"text-muted-foreground\">\n                        Security events will appear here as they occur.\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </ScrollArea>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"compliance\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Lock className=\"w-5 h-5\" />\n                  Security Standards\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span>ISO 27001 Compliance</span>\n                  <Badge variant=\"default\">Compliant</Badge>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span>SOC 2 Type II</span>\n                  <Badge variant=\"default\">Certified</Badge>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span>GDPR Compliance</span>\n                  <Badge variant=\"default\">Compliant</Badge>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span>OWASP Top 10</span>\n                  <Badge variant=\"secondary\">In Progress</Badge>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Security Policies</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span>Password Policy</span>\n                  <Badge variant=\"default\">Active</Badge>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span>Multi-Factor Authentication</span>\n                  <Badge variant=\"default\">Enforced</Badge>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span>Data Encryption</span>\n                  <Badge variant=\"default\">AES-256</Badge>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span>Access Control</span>\n                  <Badge variant=\"default\">RBAC</Badge>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"monitoring\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Zap className=\"w-5 h-5\" />\n                Real-time Security Monitoring\n              </CardTitle>\n              <CardDescription>\n                Live security metrics and system health\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-green-600\">99.9%</div>\n                  <p className=\"text-sm text-muted-foreground\">System Uptime</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-blue-600\">24/7</div>\n                  <p className=\"text-sm text-muted-foreground\">Monitoring Active</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-purple-600\">&lt;2ms</div>\n                  <p className=\"text-sm text-muted-foreground\">Response Time</p>\n                </div>\n              </div>\n              \n              <div className=\"mt-8\">\n                <Alert>\n                  <CheckCircle className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    All security systems are operational. No immediate action required.\n                  </AlertDescription>\n                </Alert>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Quick Actions */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Security Actions</CardTitle>\n          <CardDescription>\n            Quick access to essential security functions\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-wrap gap-4\">\n            <Button variant=\"outline\">\n              <Shield className=\"w-4 h-4 mr-2\" />\n              Run Security Scan\n            </Button>\n            <Button variant=\"outline\">\n              <Lock className=\"w-4 h-4 mr-2\" />\n              Review Permissions\n            </Button>\n            <Button variant=\"outline\">\n              <Activity className=\"w-4 h-4 mr-2\" />\n              Generate Report\n            </Button>\n            <Button variant=\"outline\">\n              <AlertTriangle className=\"w-4 h-4 mr-2\" />\n              Incident Response\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* 2FA Setup Modal */}\n      {show2FASetup && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n          <div className=\"bg-white dark:bg-gray-900 rounded-lg shadow-lg w-full max-w-4xl max-h-[90vh] overflow-y-auto m-4\">\n            <div className=\"max-h-[calc(90vh-2rem)] overflow-y-auto\">\n              <TwoFactorSetup\n                onComplete={() => {\n                  setShow2FASetup(false);\n                  toast({\n                    title: \"2FA Enabled\",\n                    description: \"Two-factor authentication has been successfully enabled for your account\",\n                  });\n                }}\n                onCancel={() => setShow2FASetup(false)}\n              />\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Password Change Modal */}\n      <PasswordChangeModal\n        isOpen={showPasswordChange}\n        onClose={() => setShowPasswordChange(false)}\n        isForced={passwordExpiry?.expired || false}\n        userHas2FA={false} // TODO: Get from user data\n      />\n    </div>\n  );\n}",
      "size_bytes": 24719
    },
    "client/src/pages/Settings.tsx": {
      "content": "import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/Layout/Sidebar\";\nimport Header from \"@/components/Layout/Header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { User, Shield, Bell, Palette, Database } from \"lucide-react\";\n\nexport default function Settings() {\n  const { isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const [settings, setSettings] = useState({\n    profile: {\n      name: \"Agent Administrator\",\n      email: \"admin@agentfactory.com\",\n      role: \"System Administrator\",\n    },\n    security: {\n      twoFactorAuth: true,\n      sessionTimeout: 30,\n      securityAlerts: true,\n    },\n    notifications: {\n      emailNotifications: true,\n      pushNotifications: false,\n      securityAlerts: true,\n      taskUpdates: true,\n    },\n    appearance: {\n      theme: \"system\",\n      language: \"en\",\n      timezone: \"UTC\",\n    },\n    system: {\n      autoBackup: true,\n      debugMode: false,\n      performanceMonitoring: true,\n    }\n  });\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const handleSaveSettings = () => {\n    toast({\n      title: \"Settings Saved\",\n      description: \"Your settings have been updated successfully\",\n    });\n  };\n\n  const handleResetSettings = () => {\n    toast({\n      title: \"Settings Reset\",\n      description: \"Settings have been reset to defaults\",\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen bg-gray-50 dark:bg-gray-900\">\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n            <p className=\"text-gray-600 dark:text-gray-300\">Loading settings...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-gray-50 dark:bg-gray-900\">\n      <Sidebar />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Settings\"\n          description=\"Configure your agent factory platform settings\"\n        />\n        \n        <main className=\"flex-1 overflow-auto p-8\">\n          <div className=\"max-w-4xl mx-auto\">\n            <Tabs defaultValue=\"profile\" className=\"space-y-6\">\n              <TabsList className=\"grid w-full grid-cols-5 gap-1 p-1\">\n                <TabsTrigger value=\"profile\" className=\"flex flex-col items-center justify-center min-h-[3rem] px-2\">\n                  <User className=\"w-4 h-4\" />\n                  <span className=\"text-xs font-medium mt-1\">Profile</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"security\" className=\"flex flex-col items-center justify-center min-h-[3rem] px-2\">\n                  <Shield className=\"w-4 h-4\" />\n                  <span className=\"text-xs font-medium mt-1\">Security</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"notifications\" className=\"flex flex-col items-center justify-center min-h-[3rem] px-2\">\n                  <Bell className=\"w-4 h-4\" />\n                  <span className=\"text-xs font-medium mt-1\">Notifications</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"appearance\" className=\"flex flex-col items-center justify-center min-h-[3rem] px-2\">\n                  <Palette className=\"w-4 h-4\" />\n                  <span className=\"text-xs font-medium mt-1\">Appearance</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"system\" className=\"flex flex-col items-center justify-center min-h-[3rem] px-2\">\n                  <Database className=\"w-4 h-4\" />\n                  <span className=\"text-xs font-medium mt-1\">System</span>\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"profile\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Profile Information</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"name\">Full Name</Label>\n                      <Input\n                        id=\"name\"\n                        value={settings.profile.name}\n                        onChange={(e) => setSettings({\n                          ...settings,\n                          profile: { ...settings.profile, name: e.target.value }\n                        })}\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"email\">Email Address</Label>\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        value={settings.profile.email}\n                        onChange={(e) => setSettings({\n                          ...settings,\n                          profile: { ...settings.profile, email: e.target.value }\n                        })}\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"role\">Role</Label>\n                      <Input\n                        id=\"role\"\n                        value={settings.profile.role}\n                        disabled\n                      />\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"security\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Security Settings</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <Label>Two-Factor Authentication</Label>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Add an extra layer of security to your account\n                        </p>\n                      </div>\n                      <Switch\n                        checked={settings.security.twoFactorAuth}\n                        onCheckedChange={(checked) => setSettings({\n                          ...settings,\n                          security: { ...settings.security, twoFactorAuth: checked }\n                        })}\n                      />\n                    </div>\n                    <Separator />\n                    <div className=\"space-y-2\">\n                      <Label>Session Timeout (minutes)</Label>\n                      <Select\n                        value={settings.security.sessionTimeout.toString()}\n                        onValueChange={(value) => setSettings({\n                          ...settings,\n                          security: { ...settings.security, sessionTimeout: parseInt(value) }\n                        })}\n                      >\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"15\">15 minutes</SelectItem>\n                          <SelectItem value=\"30\">30 minutes</SelectItem>\n                          <SelectItem value=\"60\">1 hour</SelectItem>\n                          <SelectItem value=\"120\">2 hours</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <Separator />\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <Label>Security Alerts</Label>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Receive alerts for suspicious activities\n                        </p>\n                      </div>\n                      <Switch\n                        checked={settings.security.securityAlerts}\n                        onCheckedChange={(checked) => setSettings({\n                          ...settings,\n                          security: { ...settings.security, securityAlerts: checked }\n                        })}\n                      />\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"notifications\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Notification Preferences</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <Label>Email Notifications</Label>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Receive updates via email\n                        </p>\n                      </div>\n                      <Switch\n                        checked={settings.notifications.emailNotifications}\n                        onCheckedChange={(checked) => setSettings({\n                          ...settings,\n                          notifications: { ...settings.notifications, emailNotifications: checked }\n                        })}\n                      />\n                    </div>\n                    <Separator />\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <Label>Task Updates</Label>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Notifications when tasks complete\n                        </p>\n                      </div>\n                      <Switch\n                        checked={settings.notifications.taskUpdates}\n                        onCheckedChange={(checked) => setSettings({\n                          ...settings,\n                          notifications: { ...settings.notifications, taskUpdates: checked }\n                        })}\n                      />\n                    </div>\n                    <Separator />\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <Label>Security Alerts</Label>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Critical security notifications\n                        </p>\n                      </div>\n                      <Switch\n                        checked={settings.notifications.securityAlerts}\n                        onCheckedChange={(checked) => setSettings({\n                          ...settings,\n                          notifications: { ...settings.notifications, securityAlerts: checked }\n                        })}\n                      />\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"appearance\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Appearance Settings</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    <div className=\"space-y-2\">\n                      <Label>Theme</Label>\n                      <Select\n                        value={settings.appearance.theme}\n                        onValueChange={(value) => setSettings({\n                          ...settings,\n                          appearance: { ...settings.appearance, theme: value }\n                        })}\n                      >\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"light\">Light</SelectItem>\n                          <SelectItem value=\"dark\">Dark</SelectItem>\n                          <SelectItem value=\"system\">System</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <Separator />\n                    <div className=\"space-y-2\">\n                      <Label>Language</Label>\n                      <Select\n                        value={settings.appearance.language}\n                        onValueChange={(value) => setSettings({\n                          ...settings,\n                          appearance: { ...settings.appearance, language: value }\n                        })}\n                      >\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"en\">English</SelectItem>\n                          <SelectItem value=\"es\">Spanish</SelectItem>\n                          <SelectItem value=\"fr\">French</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <Separator />\n                    <div className=\"space-y-2\">\n                      <Label>Timezone</Label>\n                      <Select\n                        value={settings.appearance.timezone}\n                        onValueChange={(value) => setSettings({\n                          ...settings,\n                          appearance: { ...settings.appearance, timezone: value }\n                        })}\n                      >\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"UTC\">UTC</SelectItem>\n                          <SelectItem value=\"EST\">Eastern Time</SelectItem>\n                          <SelectItem value=\"PST\">Pacific Time</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"system\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>System Configuration</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <Label>Auto Backup</Label>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Automatically backup system data\n                        </p>\n                      </div>\n                      <Switch\n                        checked={settings.system.autoBackup}\n                        onCheckedChange={(checked) => setSettings({\n                          ...settings,\n                          system: { ...settings.system, autoBackup: checked }\n                        })}\n                      />\n                    </div>\n                    <Separator />\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <Label>Performance Monitoring</Label>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Monitor system performance metrics\n                        </p>\n                      </div>\n                      <Switch\n                        checked={settings.system.performanceMonitoring}\n                        onCheckedChange={(checked) => setSettings({\n                          ...settings,\n                          system: { ...settings.system, performanceMonitoring: checked }\n                        })}\n                      />\n                    </div>\n                    <Separator />\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <Label>Debug Mode</Label>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Enable detailed logging for troubleshooting\n                        </p>\n                      </div>\n                      <Switch\n                        checked={settings.system.debugMode}\n                        onCheckedChange={(checked) => setSettings({\n                          ...settings,\n                          system: { ...settings.system, debugMode: checked }\n                        })}\n                      />\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n\n            <div className=\"flex justify-end space-x-4 pt-6\">\n              <Button variant=\"outline\" onClick={handleResetSettings}>\n                Reset to Defaults\n              </Button>\n              <Button onClick={handleSaveSettings}>\n                Save Settings\n              </Button>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}",
      "size_bytes": 18072
    },
    "client/src/pages/TaskQueue.tsx": {
      "content": "import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/Layout/Sidebar\";\nimport Header from \"@/components/Layout/Header\";\nimport TaskCard from \"@/components/TaskQueue/TaskCard\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Task } from \"@/types/task\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { RefreshCw, Filter } from \"lucide-react\";\n\ntype TaskStatus = \"all\" | \"pending\" | \"processing\" | \"completed\" | \"failed\";\n\nexport default function TaskQueue() {\n  const { isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [activeTab, setActiveTab] = useState<TaskStatus>(\"all\");\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: tasks, isLoading: tasksLoading, error: tasksError } = useQuery<Task[]>({\n    queryKey: [\"/api/tasks\"],\n    enabled: isAuthenticated,\n    refetchInterval: 5000, // Refresh every 5 seconds\n  });\n\n  const updateTaskMutation = useMutation({\n    mutationFn: async ({ taskId, status }: { taskId: number; status: string }) => {\n      await apiRequest(\"PUT\", `/api/tasks/${taskId}`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      toast({\n        title: \"Success\",\n        description: \"Task status updated successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update task status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleStatusChange = (taskId: number, status: string) => {\n    updateTaskMutation.mutate({ taskId, status });\n  };\n\n  const handleRefresh = () => {\n    queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n  };\n\n  const filteredTasks = tasks?.filter(task => \n    activeTab === \"all\" || task.status === activeTab\n  ) || [];\n\n  const getTaskCountByStatus = (status: TaskStatus) => {\n    if (status === \"all\") return tasks?.length || 0;\n    return tasks?.filter(task => task.status === status).length || 0;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen bg-gray-50 dark:bg-gray-900\">\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n            <p className=\"text-gray-600 dark:text-gray-300\">Loading task queue...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-gray-50 dark:bg-gray-900\">\n      <Sidebar />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Task Queue\"\n          description=\"Monitor and manage all agent tasks and workflows\"\n        />\n        \n        <main className=\"flex-1 overflow-auto p-8\">\n          <div className=\"max-w-7xl mx-auto\">\n            <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700\">\n              <div className=\"p-6 border-b border-gray-200 dark:border-gray-700\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                    Task Management\n                  </h3>\n                  <div className=\"flex items-center space-x-3\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={handleRefresh}\n                      disabled={tasksLoading}\n                    >\n                      <RefreshCw className={`w-4 h-4 mr-2 ${tasksLoading ? 'animate-spin' : ''}`} />\n                      Refresh\n                    </Button>\n                    <Button variant=\"outline\" size=\"sm\">\n                      <Filter className=\"w-4 h-4 mr-2\" />\n                      Filter\n                    </Button>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"p-6\">\n                <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as TaskStatus)}>\n                  <TabsList className=\"grid w-full grid-cols-5 gap-1 p-1\">\n                    <TabsTrigger value=\"all\" className=\"relative flex flex-col items-center justify-center min-h-[3rem] px-2\">\n                      <span className=\"text-xs font-medium\">All Tasks</span>\n                      <span className=\"bg-gray-100 dark:bg-gray-700 text-xs px-1.5 py-0.5 rounded-full mt-1\">\n                        {getTaskCountByStatus(\"all\")}\n                      </span>\n                    </TabsTrigger>\n                    <TabsTrigger value=\"pending\" className=\"relative flex flex-col items-center justify-center min-h-[3rem] px-2\">\n                      <span className=\"text-xs font-medium\">Pending</span>\n                      <span className=\"bg-warning/10 text-warning text-xs px-1.5 py-0.5 rounded-full mt-1\">\n                        {getTaskCountByStatus(\"pending\")}\n                      </span>\n                    </TabsTrigger>\n                    <TabsTrigger value=\"processing\" className=\"relative flex flex-col items-center justify-center min-h-[3rem] px-2\">\n                      <span className=\"text-xs font-medium\">Processing</span>\n                      <span className=\"bg-blue-100 text-blue-600 text-xs px-1.5 py-0.5 rounded-full mt-1\">\n                        {getTaskCountByStatus(\"processing\")}\n                      </span>\n                    </TabsTrigger>\n                    <TabsTrigger value=\"completed\" className=\"relative flex flex-col items-center justify-center min-h-[3rem] px-2\">\n                      <span className=\"text-xs font-medium\">Completed</span>\n                      <span className=\"bg-success/10 text-success text-xs px-1.5 py-0.5 rounded-full mt-1\">\n                        {getTaskCountByStatus(\"completed\")}\n                      </span>\n                    </TabsTrigger>\n                    <TabsTrigger value=\"failed\" className=\"relative flex flex-col items-center justify-center min-h-[3rem] px-2\">\n                      <span className=\"text-xs font-medium\">Failed</span>\n                      <span className=\"bg-error/10 text-error text-xs px-1.5 py-0.5 rounded-full mt-1\">\n                        {getTaskCountByStatus(\"failed\")}\n                      </span>\n                    </TabsTrigger>\n                  </TabsList>\n                  \n                  <div className=\"mt-6\">\n                    <TabsContent value={activeTab} className=\"mt-0\">\n                      {tasksLoading ? (\n                        <div className=\"space-y-4\">\n                          {[...Array(5)].map((_, i) => (\n                            <Card key={i}>\n                              <CardContent className=\"p-6\">\n                                <div className=\"flex items-start justify-between\">\n                                  <div className=\"flex-1 space-y-3\">\n                                    <div className=\"flex items-center space-x-3\">\n                                      <Skeleton className=\"h-6 w-48\" />\n                                      <Skeleton className=\"h-5 w-16\" />\n                                      <Skeleton className=\"h-5 w-12\" />\n                                    </div>\n                                    <Skeleton className=\"h-4 w-96\" />\n                                    <div className=\"flex space-x-4\">\n                                      <Skeleton className=\"h-3 w-20\" />\n                                      <Skeleton className=\"h-3 w-24\" />\n                                    </div>\n                                  </div>\n                                  <div className=\"flex space-x-2\">\n                                    <Skeleton className=\"h-8 w-16\" />\n                                    <Skeleton className=\"h-8 w-8\" />\n                                  </div>\n                                </div>\n                              </CardContent>\n                            </Card>\n                          ))}\n                        </div>\n                      ) : tasksError ? (\n                        <div className=\"text-center py-8\">\n                          <p className=\"text-error mb-4\">Failed to load tasks</p>\n                          <Button variant=\"outline\" onClick={handleRefresh}>\n                            Retry\n                          </Button>\n                        </div>\n                      ) : filteredTasks.length === 0 ? (\n                        <div className=\"text-center py-12\">\n                          <p className=\"text-gray-500 dark:text-gray-400 text-lg mb-2\">\n                            No {activeTab === \"all\" ? \"\" : activeTab} tasks found\n                          </p>\n                          <p className=\"text-sm text-gray-400 dark:text-gray-500\">\n                            Tasks will appear here as agents complete their work\n                          </p>\n                        </div>\n                      ) : (\n                        <div className=\"space-y-4\">\n                          {filteredTasks.map((task) => (\n                            <TaskCard\n                              key={task.id}\n                              task={task}\n                              onStatusChange={handleStatusChange}\n                            />\n                          ))}\n                        </div>\n                      )}\n                    </TabsContent>\n                  </div>\n                </Tabs>\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n",
      "size_bytes": 10770
    },
    "client/src/pages/not-found.tsx": {
      "content": "import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
      "size_bytes": 711
    },
    "client/src/types/agent.ts": {
      "content": "export interface Agent {\n  id: number;\n  name: string;\n  description?: string;\n  typeId?: number;\n  userId?: string;\n  status: \"inactive\" | \"active\" | \"error\" | \"paused\";\n  priority: \"low\" | \"medium\" | \"high\";\n  configuration?: Record<string, any>;\n  securityConfig?: Record<string, any>;\n  lastActivity?: Date;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\nexport interface AgentType {\n  id: number;\n  name: string;\n  description?: string;\n  category: string;\n  icon?: string;\n  color?: string;\n  isActive?: boolean;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\nexport interface CreateAgentRequest {\n  name: string;\n  description?: string;\n  typeId?: number;\n  priority: \"low\" | \"medium\" | \"high\";\n  configuration?: Record<string, any>;\n  securityConfig?: {\n    approvalRequired?: boolean;\n    encryption?: boolean;\n    rateLimiting?: boolean;\n    auditLogging?: boolean;\n  };\n}\n\nexport interface AgentStats {\n  activeAgents: number;\n  tasksProcessed: number;\n  pendingApprovals: number;\n  systemUptime: number;\n}\n",
      "size_bytes": 1010
    },
    "client/src/types/task.ts": {
      "content": "export interface Task {\n  id: number;\n  agentId?: number;\n  userId?: string;\n  type: string;\n  title: string;\n  description?: string;\n  status: \"pending\" | \"processing\" | \"completed\" | \"failed\" | \"cancelled\";\n  priority: \"low\" | \"medium\" | \"high\";\n  payload?: Record<string, any>;\n  result?: Record<string, any>;\n  error?: string;\n  scheduledFor?: Date;\n  startedAt?: Date;\n  completedAt?: Date;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\nexport interface Approval {\n  id: number;\n  taskId?: number;\n  agentId?: number;\n  userId?: string;\n  type: string;\n  title: string;\n  description?: string;\n  status: \"pending\" | \"approved\" | \"rejected\";\n  requestData?: Record<string, any>;\n  suggestedResponse?: string;\n  reviewedBy?: string;\n  reviewedAt?: Date;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\nexport interface Activity {\n  id: number;\n  userId?: string;\n  agentId?: number;\n  taskId?: number;\n  type: string;\n  message: string;\n  metadata?: Record<string, any>;\n  createdAt?: Date;\n}\n\nexport interface CreateTaskRequest {\n  agentId?: number;\n  type: string;\n  title: string;\n  description?: string;\n  priority?: \"low\" | \"medium\" | \"high\";\n  payload?: Record<string, any>;\n  scheduledFor?: Date;\n}\n",
      "size_bytes": 1201
    },
    "multimodal-agent-builder/src/agents/__init__.py": {
      "content": "",
      "size_bytes": 0
    },
    "multimodal-agent-builder/src/agents/agent_factory.py": {
      "content": "\"\"\"Factory for creating different types of agents.\"\"\"\n\nfrom enum import Enum\nfrom typing import Any, Dict, List, Optional, Union\n\nfrom langchain.tools import BaseTool\n\nfrom config.config import settings\nfrom src.agents.base_agent import AgentConfig, BaseAgent\nfrom src.agents.langchain_agent import LangChainAgent, LangChainAgentConfig\nfrom src.agents.multimodal_agent import MultimodalAgent, MultimodalAgentConfig\nfrom src.models.base_llm import BaseLLMClient\nfrom src.models.claude_client import ClaudeClient\nfrom src.models.gemini_client import GeminiClient\nfrom src.models.openai_client import OpenAIClient\n\n\nclass AgentType(Enum):\n    \"\"\"Available agent types.\"\"\"\n    BASE = \"base\"\n    MULTIMODAL = \"multimodal\"\n    LANGCHAIN = \"langchain\"\n    CUSTOM = \"custom\"\n    SIMPLE = \"simple\"\n\n\nclass LLMProvider(Enum):\n    \"\"\"Available LLM providers.\"\"\"\n    OPENAI = \"openai\"\n    GEMINI = \"gemini\"\n    ANTHROPIC = \"anthropic\"\n    CLAUDE = \"claude\"  # Alias for anthropic\n\n\nclass AgentFactory:\n    \"\"\"Factory for creating AI agents.\"\"\"\n    \n    @staticmethod\n    def create_llm_client(\n        provider: Union[str, LLMProvider],\n        model: Optional[str] = None,\n        **kwargs\n    ) -> BaseLLMClient:\n        \"\"\"Create an LLM client.\n        \n        Args:\n            provider: LLM provider name or enum\n            model: Optional model name\n            **kwargs: Additional parameters for the client\n            \n        Returns:\n            LLM client instance\n            \n        Raises:\n            ValueError: If provider is not supported\n        \"\"\"\n        # Convert string to enum if needed\n        if isinstance(provider, str):\n            provider = provider.lower()\n            if provider == \"claude\":\n                provider = \"anthropic\"\n        else:\n            provider = provider.value\n        \n        if provider == \"openai\":\n            return OpenAIClient(model=model, **kwargs)\n        elif provider == \"gemini\":\n            return GeminiClient(model=model, **kwargs)\n        elif provider in [\"anthropic\", \"claude\"]:\n            return ClaudeClient(model=model, **kwargs)\n        else:\n            raise ValueError(f\"Unknown provider: {provider}\")\n    \n    @staticmethod\n    def create_agent(\n        name: str,\n        agent_type: Union[str, AgentType] = AgentType.MULTIMODAL,\n        provider: Union[str, LLMProvider] = LLMProvider.OPENAI,\n        model: Optional[str] = None,\n        description: str = \"\",\n        system_prompt: Optional[str] = None,\n        tools: Optional[List[Any]] = None,\n        **kwargs\n    ) -> BaseAgent:\n        \"\"\"Create an AI agent.\n        \n        Args:\n            name: Agent name\n            agent_type: Type of agent to create\n            provider: LLM provider\n            model: Optional model name\n            description: Agent description\n            system_prompt: Optional system prompt\n            tools: Optional list of tools\n            **kwargs: Additional configuration parameters\n            \n        Returns:\n            Agent instance\n            \n        Raises:\n            ValueError: If agent type is not supported\n        \"\"\"\n        # Support alias 'type' provided by callers\n        if \"type\" in kwargs and (not isinstance(agent_type, str) or agent_type == AgentType.MULTIMODAL):\n            agent_type = kwargs.pop(\"type\")\n        # Normalize agent_type to string\n        if isinstance(agent_type, str):\n            agent_type = agent_type.lower()\n        else:\n            agent_type = agent_type.value\n        \n        # Create LLM client\n        llm_client = AgentFactory.create_llm_client(provider, model, **kwargs)\n        \n        # Create appropriate config based on agent type\n        if agent_type in [\"multimodal\", AgentType.MULTIMODAL.value]:\n            config = MultimodalAgentConfig(\n                name=name,\n                description=description,\n                model_provider=provider if isinstance(provider, str) else provider.value,\n                model=model,\n                system_prompt=system_prompt,\n                **kwargs\n            )\n            return MultimodalAgent(config, llm_client, tools)\n        \n        elif agent_type in [\"langchain\", AgentType.LANGCHAIN.value]:\n            config = LangChainAgentConfig(\n                name=name,\n                description=description,\n                model_provider=provider if isinstance(provider, str) else provider.value,\n                model=model,\n                system_prompt=system_prompt,\n                **kwargs\n            )\n            return LangChainAgent(config, llm_client, tools)\n        \n        elif agent_type in [\"base\", AgentType.BASE.value, \"simple\", AgentType.SIMPLE.value]:\n            config = AgentConfig(\n                name=name,\n                description=description,\n                model_provider=provider if isinstance(provider, str) else provider.value,\n                model=model,\n                system_prompt=system_prompt,\n                **kwargs\n            )\n            # Base is abstract, so create a simple implementation\n            from src.agents.simple_agent import SimpleAgent\n            return SimpleAgent(config, llm_client, tools)\n        \n        else:\n            raise ValueError(f\"Unknown agent type: {agent_type}\")\n\n    @staticmethod\n    def create_simple_agent(\n        name: str,\n        provider: Union[str, LLMProvider] = LLMProvider.OPENAI,\n        model: Optional[str] = None,\n        description: str = \"\",\n        system_prompt: Optional[str] = None,\n        **kwargs\n    ) -> BaseAgent:\n        \"\"\"Create a simple (base) agent.\"\"\"\n        return AgentFactory.create_agent(\n            name=name,\n            agent_type=\"simple\",\n            provider=provider,\n            model=model,\n            description=description,\n            system_prompt=system_prompt,\n            **kwargs\n        )\n    \n    @staticmethod\n    def create_multimodal_agent(\n        name: str,\n        provider: Union[str, LLMProvider] = LLMProvider.OPENAI,\n        model: Optional[str] = None,\n        enable_vision: bool = True,\n        enable_audio: bool = True,\n        **kwargs\n    ) -> MultimodalAgent:\n        \"\"\"Create a multimodal agent.\n        \n        Args:\n            name: Agent name\n            provider: LLM provider\n            model: Optional model name\n            enable_vision: Enable vision processing\n            enable_audio: Enable audio processing\n            **kwargs: Additional configuration\n            \n        Returns:\n            Multimodal agent instance\n        \"\"\"\n        return AgentFactory.create_agent(\n            name=name,\n            agent_type=AgentType.MULTIMODAL,\n            provider=provider,\n            model=model,\n            enable_vision=enable_vision,\n            enable_audio=enable_audio,\n            **kwargs\n        )\n    \n    @staticmethod\n    def create_langchain_agent(\n        name: str,\n        provider: Union[str, LLMProvider] = LLMProvider.OPENAI,\n        model: Optional[str] = None,\n        tools: Optional[List[BaseTool]] = None,\n        enable_search: bool = True,\n        enable_calculator: bool = True,\n        **kwargs\n    ) -> LangChainAgent:\n        \"\"\"Create a LangChain agent with tools.\n        \n        Args:\n            name: Agent name\n            provider: LLM provider\n            model: Optional model name\n            tools: Optional list of LangChain tools\n            enable_search: Enable web search\n            enable_calculator: Enable calculator\n            **kwargs: Additional configuration\n            \n        Returns:\n            LangChain agent instance\n        \"\"\"\n        return AgentFactory.create_agent(\n            name=name,\n            agent_type=AgentType.LANGCHAIN,\n            provider=provider,\n            model=model,\n            tools=tools,\n            enable_search=enable_search,\n            enable_calculator=enable_calculator,\n            **kwargs\n        )\n    \n    @staticmethod\n    def create_agent_from_config(config: Dict[str, Any]) -> BaseAgent:\n        \"\"\"Create an agent from a configuration dictionary.\n        \n        Args:\n            config: Configuration dictionary\n            \n        Returns:\n            Agent instance\n        \"\"\"\n        # Extract required fields\n        name = config.get(\"name\", \"Agent\")\n        agent_type = config.get(\"type\", \"multimodal\")\n        provider = config.get(\"provider\", \"openai\")\n        \n        # Extract optional fields\n        model = config.get(\"model\")\n        description = config.get(\"description\", \"\")\n        system_prompt = config.get(\"system_prompt\")\n        tools = config.get(\"tools\", [])\n        \n        # Get additional configuration\n        agent_config = config.get(\"config\", {})\n        \n        return AgentFactory.create_agent(\n            name=name,\n            agent_type=agent_type,\n            provider=provider,\n            model=model,\n            description=description,\n            system_prompt=system_prompt,\n            tools=tools,\n            **agent_config\n        )\n    \n    @staticmethod\n    def get_available_providers() -> List[str]:\n        \"\"\"Get list of available LLM providers.\n        \n        Returns:\n            List of provider names\n        \"\"\"\n        return [provider.value for provider in LLMProvider]\n    \n    @staticmethod\n    def get_available_agent_types() -> List[str]:\n        \"\"\"Get list of available agent types.\n        \n        Returns:\n            List of agent type names\n        \"\"\"\n        # Ensure common aliases are included\n        types = {agent_type.value for agent_type in AgentType}\n        types.add(\"simple\")\n        return sorted(types)\n    \n    @staticmethod\n    def get_provider_models(provider: Union[str, LLMProvider]) -> List[str]:\n        \"\"\"Get available models for a provider.\n        \n        Args:\n            provider: LLM provider\n            \n        Returns:\n            List of model names\n        \"\"\"\n        if isinstance(provider, LLMProvider):\n            provider = provider.value\n        \n        models = {\n            \"openai\": [\n                \"gpt-4-turbo-preview\",\n                \"gpt-4-turbo\",\n                \"gpt-4\",\n                \"gpt-4-32k\",\n                \"gpt-3.5-turbo\"\n            ],\n            \"gemini\": [\n                \"gemini-2.5-flash\",\n                \"gemini-2.5-pro\",\n                \"gemini-1.5-flash\",\n                \"gemini-1.5-pro\",\n                \"gemini-pro\",\n                \"gemini-pro-vision\"\n            ],\n            \"anthropic\": [\n                \"claude-3-opus-20240229\",\n                \"claude-3-5-sonnet-20241022\",\n                \"claude-3-sonnet-20240229\",\n                \"claude-3-haiku-20240307\",\n                \"claude-2.1\",\n                \"claude-2.0\"\n            ]\n        }\n        \n        return models.get(provider.lower(), [])\n",
      "size_bytes": 10786
    },
    "multimodal-agent-builder/src/agents/base_agent.py": {
      "content": "\"\"\"Base agent abstract class for building AI agents.\"\"\"\n\nimport uuid\nfrom abc import ABC, abstractmethod\nfrom dataclasses import dataclass, field\nfrom datetime import datetime\nfrom enum import Enum\nfrom typing import Any, Dict, List, Optional, Union\n\nfrom pydantic import BaseModel, Field\n\nfrom src.models.base_llm import BaseLLMClient, LLMResponse, Message, MessageRole\n\n\nclass AgentState(Enum):\n    \"\"\"Agent state enumeration.\"\"\"\n    IDLE = \"idle\"\n    THINKING = \"thinking\"\n    EXECUTING = \"executing\"\n    WAITING = \"waiting\"\n    ERROR = \"error\"\n    COMPLETED = \"completed\"\n\n\nclass AgentMemoryType(Enum):\n    \"\"\"Types of agent memory.\"\"\"\n    SHORT_TERM = \"short_term\"\n    LONG_TERM = \"long_term\"\n    EPISODIC = \"episodic\"\n    SEMANTIC = \"semantic\"\n\n\n@dataclass\nclass AgentMemory:\n    \"\"\"Agent memory storage.\"\"\"\n    short_term: List[Message] = field(default_factory=list)\n    long_term: Dict[str, Any] = field(default_factory=dict)\n    episodic: List[Dict[str, Any]] = field(default_factory=list)\n    semantic: Dict[str, Any] = field(default_factory=dict)\n    max_short_term_size: int = 50\n    \n    def add_to_short_term(self, message: Message) -> None:\n        \"\"\"Add a message to short-term memory.\"\"\"\n        self.short_term.append(message)\n        # Trim if exceeds max size\n        if len(self.short_term) > self.max_short_term_size:\n            self.short_term = self.short_term[-self.max_short_term_size:]\n    \n    def add_episodic_memory(self, episode: Dict[str, Any]) -> None:\n        \"\"\"Add an episode to episodic memory.\"\"\"\n        episode[\"timestamp\"] = datetime.utcnow().isoformat()\n        self.episodic.append(episode)\n    \n    def clear_short_term(self) -> None:\n        \"\"\"Clear short-term memory.\"\"\"\n        self.short_term.clear()\n    \n    def get_context(self, max_messages: int = 10) -> List[Message]:\n        \"\"\"Get recent context from memory.\"\"\"\n        return self.short_term[-max_messages:] if self.short_term else []\n\n\nclass AgentConfig(BaseModel):\n    \"\"\"Configuration for an agent.\"\"\"\n    name: str = Field(description=\"Agent name\")\n    description: str = Field(default=\"\", description=\"Agent description\")\n    model_provider: str = Field(default=\"openai\", description=\"LLM provider\")\n    model: Optional[str] = Field(default=None, description=\"Model to use\")\n    temperature: float = Field(default=0.7, ge=0.0, le=2.0)\n    max_tokens: int = Field(default=4096, gt=0)\n    system_prompt: Optional[str] = Field(default=None, description=\"System prompt\")\n    enable_memory: bool = Field(default=True, description=\"Enable memory\")\n    enable_tools: bool = Field(default=True, description=\"Enable tool usage\")\n    max_iterations: int = Field(default=10, description=\"Max reasoning iterations\")\n    verbose: bool = Field(default=False, description=\"Verbose output\")\n    \n    class Config:\n        extra = \"allow\"\n\n\nclass AgentResponse(BaseModel):\n    \"\"\"Response from an agent.\"\"\"\n    agent_id: str\n    agent_name: str\n    content: str\n    raw_response: Optional[Any] = None\n    metadata: Dict[str, Any] = Field(default_factory=dict)\n    timestamp: str = Field(default_factory=lambda: datetime.utcnow().isoformat())\n    state: str = Field(default=AgentState.COMPLETED.value)\n    error: Optional[str] = None\n    usage: Optional[Dict[str, int]] = None\n\n\nclass BaseAgent(ABC):\n    \"\"\"Abstract base class for AI agents.\"\"\"\n    \n    def __init__(\n        self,\n        config: AgentConfig,\n        llm_client: BaseLLMClient,\n        tools: Optional[List[Any]] = None,\n    ):\n        \"\"\"Initialize the agent.\n        \n        Args:\n            config: Agent configuration\n            llm_client: LLM client to use\n            tools: Optional list of tools/functions\n        \"\"\"\n        self.id = str(uuid.uuid4())\n        self.config = config\n        self.llm_client = llm_client\n        self.tools = tools or []\n        self.state = AgentState.IDLE\n        self.memory = AgentMemory() if config.enable_memory else None\n        self.conversation_history: List[Message] = []\n        self.created_at = datetime.utcnow()\n        self.last_activity = datetime.utcnow()\n        \n    @abstractmethod\n    async def think(\n        self,\n        input_data: Union[str, Dict[str, Any]],\n        context: Optional[List[Message]] = None,\n        **kwargs\n    ) -> str:\n        \"\"\"Agent's thinking/reasoning process.\n        \n        Args:\n            input_data: Input to process\n            context: Optional context messages\n            **kwargs: Additional parameters\n            \n        Returns:\n            Thought/reasoning output\n        \"\"\"\n        pass\n    \n    @abstractmethod\n    async def act(\n        self,\n        thought: str,\n        available_actions: Optional[List[Dict[str, Any]]] = None,\n        **kwargs\n    ) -> Dict[str, Any]:\n        \"\"\"Agent's action selection and execution.\n        \n        Args:\n            thought: The agent's thought process\n            available_actions: Optional list of available actions\n            **kwargs: Additional parameters\n            \n        Returns:\n            Action result\n        \"\"\"\n        pass\n    \n    @abstractmethod\n    async def observe(\n        self,\n        action_result: Dict[str, Any],\n        **kwargs\n    ) -> str:\n        \"\"\"Agent observes the result of its action.\n        \n        Args:\n            action_result: Result from the action\n            **kwargs: Additional parameters\n            \n        Returns:\n            Observation\n        \"\"\"\n        pass\n    \n    async def run(\n        self,\n        input_data: Union[str, Dict[str, Any]],\n        **kwargs\n    ) -> AgentResponse:\n        \"\"\"Run the agent's complete cycle.\n        \n        Args:\n            input_data: Input to process\n            **kwargs: Additional parameters\n            \n        Returns:\n            Agent response\n        \"\"\"\n        try:\n            self.state = AgentState.THINKING\n            self.last_activity = datetime.utcnow()\n            \n            # Get context from memory if enabled\n            context = None\n            if self.memory:\n                context = self.memory.get_context()\n            \n            # Think phase\n            thought = await self.think(input_data, context, **kwargs)\n            \n            # Act phase\n            self.state = AgentState.EXECUTING\n            action_result = await self.act(thought, **kwargs)\n            \n            # Observe phase\n            observation = await self.observe(action_result, **kwargs)\n            \n            # Update memory if enabled\n            if self.memory and isinstance(input_data, str):\n                self.memory.add_to_short_term(\n                    Message(role=MessageRole.USER, content=input_data)\n                )\n                self.memory.add_to_short_term(\n                    Message(role=MessageRole.ASSISTANT, content=observation)\n                )\n            \n            self.state = AgentState.COMPLETED\n            \n            return AgentResponse(\n                agent_id=self.id,\n                agent_name=self.config.name,\n                content=observation,\n                metadata={\n                    \"thought\": thought,\n                    \"action\": action_result,\n                },\n                state=self.state.value\n            )\n            \n        except Exception as e:\n            self.state = AgentState.ERROR\n            return AgentResponse(\n                agent_id=self.id,\n                agent_name=self.config.name,\n                content=\"An error occurred while processing your request.\",\n                state=self.state.value,\n                error=str(e)\n            )\n    \n    async def chat(\n        self,\n        message: str,\n        **kwargs\n    ) -> AgentResponse:\n        \"\"\"Simple chat interface for the agent.\n        \n        Args:\n            message: User message\n            **kwargs: Additional parameters\n            \n        Returns:\n            Agent response\n        \"\"\"\n        try:\n            self.state = AgentState.THINKING\n            self.last_activity = datetime.utcnow()\n            \n            # Add user message to conversation history\n            user_message = Message(role=MessageRole.USER, content=message)\n            self.conversation_history.append(user_message)\n            \n            # Prepare messages with system prompt\n            messages = []\n            if self.config.system_prompt:\n                messages.append(\n                    Message(role=MessageRole.SYSTEM, content=self.config.system_prompt)\n                )\n            \n            # Add conversation history or memory context\n            if self.memory:\n                messages.extend(self.memory.get_context())\n            else:\n                # Limit conversation history to prevent token overflow\n                messages.extend(self.conversation_history[-10:])\n            \n            # Generate response\n            llm_response = await self.llm_client.generate(\n                messages,\n                temperature=self.config.temperature,\n                max_tokens=self.config.max_tokens,\n                **kwargs\n            )\n            \n            # Add assistant response to conversation history\n            assistant_message = Message(\n                role=MessageRole.ASSISTANT,\n                content=llm_response.content\n            )\n            self.conversation_history.append(assistant_message)\n            \n            # Update memory if enabled\n            if self.memory:\n                self.memory.add_to_short_term(user_message)\n                self.memory.add_to_short_term(assistant_message)\n            \n            self.state = AgentState.COMPLETED\n            \n            return AgentResponse(\n                agent_id=self.id,\n                agent_name=self.config.name,\n                content=llm_response.content,\n                usage=llm_response.usage,\n                state=self.state.value,\n                raw_response=llm_response.raw_response\n            )\n            \n        except Exception as e:\n            self.state = AgentState.ERROR\n            return AgentResponse(\n                agent_id=self.id,\n                agent_name=self.config.name,\n                content=f\"Error: {str(e)}\",\n                state=self.state.value,\n                error=str(e)\n            )\n    \n    def add_tool(self, tool: Any) -> None:\n        \"\"\"Add a tool to the agent.\"\"\"\n        if self.config.enable_tools:\n            self.tools.append(tool)\n    \n    def remove_tool(self, tool_name: str) -> None:\n        \"\"\"Remove a tool from the agent.\"\"\"\n        self.tools = [t for t in self.tools if getattr(t, 'name', '') != tool_name]\n    \n    def clear_memory(self) -> None:\n        \"\"\"Clear the agent's memory.\"\"\"\n        if self.memory:\n            self.memory.clear_short_term()\n        self.conversation_history.clear()\n    \n    def get_info(self) -> Dict[str, Any]:\n        \"\"\"Get agent information.\"\"\"\n        return {\n            \"id\": self.id,\n            \"name\": self.config.name,\n            \"description\": self.config.description,\n            \"state\": self.state.value,\n            \"model_provider\": self.config.model_provider,\n            \"model\": self.llm_client.model,\n            \"tools_count\": len(self.tools),\n            \"memory_enabled\": self.config.enable_memory,\n            \"created_at\": self.created_at.isoformat(),\n            \"last_activity\": self.last_activity.isoformat(),\n            \"conversation_length\": len(self.conversation_history)\n        }\n    \n    def __repr__(self) -> str:\n        \"\"\"String representation of the agent.\"\"\"\n        return f\"{self.__class__.__name__}(name='{self.config.name}', id='{self.id}')\"\n",
      "size_bytes": 11634
    },
    "multimodal-agent-builder/src/agents/langchain_agent.py": {
      "content": "\"\"\"LangChain-integrated agent with advanced tool support.\"\"\"\n\nimport json\nfrom typing import Any, Dict, List, Optional, Union\n\nfrom langchain.agents import AgentExecutor, create_react_agent\nfrom langchain.memory import ConversationBufferMemory\nfrom langchain.prompts import PromptTemplate\nfrom langchain.schema import BaseMessage, HumanMessage, SystemMessage\nfrom langchain.tools import BaseTool, Tool\nfrom langchain_community.tools import DuckDuckGoSearchRun\nfrom langchain_core.language_models import BaseLLM\nfrom langchain_google_genai import ChatGoogleGenerativeAI\nfrom langchain_openai import ChatOpenAI\nfrom pydantic import BaseModel, Field\n\nfrom config.config import settings\nfrom src.agents.base_agent import AgentConfig, AgentResponse, BaseAgent\nfrom src.models.base_llm import BaseLLMClient, Message, MessageRole\n\n\nclass LangChainAgentConfig(AgentConfig):\n    \"\"\"Configuration for LangChain agent.\"\"\"\n    agent_type: str = Field(default=\"react\", description=\"Agent type: react, conversational, etc.\")\n    enable_search: bool = Field(default=True, description=\"Enable web search\")\n    enable_calculator: bool = Field(default=True, description=\"Enable calculator\")\n    custom_tools: List[str] = Field(default_factory=list, description=\"List of custom tool names\")\n    max_execution_time: int = Field(default=60, description=\"Max execution time in seconds\")\n\n\nclass LangChainAgent(BaseAgent):\n    \"\"\"Agent powered by LangChain with advanced tool support.\"\"\"\n    \n    def __init__(\n        self,\n        config: Union[LangChainAgentConfig, AgentConfig],\n        llm_client: Optional[BaseLLMClient] = None,\n        tools: Optional[List[BaseTool]] = None,\n        langchain_llm: Optional[BaseLLM] = None,\n    ):\n        \"\"\"Initialize LangChain agent.\n        \n        Args:\n            config: Agent configuration\n            llm_client: Optional base LLM client\n            tools: Optional list of LangChain tools\n            langchain_llm: Optional LangChain LLM\n        \"\"\"\n        # Convert config if needed\n        if not isinstance(config, LangChainAgentConfig):\n            config = LangChainAgentConfig(**config.dict())\n        \n        # Create LangChain LLM if not provided\n        if langchain_llm is None:\n            langchain_llm = self._create_langchain_llm(config)\n        \n        # Initialize base agent (pass llm_client if available)\n        if llm_client:\n            super().__init__(config, llm_client, tools)\n        else:\n            # Create a dummy client for base class\n            from src.models.openai_client import OpenAIClient\n            dummy_client = OpenAIClient(\n                api_key=settings.openai_api_key or \"dummy\",\n                model=config.model or \"gpt-4\"\n            )\n            super().__init__(config, dummy_client, tools)\n        \n        self.langchain_config = config\n        self.langchain_llm = langchain_llm\n        \n        # Initialize LangChain components\n        self.memory = ConversationBufferMemory(\n            memory_key=\"chat_history\",\n            return_messages=True\n        )\n        \n        # Initialize tools\n        self.langchain_tools = self._initialize_tools(tools)\n        \n        # Create agent executor\n        self.agent_executor = self._create_agent_executor()\n    \n    def _create_langchain_llm(self, config: LangChainAgentConfig) -> BaseLLM:\n        \"\"\"Create LangChain LLM from config.\n        \n        Args:\n            config: Agent configuration\n            \n        Returns:\n            LangChain LLM instance\n        \"\"\"\n        if config.model_provider == \"openai\":\n            return ChatOpenAI(\n                model=config.model or \"gpt-4\",\n                temperature=config.temperature,\n                max_tokens=config.max_tokens,\n                api_key=settings.openai_api_key\n            )\n        elif config.model_provider == \"gemini\":\n            return ChatGoogleGenerativeAI(\n                model=config.model or \"gemini-pro\",\n                temperature=config.temperature,\n                max_output_tokens=config.max_tokens,\n                google_api_key=settings.gemini_api_key\n            )\n        else:\n            # Default to OpenAI\n            return ChatOpenAI(\n                model=\"gpt-4\",\n                temperature=config.temperature,\n                max_tokens=config.max_tokens,\n                api_key=settings.openai_api_key\n            )\n    \n    def _initialize_tools(self, custom_tools: Optional[List[BaseTool]] = None) -> List[BaseTool]:\n        \"\"\"Initialize LangChain tools.\n        \n        Args:\n            custom_tools: Optional custom tools\n            \n        Returns:\n            List of tools\n        \"\"\"\n        tools = []\n        \n        # Add custom tools if provided\n        if custom_tools:\n            tools.extend(custom_tools)\n        \n        # Add search tool if enabled\n        if self.langchain_config.enable_search:\n            search = DuckDuckGoSearchRun()\n            tools.append(\n                Tool(\n                    name=\"Search\",\n                    func=search.run,\n                    description=\"Search the web for current information\"\n                )\n            )\n        \n        # Add calculator if enabled\n        if self.langchain_config.enable_calculator:\n            tools.append(\n                Tool(\n                    name=\"Calculator\",\n                    func=self._calculator,\n                    description=\"Perform mathematical calculations\"\n                )\n            )\n        \n        # Add more built-in tools as needed\n        return tools\n    \n    def _create_agent_executor(self) -> AgentExecutor:\n        \"\"\"Create the LangChain agent executor.\n        \n        Returns:\n            Agent executor\n        \"\"\"\n        # Define the ReAct prompt template\n        react_prompt = PromptTemplate(\n            input_variables=[\"input\", \"chat_history\", \"agent_scratchpad\", \"tools\", \"tool_names\"],\n            template=\"\"\"You are a helpful AI assistant with access to various tools.\n\n{chat_history}\n\nYou have access to the following tools:\n{tools}\n\nUse the following format:\n\nQuestion: the input question you must answer\nThought: you should always think about what to do\nAction: the action to take, should be one of [{tool_names}]\nAction Input: the input to the action\nObservation: the result of the action\n... (this Thought/Action/Action Input/Observation can repeat N times)\nThought: I now know the final answer\nFinal Answer: the final answer to the original input question\n\nBegin!\n\nQuestion: {input}\nThought: {agent_scratchpad}\"\"\"\n        )\n        \n        # Create the ReAct agent\n        agent = create_react_agent(\n            llm=self.langchain_llm,\n            tools=self.langchain_tools,\n            prompt=react_prompt\n        )\n        \n        # Create agent executor\n        return AgentExecutor(\n            agent=agent,\n            tools=self.langchain_tools,\n            memory=self.memory,\n            verbose=self.config.verbose,\n            max_iterations=self.config.max_iterations,\n            handle_parsing_errors=True\n        )\n    \n    async def think(\n        self,\n        input_data: Union[str, Dict[str, Any]],\n        context: Optional[List[Message]] = None,\n        **kwargs\n    ) -> str:\n        \"\"\"LangChain thinking process.\n        \n        Args:\n            input_data: Input to process\n            context: Optional context messages\n            **kwargs: Additional parameters\n            \n        Returns:\n            Thought/reasoning output\n        \"\"\"\n        # Convert input to string if needed\n        if isinstance(input_data, dict):\n            input_str = json.dumps(input_data)\n        else:\n            input_str = str(input_data)\n        \n        # Add context to memory if provided\n        if context:\n            for msg in context:\n                if msg.role == MessageRole.USER:\n                    self.memory.chat_memory.add_user_message(msg.content)\n                elif msg.role == MessageRole.ASSISTANT:\n                    self.memory.chat_memory.add_ai_message(msg.content)\n        \n        # For LangChain, the thinking is integrated into the execution\n        return f\"Processing: {input_str[:100]}...\"\n    \n    async def act(\n        self,\n        thought: str,\n        available_actions: Optional[List[Dict[str, Any]]] = None,\n        **kwargs\n    ) -> Dict[str, Any]:\n        \"\"\"Execute action using LangChain agent.\n        \n        Args:\n            thought: The agent's thought process\n            available_actions: Optional list of available actions\n            **kwargs: Additional parameters\n            \n        Returns:\n            Action result\n        \"\"\"\n        # Extract the actual input from the thought\n        input_str = thought.replace(\"Processing: \", \"\").rstrip(\"...\")\n        \n        try:\n            # Run the agent executor\n            result = await self.agent_executor.ainvoke({\"input\": input_str})\n            \n            return {\n                \"type\": \"langchain_execution\",\n                \"input\": input_str,\n                \"output\": result.get(\"output\", \"\"),\n                \"intermediate_steps\": result.get(\"intermediate_steps\", [])\n            }\n        except Exception as e:\n            return {\n                \"type\": \"error\",\n                \"input\": input_str,\n                \"error\": str(e)\n            }\n    \n    async def observe(\n        self,\n        action_result: Dict[str, Any],\n        **kwargs\n    ) -> str:\n        \"\"\"Observe LangChain action result.\n        \n        Args:\n            action_result: Result from the action\n            **kwargs: Additional parameters\n            \n        Returns:\n            Observation/final response\n        \"\"\"\n        if action_result[\"type\"] == \"error\":\n            return f\"Error occurred: {action_result.get('error', 'Unknown error')}\"\n        \n        return action_result.get(\"output\", \"No output generated\")\n    \n    async def chat_with_tools(\n        self,\n        message: str,\n        **kwargs\n    ) -> AgentResponse:\n        \"\"\"Chat interface with tool usage.\n        \n        Args:\n            message: User message\n            **kwargs: Additional parameters\n            \n        Returns:\n            Agent response with tool usage details\n        \"\"\"\n        try:\n            # Run the agent\n            result = await self.agent_executor.ainvoke({\"input\": message})\n            \n            # Extract tool usage from intermediate steps\n            tools_used = []\n            for step in result.get(\"intermediate_steps\", []):\n                if len(step) >= 2:\n                    action = step[0]\n                    if hasattr(action, 'tool'):\n                        tools_used.append({\n                            \"tool\": action.tool,\n                            \"input\": action.tool_input,\n                            \"output\": str(step[1])[:200]  # Truncate long outputs\n                        })\n            \n            return AgentResponse(\n                agent_id=self.id,\n                agent_name=self.config.name,\n                content=result.get(\"output\", \"\"),\n                metadata={\n                    \"tools_used\": tools_used,\n                    \"num_iterations\": len(result.get(\"intermediate_steps\", [])),\n                    \"type\": \"tool_assisted_response\"\n                },\n                state=\"completed\"\n            )\n            \n        except Exception as e:\n            return AgentResponse(\n                agent_id=self.id,\n                agent_name=self.config.name,\n                content=f\"Error: {str(e)}\",\n                state=\"error\",\n                error=str(e)\n            )\n    \n    def add_langchain_tool(self, tool: BaseTool) -> None:\n        \"\"\"Add a LangChain tool to the agent.\n        \n        Args:\n            tool: LangChain tool to add\n        \"\"\"\n        self.langchain_tools.append(tool)\n        # Recreate agent executor with new tools\n        self.agent_executor = self._create_agent_executor()\n    \n    def _calculator(self, expression: str) -> str:\n        \"\"\"Simple calculator function.\n        \n        Args:\n            expression: Mathematical expression\n            \n        Returns:\n            Calculation result\n        \"\"\"\n        try:\n            # Use eval safely for basic math operations\n            allowed_names = {\n                \"abs\": abs, \"round\": round, \"min\": min, \"max\": max,\n                \"sum\": sum, \"pow\": pow, \"len\": len\n            }\n            result = eval(expression, {\"__builtins__\": {}}, allowed_names)\n            return str(result)\n        except Exception as e:\n            return f\"Error in calculation: {str(e)}\"\n    \n    def get_tool_descriptions(self) -> List[Dict[str, str]]:\n        \"\"\"Get descriptions of available tools.\n        \n        Returns:\n            List of tool descriptions\n        \"\"\"\n        return [\n            {\n                \"name\": tool.name,\n                \"description\": tool.description\n            }\n            for tool in self.langchain_tools\n        ]\n",
      "size_bytes": 12980
    },
    "multimodal-agent-builder/src/agents/multimodal_agent.py": {
      "content": "\"\"\"Multimodal agent implementation with text, image, and audio capabilities.\"\"\"\n\nimport base64\nimport io\nimport json\nfrom pathlib import Path\nfrom typing import Any, Dict, List, Optional, Union\n\nimport numpy as np\nfrom PIL import Image\nfrom pydantic import BaseModel, Field\n\nfrom src.agents.base_agent import AgentConfig, AgentResponse, BaseAgent\nfrom src.models.base_llm import BaseLLMClient, Message, MessageRole\n\n\nclass MultimodalInput(BaseModel):\n    \"\"\"Multimodal input structure.\"\"\"\n    text: Optional[str] = Field(default=None, description=\"Text input\")\n    image: Optional[Union[str, bytes]] = Field(default=None, description=\"Image input\")\n    audio: Optional[Union[str, bytes]] = Field(default=None, description=\"Audio input\")\n    metadata: Dict[str, Any] = Field(default_factory=dict)\n\n\nclass MultimodalAgentConfig(AgentConfig):\n    \"\"\"Configuration for multimodal agent.\"\"\"\n    enable_vision: bool = Field(default=True, description=\"Enable vision processing\")\n    enable_audio: bool = Field(default=True, description=\"Enable audio processing\")\n    image_detail: str = Field(default=\"auto\", description=\"Image detail level: low, high, auto\")\n    audio_language: str = Field(default=\"en\", description=\"Default audio language\")\n    multimodal_reasoning: bool = Field(default=True, description=\"Enable multimodal reasoning\")\n\n\nclass MultimodalAgent(BaseAgent):\n    \"\"\"Agent capable of handling text, image, and audio inputs.\"\"\"\n    \n    def __init__(\n        self,\n        config: Union[MultimodalAgentConfig, AgentConfig],\n        llm_client: BaseLLMClient,\n        tools: Optional[List[Any]] = None,\n    ):\n        \"\"\"Initialize multimodal agent.\n        \n        Args:\n            config: Agent configuration\n            llm_client: LLM client to use\n            tools: Optional list of tools\n        \"\"\"\n        # Preserve original config object for equality checks in tests\n        original_config = config\n        # Build a multimodal-specific view without replacing the original\n        if not isinstance(config, MultimodalAgentConfig):\n            mm_config = MultimodalAgentConfig(**config.dict())\n        else:\n            mm_config = config\n\n        super().__init__(original_config, llm_client, tools)\n        self.multimodal_config = mm_config\n        \n        # Check LLM capabilities\n        self.vision_enabled = (\n            self.multimodal_config.enable_vision and \n            llm_client.supports_vision\n        )\n        \n    async def think(\n        self,\n        input_data: Union[str, Dict[str, Any], MultimodalInput],\n        context: Optional[List[Message]] = None,\n        **kwargs\n    ) -> str:\n        \"\"\"Multimodal thinking process.\n        \n        Args:\n            input_data: Input to process (text, dict, or MultimodalInput)\n            context: Optional context messages\n            **kwargs: Additional parameters\n            \n        Returns:\n            Thought/reasoning output\n        \"\"\"\n        # Parse input\n        if isinstance(input_data, str):\n            multimodal_input = MultimodalInput(text=input_data)\n        elif isinstance(input_data, dict):\n            multimodal_input = MultimodalInput(**input_data)\n        elif isinstance(input_data, MultimodalInput):\n            multimodal_input = input_data\n        else:\n            raise ValueError(f\"Unsupported input type: {type(input_data)}\")\n        \n        # Build thinking prompt\n        thinking_prompt = self._build_thinking_prompt(multimodal_input)\n        \n        # Prepare messages\n        messages = []\n        if self.config.system_prompt:\n            messages.append(\n                Message(role=MessageRole.SYSTEM, content=self.config.system_prompt)\n            )\n        \n        if context:\n            messages.extend(context)\n        \n        # Add the thinking prompt\n        if multimodal_input.image and self.vision_enabled:\n            # Create multimodal message\n            content = [{\"type\": \"text\", \"text\": thinking_prompt}]\n            \n            # Add image\n            if isinstance(multimodal_input.image, str):\n                # File path\n                image_data = self._load_image_file(multimodal_input.image)\n            else:\n                # Bytes\n                image_data = multimodal_input.image\n            \n            image_base64 = base64.b64encode(image_data).decode(\"utf-8\")\n            content.append({\n                \"type\": \"image_url\",\n                \"image_url\": {\n                    \"url\": f\"data:image/jpeg;base64,{image_base64}\",\n                    \"detail\": self.multimodal_config.image_detail\n                }\n            })\n            \n            messages.append(Message(role=MessageRole.USER, content=content))\n        else:\n            messages.append(Message(role=MessageRole.USER, content=thinking_prompt))\n        \n        # Generate thought\n        response = await self.llm_client.generate(\n            messages,\n            temperature=self.config.temperature,\n            max_tokens=self.config.max_tokens,\n            **kwargs\n        )\n        \n        return response.content if hasattr(response, \"content\") else str(response)\n    \n    async def act(\n        self,\n        thought: str,\n        available_actions: Optional[List[Dict[str, Any]]] = None,\n        **kwargs\n    ) -> Dict[str, Any]:\n        \"\"\"Select and execute action based on thought.\n        \n        Args:\n            thought: The agent's thought process\n            available_actions: Optional list of available actions\n            **kwargs: Additional parameters\n            \n        Returns:\n            Action result\n        \"\"\"\n        # If tools are available and enabled, select appropriate tool\n        if self.tools and self.config.enable_tools:\n            action = await self._select_tool_action(thought, self.tools)\n            if action:\n                result = await self._execute_tool(action)\n                return {\n                    \"type\": \"tool_execution\",\n                    \"tool\": action[\"tool\"],\n                    \"parameters\": action.get(\"parameters\", {}),\n                    \"result\": result\n                }\n        \n        # Default action: generate response\n        return {\n            \"type\": \"response_generation\",\n            \"thought\": thought,\n            \"action\": \"generate_response\"\n        }\n    \n    async def observe(\n        self,\n        action_result: Dict[str, Any],\n        **kwargs\n    ) -> str:\n        \"\"\"Observe and interpret action result.\n        \n        Args:\n            action_result: Result from the action\n            **kwargs: Additional parameters\n            \n        Returns:\n            Observation/final response\n        \"\"\"\n        if action_result[\"type\"] == \"tool_execution\":\n            # Interpret tool execution result\n            prompt = f\"\"\"\n            Based on the following thought and action result, provide a clear response:\n            \n            Thought: {action_result.get('thought', '')}\n            Tool: {action_result.get('tool', '')}\n            Result: {action_result.get('result', '')}\n            \n            Provide a helpful response to the user.\n            \"\"\"\n            \n            messages = [Message(role=MessageRole.USER, content=prompt)]\n            response = await self.llm_client.generate(\n                messages,\n                temperature=self.config.temperature,\n                max_tokens=self.config.max_tokens,\n                **kwargs\n            )\n            return response.content\n        \n        # For response generation, return the thought as the observation\n        return action_result.get(\"thought\", \"\")\n    \n    async def process_image(\n        self,\n        image: Union[str, bytes, Image.Image, np.ndarray],\n        prompt: str = \"What's in this image?\",\n        **kwargs\n    ) -> AgentResponse:\n        \"\"\"Process an image with a prompt.\n        \n        Args:\n            image: Image to process\n            prompt: Text prompt for the image\n            **kwargs: Additional parameters\n            \n        Returns:\n            Agent response\n        \"\"\"\n        if not self.vision_enabled:\n            return AgentResponse(\n                agent_id=self.id,\n                agent_name=self.config.name,\n                content=\"Vision processing is not enabled for this agent or model.\",\n                state=\"error\",\n                error=\"Vision not supported\"\n            )\n        \n        try:\n            # Prefer a generic generate() path so tests can mock it easily\n            messages = [Message(role=MessageRole.USER, content=prompt)]\n            resp = await self.llm_client.generate(\n                messages,\n                image=image,\n                temperature=self.config.temperature,\n                max_tokens=self.config.max_tokens,\n                **kwargs\n            )\n\n            # Normalize response to a simple content string and optional usage\n            content = resp.content if hasattr(resp, \"content\") else str(resp)\n            usage = resp.usage if hasattr(resp, \"usage\") else None\n\n            # Update memory if enabled\n            if self.memory:\n                self.memory.add_to_short_term(\n                    Message(role=MessageRole.USER, content=prompt)\n                )\n                self.memory.add_to_short_term(\n                    Message(role=MessageRole.ASSISTANT, content=content)\n                )\n            \n            return AgentResponse(\n                agent_id=self.id,\n                agent_name=self.config.name,\n                content=content,\n                usage=usage,\n                metadata={\n                    \"modality\": \"image\",\n                    \"prompt\": prompt,\n                    \"agent_id\": self.id,\n                }\n            )\n            \n        except Exception as e:\n            return AgentResponse(\n                agent_id=self.id,\n                agent_name=self.config.name,\n                content=f\"Error processing image: {str(e)}\",\n                state=\"error\",\n                error=str(e)\n            )\n    \n    async def process_audio(\n        self,\n        audio: Union[str, bytes],\n        task: str = \"transcribe\",\n        **kwargs\n    ) -> AgentResponse:\n        \"\"\"Process audio input.\n        \n        Args:\n            audio: Audio to process (file path or bytes)\n            task: Task to perform (transcribe, translate, analyze)\n            **kwargs: Additional parameters\n            \n        Returns:\n            Agent response\n        \"\"\"\n        # Note: Audio processing would typically require additional services\n        # like OpenAI's Whisper API or Google's Speech-to-Text\n        # This is a placeholder implementation\n        \n        return AgentResponse(\n            agent_id=self.id,\n            agent_name=self.config.name,\n            content=\"Audio processed\",\n            metadata={\"modality\": \"audio\", \"task\": task},\n            state=\"completed\"\n        )\n    \n    async def process_multimodal(\n        self,\n        inputs: MultimodalInput,\n        **kwargs\n    ) -> AgentResponse:\n        \"\"\"Process multiple modalities simultaneously.\n        \n        Args:\n            inputs: Multimodal inputs\n            **kwargs: Additional parameters\n            \n        Returns:\n            Agent response\n        \"\"\"\n        try:\n            # Run the full think-act-observe cycle with multimodal input\n            response = await self.run(inputs, **kwargs)\n            response.metadata[\"modality\"] = \"multimodal\"\n            response.metadata[\"modalities_used\"] = []\n            \n            if inputs.text:\n                response.metadata[\"modalities_used\"].append(\"text\")\n            if inputs.image:\n                response.metadata[\"modalities_used\"].append(\"image\")\n            if inputs.audio:\n                response.metadata[\"modalities_used\"].append(\"audio\")\n            \n            return response\n            \n        except Exception as e:\n            return AgentResponse(\n                agent_id=self.id,\n                agent_name=self.config.name,\n                content=f\"Error in multimodal processing: {str(e)}\",\n                state=\"error\",\n                error=str(e)\n            )\n    \n    def _build_thinking_prompt(self, inputs: MultimodalInput) -> str:\n        \"\"\"Build a thinking prompt from multimodal inputs.\n        \n        Args:\n            inputs: Multimodal inputs\n            \n        Returns:\n            Thinking prompt\n        \"\"\"\n        prompt_parts = []\n        \n        if self.multimodal_config.multimodal_reasoning:\n            prompt_parts.append(\"Analyze the following inputs:\")\n        \n        if inputs.text:\n            prompt_parts.append(f\"Text: {inputs.text}\")\n        \n        if inputs.image:\n            prompt_parts.append(\"Image: [Image provided]\")\n            if self.multimodal_config.multimodal_reasoning:\n                prompt_parts.append(\"Please analyze the image content.\")\n        \n        if inputs.audio:\n            prompt_parts.append(\"Audio: [Audio provided]\")\n            if self.multimodal_config.multimodal_reasoning:\n                prompt_parts.append(\"Note: Audio processing requires transcription.\")\n        \n        if inputs.metadata:\n            prompt_parts.append(f\"Additional context: {json.dumps(inputs.metadata)}\")\n        \n        if self.multimodal_config.multimodal_reasoning:\n            prompt_parts.append(\"\\nProvide a comprehensive analysis considering all inputs.\")\n        \n        return \"\\n\".join(prompt_parts)\n    \n    async def _select_tool_action(\n        self,\n        thought: str,\n        tools: List[Any]\n    ) -> Optional[Dict[str, Any]]:\n        \"\"\"Select appropriate tool based on thought.\n        \n        Args:\n            thought: Agent's thought\n            tools: Available tools\n            \n        Returns:\n            Selected action or None\n        \"\"\"\n        # This would typically use the LLM to select the appropriate tool\n        # For now, returning None to use default action\n        return None\n    \n    async def _execute_tool(self, action: Dict[str, Any]) -> Any:\n        \"\"\"Execute a selected tool.\n        \n        Args:\n            action: Tool action to execute\n            \n        Returns:\n            Tool execution result\n        \"\"\"\n        # Placeholder for tool execution\n        # Would integrate with LangChain tools or custom implementations\n        return f\"Executed {action.get('tool', 'unknown')} tool\"\n    \n    def _load_image_file(self, path: str) -> bytes:\n        \"\"\"Load image file as bytes.\n        \n        Args:\n            path: Path to image file\n            \n        Returns:\n            Image bytes\n        \"\"\"\n        with open(path, \"rb\") as f:\n            return f.read()\n    \n    def get_capabilities(self) -> Dict[str, bool]:\n        \"\"\"Get agent capabilities.\n        \n        Returns:\n            Dictionary of capabilities\n        \"\"\"\n        return {\n            \"text\": True,\n            \"image\": self.vision_enabled,\n            \"audio\": self.multimodal_config.enable_audio,\n            \"streaming\": self.llm_client.supports_streaming,\n            \"functions\": self.llm_client.supports_functions and self.config.enable_tools,\n            \"memory\": self.config.enable_memory,\n            \"multimodal_reasoning\": self.multimodal_config.multimodal_reasoning\n        }\n",
      "size_bytes": 15289
    },
    "multimodal-agent-builder/src/agents/simple_agent.py": {
      "content": "\"\"\"Simple agent implementation for basic use cases.\"\"\"\n\nfrom typing import Any, Dict, List, Optional, Union\n\nfrom src.agents.base_agent import BaseAgent\nfrom src.models.base_llm import Message, MessageRole\n\n\nclass SimpleAgent(BaseAgent):\n    \"\"\"Simple agent implementation for basic conversational AI.\"\"\"\n    \n    async def think(\n        self,\n        input_data: Union[str, Dict[str, Any]],\n        context: Optional[List[Message]] = None,\n        **kwargs\n    ) -> str:\n        \"\"\"Simple thinking process - just process the input.\n        \n        Args:\n            input_data: Input to process\n            context: Optional context messages\n            **kwargs: Additional parameters\n            \n        Returns:\n            Processed thought\n        \"\"\"\n        if isinstance(input_data, dict):\n            # Convert dict to string representation\n            input_str = str(input_data)\n        else:\n            input_str = str(input_data)\n        \n        # Simple thinking: just acknowledge the input\n        return f\"Processing request: {input_str}\"\n    \n    async def act(\n        self,\n        thought: str,\n        available_actions: Optional[List[Dict[str, Any]]] = None,\n        **kwargs\n    ) -> Dict[str, Any]:\n        \"\"\"Simple action - generate response.\n        \n        Args:\n            thought: The agent's thought process\n            available_actions: Optional list of available actions\n            **kwargs: Additional parameters\n            \n        Returns:\n            Action result\n        \"\"\"\n        # Extract the actual request from the thought\n        request = thought.replace(\"Processing request: \", \"\")\n        \n        # Prepare messages\n        messages = []\n        if self.config.system_prompt:\n            messages.append(\n                Message(role=MessageRole.SYSTEM, content=self.config.system_prompt)\n            )\n        messages.append(Message(role=MessageRole.USER, content=request))\n        \n        # Generate response\n        response = await self.llm_client.generate(\n            messages,\n            temperature=self.config.temperature,\n            max_tokens=self.config.max_tokens,\n            **kwargs\n        )\n        \n        return {\n            \"type\": \"response\",\n            \"content\": response.content,\n            \"usage\": response.usage\n        }\n    \n    async def observe(\n        self,\n        action_result: Dict[str, Any],\n        **kwargs\n    ) -> str:\n        \"\"\"Simple observation - return the response.\n        \n        Args:\n            action_result: Result from the action\n            **kwargs: Additional parameters\n            \n        Returns:\n            Final response\n        \"\"\"\n        return action_result.get(\"content\", \"No response generated\")\n",
      "size_bytes": 2739
    },
    "multimodal-agent-builder/src/api/training_endpoints.py": {
      "content": "\"\"\"Training API endpoints for recursive loop closure and adaptive learning.\"\"\"\n\nfrom fastapi import APIRouter, HTTPException, BackgroundTasks\nfrom pydantic import BaseModel, Field\nfrom typing import Any, Dict, List, Optional\nimport asyncio\nfrom datetime import datetime\n\nfrom src.utils.training_utils import (\n    AdaptiveTrainingManager,\n    RecursiveLoopClosureLedger,\n    create_enhanced_training_pipeline\n)\nfrom src.utils.logging_utils import logger\n\n\n# Router for training endpoints\nrouter = APIRouter(prefix=\"/training\", tags=[\"training\"])\n\n\n# Request/Response models\nclass TrainingRequest(BaseModel):\n    \"\"\"Request to start training with recursive loop closure.\"\"\"\n    agent_name: str = Field(..., description=\"Name of agent to train\")\n    dataset_type: str = Field(default=\"open_images\", description=\"Dataset type\")\n    epochs: int = Field(default=3, ge=1, le=100, description=\"Number of epochs\")\n    enable_closure: bool = Field(default=True, description=\"Enable loop closure detection\")\n\n\nclass LoopClosureRequest(BaseModel):\n    \"\"\"Request to log a recursive loop closure.\"\"\"\n    hypothesis: str = Field(..., description=\"Hypothesis being tested\")\n    pattern: str = Field(..., description=\"Pattern identified\")\n    structure: str = Field(..., description=\"Structure used\")\n    explanation: str = Field(..., description=\"Why the loop was closed\")\n    topic: Optional[str] = Field(default=\"\", description=\"Topic description\")\n\n\nclass TrainingStatus(BaseModel):\n    \"\"\"Training status response.\"\"\"\n    status: str\n    agent_name: str\n    current_epoch: Optional[int] = None\n    total_epochs: Optional[int] = None\n    loops_closed: int = 0\n    patterns_found: int = 0\n    accuracy: Optional[float] = None\n    message: str\n\n\nclass LedgerResponse(BaseModel):\n    \"\"\"Response containing ledger information.\"\"\"\n    total_loops: int\n    recent_loops: List[Dict[str, Any]]\n    closure_rate: float\n\n\n# Global training managers (in production, use a database)\ntraining_managers: Dict[str, AdaptiveTrainingManager] = {}\ntraining_status: Dict[str, Dict[str, Any]] = {}\n\n\n@router.post(\"/start\", response_model=TrainingStatus)\nasync def start_training(\n    request: TrainingRequest,\n    background_tasks: BackgroundTasks\n) -> TrainingStatus:\n    \"\"\"Start adaptive training with recursive loop closure.\n    \n    Args:\n        request: Training configuration\n        background_tasks: FastAPI background tasks\n        \n    Returns:\n        Initial training status\n    \"\"\"\n    try:\n        # Check if already training\n        if request.agent_name in training_status:\n            existing = training_status[request.agent_name]\n            if existing.get(\"status\") == \"training\":\n                raise HTTPException(\n                    status_code=400,\n                    detail=f\"Agent {request.agent_name} is already training\"\n                )\n        \n        # Initialize training manager\n        manager = AdaptiveTrainingManager()\n        training_managers[request.agent_name] = manager\n        \n        # Initialize status\n        training_status[request.agent_name] = {\n            \"status\": \"initializing\",\n            \"agent_name\": request.agent_name,\n            \"current_epoch\": 0,\n            \"total_epochs\": request.epochs,\n            \"loops_closed\": 0,\n            \"patterns_found\": 0,\n            \"started_at\": datetime.utcnow().isoformat()\n        }\n        \n        # Start training in background\n        background_tasks.add_task(\n            run_training_async,\n            request.agent_name,\n            request.dataset_type,\n            request.epochs,\n            request.enable_closure\n        )\n        \n        return TrainingStatus(\n            status=\"initializing\",\n            agent_name=request.agent_name,\n            total_epochs=request.epochs,\n            message=f\"Training initialized for {request.agent_name}\"\n        )\n        \n    except Exception as e:\n        logger.error(f\"Failed to start training: {e}\")\n        raise HTTPException(status_code=500, detail=str(e))\n\n\nasync def run_training_async(\n    agent_name: str,\n    dataset_type: str,\n    epochs: int,\n    enable_closure: bool\n):\n    \"\"\"Run training asynchronously.\n    \n    Args:\n        agent_name: Name of agent\n        dataset_type: Type of dataset\n        epochs: Number of epochs\n        enable_closure: Whether to enable closure detection\n    \"\"\"\n    try:\n        manager = training_managers[agent_name]\n        \n        # Update status\n        training_status[agent_name][\"status\"] = \"loading_data\"\n        \n        # Load training data\n        training_data = manager.load_training_data(dataset_type)\n        \n        # Update status\n        training_status[agent_name][\"status\"] = \"training\"\n        \n        # Run training loop\n        results = manager.create_training_loop(\n            model_name=agent_name,\n            training_data=training_data,\n            epochs=epochs\n        )\n        \n        # Update status with results\n        training_status[agent_name].update({\n            \"status\": \"validating\",\n            \"loops_closed\": len(results[\"loops_closed\"]),\n            \"patterns_found\": len(results[\"final_metrics\"][\"patterns_found\"])\n        })\n        \n        # Run validation\n        val_results = manager.validate_with_closure(agent_name)\n        \n        # Final status update\n        training_status[agent_name].update({\n            \"status\": \"completed\",\n            \"accuracy\": val_results[\"validation_accuracy\"],\n            \"completed_at\": datetime.utcnow().isoformat()\n        })\n        \n        logger.info(f\"Training completed for {agent_name}\")\n        \n    except Exception as e:\n        logger.error(f\"Training failed for {agent_name}: {e}\")\n        training_status[agent_name].update({\n            \"status\": \"failed\",\n            \"error\": str(e),\n            \"failed_at\": datetime.utcnow().isoformat()\n        })\n\n\n@router.get(\"/status/{agent_name}\", response_model=TrainingStatus)\nasync def get_training_status(agent_name: str) -> TrainingStatus:\n    \"\"\"Get current training status for an agent.\n    \n    Args:\n        agent_name: Name of the agent\n        \n    Returns:\n        Current training status\n    \"\"\"\n    if agent_name not in training_status:\n        raise HTTPException(\n            status_code=404,\n            detail=f\"No training found for agent {agent_name}\"\n        )\n    \n    status = training_status[agent_name]\n    \n    return TrainingStatus(\n        status=status[\"status\"],\n        agent_name=agent_name,\n        current_epoch=status.get(\"current_epoch\"),\n        total_epochs=status.get(\"total_epochs\"),\n        loops_closed=status.get(\"loops_closed\", 0),\n        patterns_found=status.get(\"patterns_found\", 0),\n        accuracy=status.get(\"accuracy\"),\n        message=f\"Training {status['status']} for {agent_name}\"\n    )\n\n\n@router.post(\"/closure\", response_model=Dict[str, Any])\nasync def log_loop_closure(request: LoopClosureRequest) -> Dict[str, Any]:\n    \"\"\"Manually log a recursive loop closure.\n    \n    Args:\n        request: Loop closure details\n        \n    Returns:\n        Closure confirmation\n    \"\"\"\n    try:\n        # Create or get global ledger\n        ledger = RecursiveLoopClosureLedger(\n            ledger_file=\"manual_closure_ledger.csv\"\n        )\n        \n        # Log the closure\n        success = ledger.detect_and_log_closure(\n            hypothesis=request.hypothesis,\n            pattern=request.pattern,\n            structure=request.structure,\n            explanation=request.explanation,\n            topic=request.topic or \"Manual Closure\"\n        )\n        \n        if success:\n            return {\n                \"success\": True,\n                \"message\": \"Loop closure logged successfully\",\n                \"total_loops\": len(ledger.closed_loops),\n                \"loop_id\": f\"RL-{len(ledger.closed_loops):03d}\"\n            }\n        else:\n            raise HTTPException(\n                status_code=400,\n                detail=\"Failed to detect valid closure\"\n            )\n            \n    except Exception as e:\n        logger.error(f\"Failed to log closure: {e}\")\n        raise HTTPException(status_code=500, detail=str(e))\n\n\n@router.get(\"/ledger/{agent_name}\", response_model=LedgerResponse)\nasync def get_training_ledger(agent_name: str) -> LedgerResponse:\n    \"\"\"Get the recursive loop closure ledger for an agent.\n    \n    Args:\n        agent_name: Name of the agent\n        \n    Returns:\n        Ledger information\n    \"\"\"\n    if agent_name not in training_managers:\n        raise HTTPException(\n            status_code=404,\n            detail=f\"No training manager found for agent {agent_name}\"\n        )\n    \n    manager = training_managers[agent_name]\n    ledger_df = manager.ledger.get_ledger_df()\n    \n    # Get recent loops (last 5)\n    recent_loops = ledger_df.tail(5).to_dict('records') if not ledger_df.empty else []\n    \n    # Calculate closure rate\n    summary = manager.get_training_summary()\n    \n    return LedgerResponse(\n        total_loops=len(manager.ledger.closed_loops),\n        recent_loops=recent_loops,\n        closure_rate=summary[\"closure_rate\"]\n    )\n\n\n@router.get(\"/summary/{agent_name}\", response_model=Dict[str, Any])\nasync def get_training_summary(agent_name: str) -> Dict[str, Any]:\n    \"\"\"Get comprehensive training summary for an agent.\n    \n    Args:\n        agent_name: Name of the agent\n        \n    Returns:\n        Training summary with metrics\n    \"\"\"\n    if agent_name not in training_managers:\n        raise HTTPException(\n            status_code=404,\n            detail=f\"No training manager found for agent {agent_name}\"\n        )\n    \n    manager = training_managers[agent_name]\n    summary = manager.get_training_summary()\n    \n    # Add status information\n    if agent_name in training_status:\n        summary[\"training_status\"] = training_status[agent_name]\n    \n    return summary\n\n\n@router.delete(\"/reset/{agent_name}\")\nasync def reset_training(agent_name: str) -> Dict[str, str]:\n    \"\"\"Reset training for an agent.\n    \n    Args:\n        agent_name: Name of the agent\n        \n    Returns:\n        Confirmation message\n    \"\"\"\n    # Remove from managers and status\n    if agent_name in training_managers:\n        del training_managers[agent_name]\n    \n    if agent_name in training_status:\n        del training_status[agent_name]\n    \n    return {\n        \"message\": f\"Training reset for agent {agent_name}\",\n        \"agent_name\": agent_name\n    }\n\n\n@router.post(\"/pipeline/{agent_name}\", response_model=Dict[str, Any])\nasync def create_training_pipeline(\n    agent_name: str,\n    dataset_type: str = \"open_images\"\n) -> Dict[str, Any]:\n    \"\"\"Create and run a complete training pipeline.\n    \n    Args:\n        agent_name: Name of the agent\n        dataset_type: Type of dataset to use\n        \n    Returns:\n        Pipeline results\n    \"\"\"\n    try:\n        # Create enhanced pipeline\n        manager = create_enhanced_training_pipeline(\n            agent_name=agent_name,\n            dataset_type=dataset_type\n        )\n        \n        # Store manager\n        training_managers[agent_name] = manager\n        \n        # Get summary\n        summary = manager.get_training_summary()\n        \n        return {\n            \"success\": True,\n            \"agent_name\": agent_name,\n            \"summary\": summary,\n            \"message\": f\"Pipeline completed for {agent_name}\"\n        }\n        \n    except Exception as e:\n        logger.error(f\"Pipeline failed for {agent_name}: {e}\")\n        raise HTTPException(status_code=500, detail=str(e))\n\n\n@router.get(\"/datasets\", response_model=Dict[str, Any])\nasync def list_available_datasets() -> Dict[str, Any]:\n    \"\"\"List available training datasets.\n    \n    Returns:\n        Available datasets and their information\n    \"\"\"\n    from pathlib import Path\n    \n    datasets = {\n        \"open_images\": {\n            \"description\": \"Open Images Localized Narratives dataset\",\n            \"training_files\": [],\n            \"validation_files\": [],\n            \"test_files\": []\n        }\n    }\n    \n    # Check for actual files\n    base_path = Path(\"train-test-validate\")\n    \n    if base_path.exists():\n        # Training files\n        train_path = base_path / \"ML-Training\"\n        if train_path.exists():\n            datasets[\"open_images\"][\"training_files\"] = [\n                f.name for f in train_path.glob(\"*.jsonl\")\n            ][:5]  # Limit to 5 for display\n        \n        # Validation files\n        val_path = base_path / \"ML-Validation\"\n        if val_path.exists():\n            datasets[\"open_images\"][\"validation_files\"] = [\n                f.name for f in val_path.glob(\"*.jsonl\")\n            ][:5]\n        \n        # Test files\n        test_path = base_path / \"ML-Testing\"\n        if test_path.exists():\n            datasets[\"open_images\"][\"test_files\"] = [\n                f.name for f in test_path.glob(\"*.jsonl\")\n            ][:5]\n    \n    return {\n        \"datasets\": datasets,\n        \"total_datasets\": len(datasets)\n    }\n",
      "size_bytes": 12945
    },
    "multimodal-agent-builder/src/models/__init__.py": {
      "content": "",
      "size_bytes": 0
    },
    "multimodal-agent-builder/src/models/base_llm.py": {
      "content": "\"\"\"Base LLM client abstract class.\"\"\"\n\nfrom abc import ABC, abstractmethod\nfrom dataclasses import dataclass\nfrom enum import Enum\nfrom typing import Any, Dict, List, Optional, Union\n\nimport numpy as np\nfrom PIL import Image\n\n\nclass MessageRole(Enum):\n    \"\"\"Message roles for conversation.\"\"\"\n    SYSTEM = \"system\"\n    USER = \"user\"\n    ASSISTANT = \"assistant\"\n    FUNCTION = \"function\"\n\n\n@dataclass\nclass Message:\n    \"\"\"Represents a message in a conversation.\"\"\"\n    role: MessageRole\n    content: Union[str, List[Dict[str, Any]]]\n    name: Optional[str] = None\n    function_call: Optional[Dict[str, Any]] = None\n    \n    def to_dict(self) -> Dict[str, Any]:\n        \"\"\"Convert message to dictionary.\"\"\"\n        data = {\n            \"role\": self.role.value,\n            \"content\": self.content\n        }\n        if self.name:\n            data[\"name\"] = self.name\n        if self.function_call:\n            data[\"function_call\"] = self.function_call\n        return data\n\n\n@dataclass\nclass LLMResponse:\n    \"\"\"Standardized LLM response.\"\"\"\n    content: str\n    model: str\n    usage: Dict[str, int]\n    finish_reason: Optional[str] = None\n    function_call: Optional[Dict[str, Any]] = None\n    raw_response: Optional[Any] = None\n\n\nclass BaseLLMClient(ABC):\n    \"\"\"Abstract base class for LLM clients.\"\"\"\n    \n    def __init__(\n        self,\n        api_key: str,\n        model: str,\n        max_tokens: int = 4096,\n        temperature: float = 0.7,\n        **kwargs\n    ):\n        \"\"\"Initialize the LLM client.\n        \n        Args:\n            api_key: API key for the service\n            model: Model identifier\n            max_tokens: Maximum tokens to generate\n            temperature: Temperature for sampling\n            **kwargs: Additional provider-specific arguments\n        \"\"\"\n        self.api_key = api_key\n        self.model = model\n        self.max_tokens = max_tokens\n        self.temperature = temperature\n        self.extra_params = kwargs\n        self._validate_config()\n    \n    def _validate_config(self) -> None:\n        \"\"\"Validate configuration.\"\"\"\n        if not self.api_key:\n            raise ValueError(f\"API key is required for {self.__class__.__name__}\")\n        if not self.model:\n            raise ValueError(f\"Model name is required for {self.__class__.__name__}\")\n        if not 0 <= self.temperature <= 2:\n            raise ValueError(f\"Temperature must be between 0 and 2, got {self.temperature}\")\n        if self.max_tokens <= 0:\n            raise ValueError(f\"max_tokens must be positive, got {self.max_tokens}\")\n    \n    @abstractmethod\n    async def generate(\n        self,\n        messages: List[Message],\n        **kwargs\n    ) -> LLMResponse:\n        \"\"\"Generate a response from the LLM.\n        \n        Args:\n            messages: List of messages in the conversation\n            **kwargs: Additional generation parameters\n            \n        Returns:\n            LLMResponse object\n        \"\"\"\n        pass\n    \n    @abstractmethod\n    async def generate_stream(\n        self,\n        messages: List[Message],\n        **kwargs\n    ):\n        \"\"\"Generate a streaming response from the LLM.\n        \n        Args:\n            messages: List of messages in the conversation\n            **kwargs: Additional generation parameters\n            \n        Yields:\n            Partial response chunks\n        \"\"\"\n        pass\n    \n    @abstractmethod\n    async def generate_with_image(\n        self,\n        prompt: str,\n        image: Union[str, bytes, Image.Image, np.ndarray],\n        **kwargs\n    ) -> LLMResponse:\n        \"\"\"Generate a response based on text and image input.\n        \n        Args:\n            prompt: Text prompt\n            image: Image input (path, bytes, PIL Image, or numpy array)\n            **kwargs: Additional generation parameters\n            \n        Returns:\n            LLMResponse object\n        \"\"\"\n        pass\n    \n    @abstractmethod\n    async def generate_embeddings(\n        self,\n        text: Union[str, List[str]],\n        **kwargs\n    ) -> Union[List[float], List[List[float]]]:\n        \"\"\"Generate embeddings for the given text.\n        \n        Args:\n            text: Single text or list of texts\n            **kwargs: Additional parameters\n            \n        Returns:\n            Embeddings as list of floats or list of lists\n        \"\"\"\n        pass\n    \n    @abstractmethod\n    def count_tokens(self, text: str) -> int:\n        \"\"\"Count the number of tokens in a text.\n        \n        Args:\n            text: Text to count tokens for\n            \n        Returns:\n            Number of tokens\n        \"\"\"\n        pass\n    \n    @property\n    @abstractmethod\n    def supports_functions(self) -> bool:\n        \"\"\"Check if the model supports function calling.\"\"\"\n        pass\n    \n    @property\n    @abstractmethod\n    def supports_vision(self) -> bool:\n        \"\"\"Check if the model supports vision inputs.\"\"\"\n        pass\n    \n    @property\n    @abstractmethod\n    def supports_streaming(self) -> bool:\n        \"\"\"Check if the model supports streaming responses.\"\"\"\n        pass\n    \n    @property\n    @abstractmethod\n    def max_context_length(self) -> int:\n        \"\"\"Get the maximum context length for the model.\"\"\"\n        pass\n    \n    def prepare_messages(\n        self,\n        messages: List[Union[Message, Dict[str, Any]]],\n        system_prompt: Optional[str] = None\n    ) -> List[Dict[str, Any]]:\n        \"\"\"Prepare messages for the API call.\n        \n        Args:\n            messages: List of Message objects\n            system_prompt: Optional system prompt to prepend\n            \n        Returns:\n            List of message dictionaries\n        \"\"\"\n        prepared = []\n        \n        if system_prompt:\n            prepared.append({\n                \"role\": MessageRole.SYSTEM.value,\n                \"content\": system_prompt\n            })\n        \n        for msg in messages:\n            # Accept either Message objects or raw dicts\n            if isinstance(msg, Message):\n                prepared.append(msg.to_dict())\n            elif isinstance(msg, dict):\n                # Basic validation and normalization\n                role = msg.get(\"role\")\n                content = msg.get(\"content\")\n                if isinstance(role, MessageRole):\n                    role = role.value\n                prepared.append({\n                    \"role\": role,\n                    \"content\": content,\n                    **{k: v for k, v in msg.items() if k not in {\"role\", \"content\"}},\n                })\n            else:\n                # Fallback to string content as user message\n                prepared.append({\"role\": MessageRole.USER.value, \"content\": str(msg)})\n        \n        return prepared\n    \n    def __repr__(self) -> str:\n        \"\"\"String representation of the client.\"\"\"\n        return f\"{self.__class__.__name__}(model='{self.model}')\"\n",
      "size_bytes": 6863
    },
    "multimodal-agent-builder/src/models/claude_client.py": {
      "content": "\"\"\"Anthropic Claude client implementation.\"\"\"\n\nimport base64\nimport io\nfrom typing import Any, AsyncGenerator, Dict, List, Optional, Union\n\nimport anthropic\nimport numpy as np\nfrom anthropic import AsyncAnthropic\nfrom PIL import Image\n\nfrom config.config import settings\nfrom src.models.base_llm import BaseLLMClient, LLMResponse, Message, MessageRole\n\n\nclass ClaudeClient(BaseLLMClient):\n    \"\"\"Anthropic Claude client implementation.\"\"\"\n    \n    # Model capabilities mapping\n    MODEL_CAPABILITIES = {\n        \"claude-3-opus-20240229\": {\n            \"vision\": True,\n            \"functions\": True,\n            \"streaming\": True,\n            \"max_context\": 200000,\n            \"max_output\": 4096\n        },\n        \"claude-3-5-sonnet-20241022\": {\n            \"vision\": True,\n            \"functions\": True,\n            \"streaming\": True,\n            \"max_context\": 200000,\n            \"max_output\": 8192\n        },\n        \"claude-3-sonnet-20240229\": {\n            \"vision\": True,\n            \"functions\": True,\n            \"streaming\": True,\n            \"max_context\": 200000,\n            \"max_output\": 4096\n        },\n        \"claude-3-haiku-20240307\": {\n            \"vision\": True,\n            \"functions\": True,\n            \"streaming\": True,\n            \"max_context\": 200000,\n            \"max_output\": 4096\n        },\n        \"claude-2.1\": {\n            \"vision\": False,\n            \"functions\": False,\n            \"streaming\": True,\n            \"max_context\": 200000,\n            \"max_output\": 4096\n        },\n        \"claude-2.0\": {\n            \"vision\": False,\n            \"functions\": False,\n            \"streaming\": True,\n            \"max_context\": 100000,\n            \"max_output\": 4096\n        }\n    }\n    \n    def __init__(\n        self,\n        api_key: Optional[str] = None,\n        model: Optional[str] = None,\n        max_tokens: Optional[int] = None,\n        temperature: Optional[float] = None,\n        **kwargs\n    ):\n        \"\"\"Initialize Claude client.\n        \n        Args:\n            api_key: Anthropic API key (defaults to settings)\n            model: Model name (defaults to settings)\n            max_tokens: Maximum tokens to generate\n            temperature: Temperature for sampling\n            **kwargs: Additional parameters\n        \"\"\"\n        # Use settings as defaults\n        config = settings.get_llm_config(\"anthropic\")\n        api_key = api_key or config[\"api_key\"]\n        model = model or config[\"model\"]\n        max_tokens = max_tokens or config[\"max_tokens\"]\n        temperature = temperature if temperature is not None else config[\"temperature\"]\n        \n        super().__init__(api_key, model, max_tokens, temperature, **kwargs)\n        \n        # Initialize Anthropic client\n        self.client = AsyncAnthropic(api_key=self.api_key)\n    \n    async def generate(\n        self,\n        messages: List[Message],\n        system_prompt: Optional[str] = None,\n        tools: Optional[List[Dict[str, Any]]] = None,\n        **kwargs\n    ) -> LLMResponse:\n        \"\"\"Generate a response from Claude.\n        \n        Args:\n            messages: List of messages in the conversation\n            system_prompt: Optional system prompt\n            tools: Optional list of tool definitions\n            **kwargs: Additional parameters\n            \n        Returns:\n            LLMResponse object\n        \"\"\"\n        # Convert messages to Claude format\n        claude_messages = self._convert_messages_to_claude(messages)\n        \n        # Build request parameters\n        params = {\n            \"model\": self.model,\n            \"messages\": claude_messages,\n            \"max_tokens\": kwargs.get(\"max_tokens\", self.max_tokens),\n            \"temperature\": kwargs.get(\"temperature\", self.temperature),\n        }\n        \n        # Add system prompt if provided\n        if system_prompt:\n            params[\"system\"] = system_prompt\n        elif any(msg.role == MessageRole.SYSTEM for msg in messages):\n            # Extract system message from messages\n            system_msgs = [msg for msg in messages if msg.role == MessageRole.SYSTEM]\n            if system_msgs:\n                params[\"system\"] = system_msgs[0].content if isinstance(system_msgs[0].content, str) else str(system_msgs[0].content)\n        \n        # Add tools if supported and provided\n        if self.supports_functions and tools:\n            params[\"tools\"] = tools\n            if \"tool_choice\" in kwargs:\n                params[\"tool_choice\"] = kwargs[\"tool_choice\"]\n        \n        # Add optional parameters\n        if \"top_p\" in kwargs:\n            params[\"top_p\"] = kwargs[\"top_p\"]\n        if \"top_k\" in kwargs:\n            params[\"top_k\"] = kwargs[\"top_k\"]\n        if \"stop_sequences\" in kwargs:\n            params[\"stop_sequences\"] = kwargs[\"stop_sequences\"]\n        \n        # Make API call\n        response = await self.client.messages.create(**params)\n        \n        # Extract content\n        content = self._extract_content(response)\n        \n        # Extract tool calls if present\n        tool_calls = None\n        if hasattr(response, 'content') and isinstance(response.content, list):\n            for item in response.content:\n                if hasattr(item, 'type') and item.type == 'tool_use':\n                    if tool_calls is None:\n                        tool_calls = []\n                    tool_calls.append({\n                        \"id\": item.id,\n                        \"name\": item.name,\n                        \"input\": item.input\n                    })\n        \n        return LLMResponse(\n            content=content,\n            model=response.model,\n            usage={\n                \"prompt_tokens\": response.usage.input_tokens,\n                \"completion_tokens\": response.usage.output_tokens,\n                \"total_tokens\": response.usage.input_tokens + response.usage.output_tokens\n            },\n            finish_reason=response.stop_reason,\n            function_call={\"tool_calls\": tool_calls} if tool_calls else None,\n            raw_response=response\n        )\n    \n    async def generate_stream(\n        self,\n        messages: List[Message],\n        system_prompt: Optional[str] = None,\n        **kwargs\n    ) -> AsyncGenerator[str, None]:\n        \"\"\"Generate a streaming response from Claude.\n        \n        Args:\n            messages: List of messages\n            system_prompt: Optional system prompt\n            **kwargs: Additional parameters\n            \n        Yields:\n            Response chunks\n        \"\"\"\n        claude_messages = self._convert_messages_to_claude(messages)\n        \n        params = {\n            \"model\": self.model,\n            \"messages\": claude_messages,\n            \"max_tokens\": kwargs.get(\"max_tokens\", self.max_tokens),\n            \"temperature\": kwargs.get(\"temperature\", self.temperature),\n        }\n        \n        if system_prompt:\n            params[\"system\"] = system_prompt\n        \n        async with self.client.messages.stream(**params) as stream:\n            async for text in stream.text_stream:\n                yield text\n    \n    async def generate_with_image(\n        self,\n        prompt: str,\n        image: Union[str, bytes, Image.Image, np.ndarray],\n        **kwargs\n    ) -> LLMResponse:\n        \"\"\"Generate a response based on text and image input.\n        \n        Args:\n            prompt: Text prompt\n            image: Image input\n            **kwargs: Additional parameters\n            \n        Returns:\n            LLMResponse object\n        \"\"\"\n        if not self.supports_vision:\n            raise ValueError(f\"Model {self.model} does not support vision inputs\")\n        \n        # Process image to base64\n        image_base64, media_type = self._process_image_for_claude(image)\n        \n        # Create message with image\n        messages = [\n            Message(\n                role=MessageRole.USER,\n                content=[\n                    {\n                        \"type\": \"image\",\n                        \"source\": {\n                            \"type\": \"base64\",\n                            \"media_type\": media_type,\n                            \"data\": image_base64\n                        }\n                    },\n                    {\n                        \"type\": \"text\",\n                        \"text\": prompt\n                    }\n                ]\n            )\n        ]\n        \n        return await self.generate(messages, **kwargs)\n    \n    async def generate_embeddings(\n        self,\n        text: Union[str, List[str]],\n        **kwargs\n    ) -> Union[List[float], List[List[float]]]:\n        \"\"\"Generate embeddings for text.\n        \n        Note: Claude doesn't have a native embedding API.\n        This method raises NotImplementedError.\n        \n        Args:\n            text: Text or list of texts\n            **kwargs: Additional parameters\n            \n        Raises:\n            NotImplementedError: Claude doesn't support embeddings\n        \"\"\"\n        raise NotImplementedError(\n            \"Claude doesn't have a native embedding API. \"\n            \"Consider using OpenAI or another provider for embeddings.\"\n        )\n    \n    def count_tokens(self, text: str) -> int:\n        \"\"\"Count tokens in text.\n        \n        Args:\n            text: Text to count tokens for\n            \n        Returns:\n            Estimated number of tokens\n        \"\"\"\n        # Claude uses a similar tokenization to GPT models\n        # Rough estimation: 1 token ≈ 4 characters\n        return len(text) // 4\n    \n    def _convert_messages_to_claude(self, messages: List[Message]) -> List[Dict[str, Any]]:\n        \"\"\"Convert messages to Claude format.\n        \n        Args:\n            messages: List of Message objects\n            \n        Returns:\n            List of Claude-formatted messages\n        \"\"\"\n        claude_messages = []\n        \n        for msg in messages:\n            # Skip system messages as they're handled separately\n            if msg.role == MessageRole.SYSTEM:\n                continue\n            \n            # Map roles\n            role = \"user\" if msg.role == MessageRole.USER else \"assistant\"\n            \n            # Handle content\n            if isinstance(msg.content, str):\n                content = msg.content\n            elif isinstance(msg.content, list):\n                # Already in the right format for multimodal\n                content = msg.content\n            else:\n                content = str(msg.content)\n            \n            claude_messages.append({\n                \"role\": role,\n                \"content\": content\n            })\n        \n        return claude_messages\n    \n    def _process_image_for_claude(\n        self, \n        image: Union[str, bytes, Image.Image, np.ndarray]\n    ) -> tuple[str, str]:\n        \"\"\"Process image for Claude API.\n        \n        Args:\n            image: Image in various formats\n            \n        Returns:\n            Tuple of (base64_string, media_type)\n        \"\"\"\n        # Convert to PIL Image first\n        if isinstance(image, str):\n            pil_image = Image.open(image)\n        elif isinstance(image, bytes):\n            pil_image = Image.open(io.BytesIO(image))\n        elif isinstance(image, Image.Image):\n            pil_image = image\n        elif isinstance(image, np.ndarray):\n            pil_image = Image.fromarray(image)\n        else:\n            raise ValueError(f\"Unsupported image type: {type(image)}\")\n        \n        # Convert to bytes\n        buffer = io.BytesIO()\n        \n        # Determine format and media type\n        if pil_image.mode in ('RGBA', 'LA'):\n            # Convert images with alpha channel to RGB\n            rgb_image = Image.new('RGB', pil_image.size, (255, 255, 255))\n            rgb_image.paste(pil_image, mask=pil_image.split()[-1] if pil_image.mode == 'RGBA' else None)\n            rgb_image.save(buffer, format=\"JPEG\", quality=95)\n            media_type = \"image/jpeg\"\n        else:\n            pil_image.save(buffer, format=\"JPEG\", quality=95)\n            media_type = \"image/jpeg\"\n        \n        image_bytes = buffer.getvalue()\n        base64_string = base64.b64encode(image_bytes).decode(\"utf-8\")\n        \n        return base64_string, media_type\n    \n    def _extract_content(self, response) -> str:\n        \"\"\"Extract text content from Claude response.\n        \n        Args:\n            response: Claude response object\n            \n        Returns:\n            Extracted text content\n        \"\"\"\n        if hasattr(response, 'content'):\n            if isinstance(response.content, str):\n                return response.content\n            elif isinstance(response.content, list):\n                # Extract text from content blocks\n                text_parts = []\n                for item in response.content:\n                    if hasattr(item, 'text'):\n                        text_parts.append(item.text)\n                    elif hasattr(item, 'type') and item.type == 'text':\n                        if hasattr(item, 'text'):\n                            text_parts.append(item.text)\n                return \" \".join(text_parts)\n        return \"\"\n    \n    @property\n    def supports_functions(self) -> bool:\n        \"\"\"Check if model supports function calling.\"\"\"\n        return self.MODEL_CAPABILITIES.get(\n            self.model,\n            {\"functions\": False}\n        )[\"functions\"]\n    \n    @property\n    def supports_vision(self) -> bool:\n        \"\"\"Check if model supports vision inputs.\"\"\"\n        return self.MODEL_CAPABILITIES.get(\n            self.model,\n            {\"vision\": False}\n        )[\"vision\"]\n    \n    @property\n    def supports_streaming(self) -> bool:\n        \"\"\"Check if model supports streaming.\"\"\"\n        return self.MODEL_CAPABILITIES.get(\n            self.model,\n            {\"streaming\": True}\n        )[\"streaming\"]\n    \n    @property\n    def max_context_length(self) -> int:\n        \"\"\"Get maximum context length.\"\"\"\n        return self.MODEL_CAPABILITIES.get(\n            self.model,\n            {\"max_context\": 100000}\n        )[\"max_context\"]\n",
      "size_bytes": 13992
    },
    "multimodal-agent-builder/src/models/gemini_client.py": {
      "content": "\"\"\"Google Gemini client implementation.\"\"\"\n\nimport base64\nimport io\nfrom typing import Any, AsyncGenerator, Dict, List, Optional, Union\n\nimport google.generativeai as genai\nimport numpy as np\nfrom PIL import Image\n\nfrom config.config import settings\nfrom src.models.base_llm import BaseLLMClient, LLMResponse, Message, MessageRole\n\n\nclass GeminiClient(BaseLLMClient):\n    \"\"\"Google Gemini client implementation.\"\"\"\n    \n    # Model capabilities mapping\n    MODEL_CAPABILITIES = {\n        \"gemini-2.5-flash\": {\n            \"vision\": True,\n            \"functions\": True,\n            \"streaming\": True,\n            \"max_context\": 1048576,  # 1M tokens\n            \"max_output\": 8192\n        },\n        \"gemini-2.5-pro\": {\n            \"vision\": True,\n            \"functions\": True,\n            \"streaming\": True,\n            \"max_context\": 2097152,  # 2M tokens\n            \"max_output\": 8192\n        },\n        \"gemini-1.5-flash\": {\n            \"vision\": True,\n            \"functions\": True,\n            \"streaming\": True,\n            \"max_context\": 1048576,\n            \"max_output\": 8192\n        },\n        \"gemini-1.5-pro\": {\n            \"vision\": True,\n            \"functions\": True,\n            \"streaming\": True,\n            \"max_context\": 2097152,\n            \"max_output\": 8192\n        },\n        \"gemini-pro\": {\n            \"vision\": False,\n            \"functions\": True,\n            \"streaming\": True,\n            \"max_context\": 32768,\n            \"max_output\": 8192\n        },\n        \"gemini-pro-vision\": {\n            \"vision\": True,\n            \"functions\": False,\n            \"streaming\": True,\n            \"max_context\": 16384,\n            \"max_output\": 2048\n        }\n    }\n    \n    def __init__(\n        self,\n        api_key: Optional[str] = None,\n        model: Optional[str] = None,\n        max_tokens: Optional[int] = None,\n        temperature: Optional[float] = None,\n        **kwargs\n    ):\n        \"\"\"Initialize Gemini client.\n        \n        Args:\n            api_key: Google API key (defaults to settings)\n            model: Model name (defaults to settings)\n            max_tokens: Maximum tokens to generate\n            temperature: Temperature for sampling\n            **kwargs: Additional parameters\n        \"\"\"\n        # Use settings as defaults\n        config = settings.get_llm_config(\"gemini\")\n        api_key = api_key or config[\"api_key\"]\n        model = model or config[\"model\"]\n        max_tokens = max_tokens or config[\"max_tokens\"]\n        temperature = temperature if temperature is not None else config[\"temperature\"]\n        \n        super().__init__(api_key, model, max_tokens, temperature, **kwargs)\n        \n        # Configure the Gemini API\n        genai.configure(api_key=self.api_key)\n        \n        # Initialize the model\n        self.model_instance = genai.GenerativeModel(self.model)\n        \n        # Safety settings\n        self.safety_settings = kwargs.get(\"safety_settings\", [\n            {\n                \"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n                \"threshold\": \"BLOCK_NONE\"\n            },\n            {\n                \"category\": \"HARM_CATEGORY_HATE_SPEECH\",\n                \"threshold\": \"BLOCK_NONE\"\n            },\n            {\n                \"category\": \"HARM_CATEGORY_HARASSMENT\",\n                \"threshold\": \"BLOCK_NONE\"\n            },\n            {\n                \"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n                \"threshold\": \"BLOCK_NONE\"\n            }\n        ])\n    \n    async def generate(\n        self,\n        messages: List[Message],\n        functions: Optional[List[Dict[str, Any]]] = None,\n        **kwargs\n    ) -> LLMResponse:\n        \"\"\"Generate a response from Gemini.\n        \n        Args:\n            messages: List of messages in the conversation\n            functions: Optional list of function definitions\n            **kwargs: Additional parameters\n            \n        Returns:\n            LLMResponse object\n        \"\"\"\n        # Convert messages to Gemini format\n        gemini_messages = self._convert_messages_to_gemini(messages)\n        \n        # Generation configuration\n        generation_config = genai.GenerationConfig(\n            max_output_tokens=kwargs.get(\"max_tokens\", self.max_tokens),\n            temperature=kwargs.get(\"temperature\", self.temperature),\n            top_p=kwargs.get(\"top_p\", 1.0),\n            top_k=kwargs.get(\"top_k\", 1),\n        )\n        \n        # Add tools if functions are provided\n        tools = None\n        if self.supports_functions and functions:\n            tools = self._convert_functions_to_tools(functions)\n        \n        # Generate response\n        response = await self.model_instance.generate_content_async(\n            gemini_messages,\n            generation_config=generation_config,\n            safety_settings=self.safety_settings,\n            tools=tools\n        )\n        \n        # Extract content\n        content = response.text if hasattr(response, 'text') else \"\"\n        \n        # Extract usage information\n        usage = self._extract_usage(response)\n        \n        return LLMResponse(\n            content=content,\n            model=self.model,\n            usage=usage,\n            finish_reason=self._get_finish_reason(response),\n            raw_response=response\n        )\n    \n    async def generate_stream(\n        self,\n        messages: List[Message],\n        **kwargs\n    ) -> AsyncGenerator[str, None]:\n        \"\"\"Generate a streaming response from Gemini.\n        \n        Args:\n            messages: List of messages\n            **kwargs: Additional parameters\n            \n        Yields:\n            Response chunks\n        \"\"\"\n        gemini_messages = self._convert_messages_to_gemini(messages)\n        \n        generation_config = genai.GenerationConfig(\n            max_output_tokens=kwargs.get(\"max_tokens\", self.max_tokens),\n            temperature=kwargs.get(\"temperature\", self.temperature),\n            top_p=kwargs.get(\"top_p\", 1.0),\n            top_k=kwargs.get(\"top_k\", 1),\n        )\n        \n        response = await self.model_instance.generate_content_async(\n            gemini_messages,\n            generation_config=generation_config,\n            safety_settings=self.safety_settings,\n            stream=True\n        )\n        \n        async for chunk in response:\n            if chunk.text:\n                yield chunk.text\n    \n    async def generate_with_image(\n        self,\n        prompt: str,\n        image: Union[str, bytes, Image.Image, np.ndarray],\n        **kwargs\n    ) -> LLMResponse:\n        \"\"\"Generate a response based on text and image input.\n        \n        Args:\n            prompt: Text prompt\n            image: Image input\n            **kwargs: Additional parameters\n            \n        Returns:\n            LLMResponse object\n        \"\"\"\n        if not self.supports_vision:\n            raise ValueError(f\"Model {self.model} does not support vision inputs\")\n        \n        # Process image\n        processed_image = self._process_image_for_gemini(image)\n        \n        # Create content with image\n        content = [prompt, processed_image]\n        \n        generation_config = genai.GenerationConfig(\n            max_output_tokens=kwargs.get(\"max_tokens\", self.max_tokens),\n            temperature=kwargs.get(\"temperature\", self.temperature),\n        )\n        \n        response = await self.model_instance.generate_content_async(\n            content,\n            generation_config=generation_config,\n            safety_settings=self.safety_settings\n        )\n        \n        return LLMResponse(\n            content=response.text if hasattr(response, 'text') else \"\",\n            model=self.model,\n            usage=self._extract_usage(response),\n            finish_reason=self._get_finish_reason(response),\n            raw_response=response\n        )\n    \n    async def generate_embeddings(\n        self,\n        text: Union[str, List[str]],\n        model: str = \"models/text-embedding-004\",\n        **kwargs\n    ) -> Union[List[float], List[List[float]]]:\n        \"\"\"Generate embeddings for text.\n        \n        Args:\n            text: Text or list of texts\n            model: Embedding model to use\n            **kwargs: Additional parameters\n            \n        Returns:\n            Embeddings\n        \"\"\"\n        is_single = isinstance(text, str)\n        texts = [text] if is_single else text\n        \n        embeddings = []\n        for t in texts:\n            result = genai.embed_content(\n                model=model,\n                content=t,\n                task_type=\"retrieval_document\",\n                title=kwargs.get(\"title\", \"Embedding\")\n            )\n            embeddings.append(result['embedding'])\n        \n        return embeddings[0] if is_single else embeddings\n    \n    def count_tokens(self, text: str) -> int:\n        \"\"\"Count tokens in text.\n        \n        Args:\n            text: Text to count tokens for\n            \n        Returns:\n            Number of tokens\n        \"\"\"\n        # Use Gemini's count_tokens method\n        return self.model_instance.count_tokens(text).total_tokens\n    \n    def _convert_messages_to_gemini(self, messages: List[Message]) -> List[Dict[str, Any]]:\n        \"\"\"Convert messages to Gemini format.\n        \n        Args:\n            messages: List of Message objects\n            \n        Returns:\n            List of Gemini-formatted messages\n        \"\"\"\n        gemini_messages = []\n        \n        for msg in messages:\n            role = \"user\" if msg.role in [MessageRole.USER, MessageRole.SYSTEM] else \"model\"\n            \n            # Handle content that might be a list (for multimodal)\n            if isinstance(msg.content, list):\n                parts = []\n                for item in msg.content:\n                    if isinstance(item, dict):\n                        if item.get(\"type\") == \"text\":\n                            parts.append(item[\"text\"])\n                        elif item.get(\"type\") == \"image_url\":\n                            # Handle image URLs if needed\n                            pass\n                    else:\n                        parts.append(str(item))\n                content = \" \".join(parts)\n            else:\n                content = msg.content\n            \n            gemini_messages.append({\n                \"role\": role,\n                \"parts\": [content]\n            })\n        \n        return gemini_messages\n    \n    def _convert_functions_to_tools(self, functions: List[Dict[str, Any]]) -> List[Any]:\n        \"\"\"Convert OpenAI-style functions to Gemini tools.\n        \n        Args:\n            functions: List of function definitions\n            \n        Returns:\n            List of Gemini tool definitions\n        \"\"\"\n        # This would need proper implementation based on Gemini's tool format\n        # For now, returning None as Gemini's function calling API may differ\n        return None\n    \n    def _process_image_for_gemini(self, image: Union[str, bytes, Image.Image, np.ndarray]) -> Image.Image:\n        \"\"\"Process image for Gemini API.\n        \n        Args:\n            image: Image in various formats\n            \n        Returns:\n            PIL Image object\n        \"\"\"\n        if isinstance(image, str):\n            # If it's a file path\n            return Image.open(image)\n        elif isinstance(image, bytes):\n            return Image.open(io.BytesIO(image))\n        elif isinstance(image, Image.Image):\n            return image\n        elif isinstance(image, np.ndarray):\n            return Image.fromarray(image)\n        else:\n            raise ValueError(f\"Unsupported image type: {type(image)}\")\n    \n    def _extract_usage(self, response) -> Dict[str, int]:\n        \"\"\"Extract usage information from response.\n        \n        Args:\n            response: Gemini response object\n            \n        Returns:\n            Usage dictionary\n        \"\"\"\n        # Gemini doesn't always provide detailed token counts\n        # This is a simplified version\n        usage = {\n            \"prompt_tokens\": 0,\n            \"completion_tokens\": 0,\n            \"total_tokens\": 0\n        }\n        \n        if hasattr(response, 'usage_metadata'):\n            metadata = response.usage_metadata\n            usage[\"prompt_tokens\"] = getattr(metadata, 'prompt_token_count', 0)\n            usage[\"completion_tokens\"] = getattr(metadata, 'candidates_token_count', 0)\n            usage[\"total_tokens\"] = usage[\"prompt_tokens\"] + usage[\"completion_tokens\"]\n        \n        return usage\n    \n    def _get_finish_reason(self, response) -> str:\n        \"\"\"Get finish reason from response.\n        \n        Args:\n            response: Gemini response object\n            \n        Returns:\n            Finish reason string\n        \"\"\"\n        if hasattr(response, 'candidates') and response.candidates:\n            candidate = response.candidates[0]\n            if hasattr(candidate, 'finish_reason'):\n                return str(candidate.finish_reason)\n        return \"stop\"\n    \n    @property\n    def supports_functions(self) -> bool:\n        \"\"\"Check if model supports function calling.\"\"\"\n        return self.MODEL_CAPABILITIES.get(\n            self.model,\n            {\"functions\": False}\n        )[\"functions\"]\n    \n    @property\n    def supports_vision(self) -> bool:\n        \"\"\"Check if model supports vision inputs.\"\"\"\n        return self.MODEL_CAPABILITIES.get(\n            self.model,\n            {\"vision\": False}\n        )[\"vision\"]\n    \n    @property\n    def supports_streaming(self) -> bool:\n        \"\"\"Check if model supports streaming.\"\"\"\n        return self.MODEL_CAPABILITIES.get(\n            self.model,\n            {\"streaming\": True}\n        )[\"streaming\"]\n    \n    @property\n    def max_context_length(self) -> int:\n        \"\"\"Get maximum context length.\"\"\"\n        return self.MODEL_CAPABILITIES.get(\n            self.model,\n            {\"max_context\": 32768}\n        )[\"max_context\"]\n",
      "size_bytes": 13888
    },
    "multimodal-agent-builder/src/models/openai_client.py": {
      "content": "\"\"\"OpenAI GPT-4 client implementation.\"\"\"\n\nimport base64\nimport io\nfrom typing import Any, AsyncGenerator, Dict, List, Optional, Union\n\nimport numpy as np\nimport openai\nimport tiktoken\n# Use attribute access on the module so external patches work reliably\nfrom PIL import Image\n\nfrom config.config import settings\nfrom src.models.base_llm import BaseLLMClient, LLMResponse, Message, MessageRole\n\n\nclass OpenAIClient(BaseLLMClient):\n    \"\"\"OpenAI GPT-4 client implementation.\"\"\"\n    \n    # Model capabilities mapping\n    MODEL_CAPABILITIES = {\n        \"gpt-4-turbo-preview\": {\n            \"vision\": True,\n            \"functions\": True,\n            \"streaming\": True,\n            \"max_context\": 128000,\n            \"max_output\": 4096\n        },\n        \"gpt-4-turbo\": {\n            \"vision\": True,\n            \"functions\": True,\n            \"streaming\": True,\n            \"max_context\": 128000,\n            \"max_output\": 4096\n        },\n        \"gpt-4\": {\n            \"vision\": False,\n            \"functions\": True,\n            \"streaming\": True,\n            \"max_context\": 8192,\n            \"max_output\": 4096\n        },\n        \"gpt-4-32k\": {\n            \"vision\": False,\n            \"functions\": True,\n            \"streaming\": True,\n            \"max_context\": 32768,\n            \"max_output\": 4096\n        },\n        \"gpt-3.5-turbo\": {\n            \"vision\": False,\n            \"functions\": True,\n            \"streaming\": True,\n            \"max_context\": 16384,\n            \"max_output\": 4096\n        }\n    }\n    \n    def __init__(\n        self,\n        api_key: Optional[str] = None,\n        model: Optional[str] = None,\n        max_tokens: Optional[int] = None,\n        temperature: Optional[float] = None,\n        organization: Optional[str] = None,\n        **kwargs\n    ):\n        \"\"\"Initialize OpenAI client.\n        \n        Args:\n            api_key: OpenAI API key (defaults to settings)\n            model: Model name (defaults to settings)\n            max_tokens: Maximum tokens to generate\n            temperature: Temperature for sampling\n            organization: Optional organization ID\n            **kwargs: Additional parameters\n        \"\"\"\n        # Use settings as defaults\n        config = settings.get_llm_config(\"openai\")\n        api_key = api_key or config[\"api_key\"]\n        model = model or config[\"model\"]\n        max_tokens = max_tokens or config[\"max_tokens\"]\n        temperature = temperature if temperature is not None else config[\"temperature\"]\n        \n        super().__init__(api_key, model, max_tokens, temperature, **kwargs)\n        \n        # Initialize OpenAI client\n        self.client = openai.AsyncOpenAI(\n            api_key=self.api_key,\n            organization=organization\n        )\n        \n        # Initialize tokenizer for the model\n        try:\n            self.tokenizer = tiktoken.encoding_for_model(self.model)\n        except KeyError:\n            # Fallback to cl100k_base encoding for newer models\n            self.tokenizer = tiktoken.get_encoding(\"cl100k_base\")\n    \n    async def generate(\n        self,\n        messages: List[Message],\n        functions: Optional[List[Dict[str, Any]]] = None,\n        function_call: Optional[Union[str, Dict[str, Any]]] = None,\n        **kwargs\n    ) -> LLMResponse:\n        \"\"\"Generate a response from OpenAI GPT-4.\n        \n        Args:\n            messages: List of messages in the conversation\n            functions: Optional list of function definitions\n            function_call: Optional function calling behavior\n            **kwargs: Additional parameters\n            \n        Returns:\n            LLMResponse object\n        \"\"\"\n        # Prepare messages\n        prepared_messages = self.prepare_messages(messages)\n        \n        # Build request parameters\n        params = {\n            \"model\": self.model,\n            \"messages\": prepared_messages,\n            \"max_tokens\": kwargs.get(\"max_tokens\", self.max_tokens),\n            \"temperature\": kwargs.get(\"temperature\", self.temperature),\n            \"top_p\": kwargs.get(\"top_p\", 1.0),\n            \"frequency_penalty\": kwargs.get(\"frequency_penalty\", 0.0),\n            \"presence_penalty\": kwargs.get(\"presence_penalty\", 0.0),\n        }\n        \n        # Add function calling if supported and provided\n        if self.supports_functions and functions:\n            params[\"functions\"] = functions\n            if function_call is not None:\n                params[\"function_call\"] = function_call\n        \n        # Make API call\n        response = await self.client.chat.completions.create(**params)\n        \n        # Extract response data\n        choice = response.choices[0]\n        message = choice.message\n        \n        return LLMResponse(\n            content=message.content or \"\",\n            model=response.model,\n            usage={\n                \"prompt_tokens\": response.usage.prompt_tokens,\n                \"completion_tokens\": response.usage.completion_tokens,\n                \"total_tokens\": response.usage.total_tokens\n            },\n            finish_reason=choice.finish_reason,\n            function_call=message.function_call if hasattr(message, 'function_call') else None,\n            raw_response=response\n        )\n    \n    async def generate_stream(\n        self,\n        messages: List[Message],\n        **kwargs\n    ) -> AsyncGenerator[str, None]:\n        \"\"\"Generate a streaming response from OpenAI.\n        \n        Args:\n            messages: List of messages\n            **kwargs: Additional parameters\n            \n        Yields:\n            Response chunks\n        \"\"\"\n        prepared_messages = self.prepare_messages(messages)\n        \n        params = {\n            \"model\": self.model,\n            \"messages\": prepared_messages,\n            \"max_tokens\": kwargs.get(\"max_tokens\", self.max_tokens),\n            \"temperature\": kwargs.get(\"temperature\", self.temperature),\n            \"stream\": True\n        }\n        \n        stream = await self.client.chat.completions.create(**params)\n        \n        async for chunk in stream:\n            if chunk.choices[0].delta.content is not None:\n                yield chunk.choices[0].delta.content\n    \n    async def generate_with_image(\n        self,\n        prompt: str,\n        image: Union[str, bytes, Image.Image, np.ndarray],\n        **kwargs\n    ) -> LLMResponse:\n        \"\"\"Generate a response based on text and image input.\n        \n        Args:\n            prompt: Text prompt\n            image: Image input\n            **kwargs: Additional parameters\n            \n        Returns:\n            LLMResponse object\n        \"\"\"\n        if not self.supports_vision:\n            raise ValueError(f\"Model {self.model} does not support vision inputs\")\n        \n        # Convert image to base64\n        image_base64 = self._process_image(image)\n        \n        # Create message with image\n        messages = [\n            Message(\n                role=MessageRole.USER,\n                content=[\n                    {\"type\": \"text\", \"text\": prompt},\n                    {\n                        \"type\": \"image_url\",\n                        \"image_url\": {\n                            \"url\": f\"data:image/jpeg;base64,{image_base64}\"\n                        }\n                    }\n                ]\n            )\n        ]\n        \n        return await self.generate(messages, **kwargs)\n    \n    async def generate_embeddings(\n        self,\n        text: Union[str, List[str]],\n        model: str = \"text-embedding-3-small\",\n        **kwargs\n    ) -> Union[List[float], List[List[float]]]:\n        \"\"\"Generate embeddings for text.\n        \n        Args:\n            text: Text or list of texts\n            model: Embedding model to use\n            **kwargs: Additional parameters\n            \n        Returns:\n            Embeddings\n        \"\"\"\n        is_single = isinstance(text, str)\n        input_text = [text] if is_single else text\n        \n        response = await self.client.embeddings.create(\n            model=model,\n            input=input_text,\n            **kwargs\n        )\n        \n        embeddings = [item.embedding for item in response.data]\n        \n        return embeddings[0] if is_single else embeddings\n    \n    def count_tokens(self, text: str) -> int:\n        \"\"\"Count tokens in text.\n        \n        Args:\n            text: Text to count tokens for\n            \n        Returns:\n            Number of tokens\n        \"\"\"\n        return len(self.tokenizer.encode(text))\n    \n    def _process_image(self, image: Union[str, bytes, Image.Image, np.ndarray]) -> str:\n        \"\"\"Process image to base64 string.\n        \n        Args:\n            image: Image in various formats\n            \n        Returns:\n            Base64 encoded image string\n        \"\"\"\n        if isinstance(image, str):\n            # If it's a file path\n            with open(image, \"rb\") as f:\n                image_bytes = f.read()\n        elif isinstance(image, bytes):\n            image_bytes = image\n        elif isinstance(image, Image.Image):\n            # Convert PIL Image to bytes\n            buffer = io.BytesIO()\n            image.save(buffer, format=\"JPEG\")\n            image_bytes = buffer.getvalue()\n        elif isinstance(image, np.ndarray):\n            # Convert numpy array to PIL Image then to bytes\n            pil_image = Image.fromarray(image)\n            buffer = io.BytesIO()\n            pil_image.save(buffer, format=\"JPEG\")\n            image_bytes = buffer.getvalue()\n        else:\n            raise ValueError(f\"Unsupported image type: {type(image)}\")\n        \n        return base64.b64encode(image_bytes).decode(\"utf-8\")\n    \n    @property\n    def supports_functions(self) -> bool:\n        \"\"\"Check if model supports function calling.\"\"\"\n        return self.MODEL_CAPABILITIES.get(\n            self.model, \n            {\"functions\": False}\n        )[\"functions\"]\n    \n    @property\n    def supports_vision(self) -> bool:\n        \"\"\"Check if model supports vision inputs.\"\"\"\n        return self.MODEL_CAPABILITIES.get(\n            self.model,\n            {\"vision\": False}\n        )[\"vision\"]\n    \n    @property\n    def supports_streaming(self) -> bool:\n        \"\"\"Check if model supports streaming.\"\"\"\n        return self.MODEL_CAPABILITIES.get(\n            self.model,\n            {\"streaming\": True}\n        )[\"streaming\"]\n    \n    @property\n    def max_context_length(self) -> int:\n        \"\"\"Get maximum context length.\"\"\"\n        return self.MODEL_CAPABILITIES.get(\n            self.model,\n            {\"max_context\": 8192}\n        )[\"max_context\"]\n",
      "size_bytes": 10528
    },
    "multimodal-agent-builder/src/utils/__init__.py": {
      "content": "",
      "size_bytes": 0
    },
    "multimodal-agent-builder/src/utils/audio_utils.py": {
      "content": "\"\"\"Audio processing utilities for multimodal agents.\"\"\"\n\nimport io\nimport os\nfrom pathlib import Path\nfrom typing import Optional, Tuple, Union\n\ntry:\n    from pydub import AudioSegment\n    from pydub.silence import detect_silence, detect_nonsilent\n    PYDUB_AVAILABLE = True\nexcept ImportError:\n    PYDUB_AVAILABLE = False\n    AudioSegment = type('AudioSegment', (), {})  # Create dummy class for type hints\n    print(\"Warning: pydub not available. Audio processing will be limited.\")\n\n\nclass AudioProcessor:\n    \"\"\"Utility class for audio processing operations.\"\"\"\n    \n    SUPPORTED_FORMATS = {'.mp3', '.wav', '.ogg', '.m4a', '.flac', '.aac', '.wma'}\n    DEFAULT_SAMPLE_RATE = 16000  # 16kHz for speech\n    \n    def __init__(self):\n        \"\"\"Initialize audio processor.\"\"\"\n        if not PYDUB_AVAILABLE:\n            raise ImportError(\"pydub is required for audio processing. Install with: pip install pydub\")\n    \n    @staticmethod\n    def load_audio(\n        audio_input: Union[str, bytes, AudioSegment]\n    ) -> AudioSegment:\n        \"\"\"Load audio from various input types.\n        \n        Args:\n            audio_input: Audio as path, bytes, or AudioSegment\n            \n        Returns:\n            AudioSegment object\n        \"\"\"\n        if isinstance(audio_input, str):\n            # File path\n            path = Path(audio_input)\n            if not path.exists():\n                raise FileNotFoundError(f\"Audio file not found: {audio_input}\")\n            if path.suffix.lower() not in AudioProcessor.SUPPORTED_FORMATS:\n                raise ValueError(f\"Unsupported audio format: {path.suffix}\")\n            \n            # Detect format from extension\n            format = path.suffix[1:].lower()\n            if format == 'm4a':\n                format = 'mp4'\n            return AudioSegment.from_file(str(path), format=format)\n            \n        elif isinstance(audio_input, bytes):\n            # Bytes\n            return AudioSegment.from_file(io.BytesIO(audio_input))\n            \n        elif isinstance(audio_input, AudioSegment):\n            # Already an AudioSegment\n            return audio_input\n            \n        else:\n            raise ValueError(f\"Unsupported audio input type: {type(audio_input)}\")\n    \n    @staticmethod\n    def convert_format(\n        audio: AudioSegment,\n        output_format: str = \"wav\"\n    ) -> bytes:\n        \"\"\"Convert audio to a different format.\n        \n        Args:\n            audio: AudioSegment to convert\n            output_format: Target format\n            \n        Returns:\n            Converted audio as bytes\n        \"\"\"\n        buffer = io.BytesIO()\n        audio.export(buffer, format=output_format)\n        return buffer.getvalue()\n    \n    @staticmethod\n    def resample(\n        audio: AudioSegment,\n        sample_rate: int = 16000\n    ) -> AudioSegment:\n        \"\"\"Resample audio to a different sample rate.\n        \n        Args:\n            audio: AudioSegment to resample\n            sample_rate: Target sample rate in Hz\n            \n        Returns:\n            Resampled AudioSegment\n        \"\"\"\n        return audio.set_frame_rate(sample_rate)\n    \n    @staticmethod\n    def normalize(\n        audio: AudioSegment,\n        target_dBFS: float = -20.0\n    ) -> AudioSegment:\n        \"\"\"Normalize audio volume.\n        \n        Args:\n            audio: AudioSegment to normalize\n            target_dBFS: Target volume in dBFS\n            \n        Returns:\n            Normalized AudioSegment\n        \"\"\"\n        change_in_dBFS = target_dBFS - audio.dBFS\n        return audio.apply_gain(change_in_dBFS)\n    \n    @staticmethod\n    def trim_silence(\n        audio: AudioSegment,\n        silence_thresh: int = -40,\n        min_silence_len: int = 1000,\n        keep_silence: int = 100\n    ) -> AudioSegment:\n        \"\"\"Remove silence from beginning and end of audio.\n        \n        Args:\n            audio: AudioSegment to trim\n            silence_thresh: Silence threshold in dBFS\n            min_silence_len: Minimum length of silence in ms\n            keep_silence: Amount of silence to keep at boundaries in ms\n            \n        Returns:\n            Trimmed AudioSegment\n        \"\"\"\n        nonsilent_ranges = detect_nonsilent(\n            audio,\n            min_silence_len=min_silence_len,\n            silence_thresh=silence_thresh\n        )\n        \n        if not nonsilent_ranges:\n            return audio\n        \n        start_trim = max(0, nonsilent_ranges[0][0] - keep_silence)\n        end_trim = min(len(audio), nonsilent_ranges[-1][1] + keep_silence)\n        \n        return audio[start_trim:end_trim]\n    \n    @staticmethod\n    def split_on_silence(\n        audio: AudioSegment,\n        min_silence_len: int = 500,\n        silence_thresh: int = -40,\n        keep_silence: int = 200\n    ) -> list:\n        \"\"\"Split audio on silence.\n        \n        Args:\n            audio: AudioSegment to split\n            min_silence_len: Minimum length of silence for split in ms\n            silence_thresh: Silence threshold in dBFS\n            keep_silence: Amount of silence to keep at boundaries in ms\n            \n        Returns:\n            List of AudioSegment chunks\n        \"\"\"\n        chunks = []\n        nonsilent_ranges = detect_nonsilent(\n            audio,\n            min_silence_len=min_silence_len,\n            silence_thresh=silence_thresh\n        )\n        \n        for start_i, end_i in nonsilent_ranges:\n            start_i = max(0, start_i - keep_silence)\n            end_i = min(len(audio), end_i + keep_silence)\n            chunks.append(audio[start_i:end_i])\n        \n        return chunks\n    \n    @staticmethod\n    def get_audio_info(audio: AudioSegment) -> dict:\n        \"\"\"Get audio metadata.\n        \n        Args:\n            audio: AudioSegment\n            \n        Returns:\n            Dictionary of audio information\n        \"\"\"\n        return {\n            \"duration_seconds\": len(audio) / 1000.0,\n            \"sample_rate\": audio.frame_rate,\n            \"channels\": audio.channels,\n            \"sample_width\": audio.sample_width,\n            \"frame_count\": audio.frame_count(),\n            \"max_dBFS\": audio.max_dBFS,\n            \"rms\": audio.rms,\n            \"dBFS\": audio.dBFS\n        }\n    \n    @staticmethod\n    def prepare_for_speech(\n        audio: AudioSegment,\n        target_sample_rate: int = 16000,\n        mono: bool = True,\n        normalize_volume: bool = True\n    ) -> AudioSegment:\n        \"\"\"Prepare audio for speech recognition.\n        \n        Args:\n            audio: AudioSegment to prepare\n            target_sample_rate: Target sample rate\n            mono: Convert to mono\n            normalize_volume: Normalize volume\n            \n        Returns:\n            Prepared AudioSegment\n        \"\"\"\n        # Convert to mono if needed\n        if mono and audio.channels > 1:\n            audio = audio.set_channels(1)\n        \n        # Resample\n        if audio.frame_rate != target_sample_rate:\n            audio = audio.set_frame_rate(target_sample_rate)\n        \n        # Normalize volume\n        if normalize_volume:\n            audio = AudioProcessor.normalize(audio, target_dBFS=-20.0)\n        \n        # Trim silence\n        audio = AudioProcessor.trim_silence(audio)\n        \n        return audio\n    \n    @staticmethod\n    def chunk_audio(\n        audio: AudioSegment,\n        chunk_length_ms: int = 30000,\n        overlap_ms: int = 1000\n    ) -> list:\n        \"\"\"Split audio into overlapping chunks.\n        \n        Args:\n            audio: AudioSegment to chunk\n            chunk_length_ms: Length of each chunk in ms\n            overlap_ms: Overlap between chunks in ms\n            \n        Returns:\n            List of AudioSegment chunks\n        \"\"\"\n        chunks = []\n        start = 0\n        \n        while start < len(audio):\n            end = min(start + chunk_length_ms, len(audio))\n            chunks.append(audio[start:end])\n            start += chunk_length_ms - overlap_ms\n            \n            if start >= len(audio):\n                break\n        \n        return chunks\n\n\n# Integration with Google Speech-to-Text (from localized-narratives)\ndef prepare_for_google_speech(\n    audio_path: str,\n    output_path: Optional[str] = None\n) -> str:\n    \"\"\"Prepare audio for Google Speech-to-Text API.\n    \n    Args:\n        audio_path: Path to input audio file\n        output_path: Optional output path\n        \n    Returns:\n        Path to prepared audio file\n    \"\"\"\n    if not PYDUB_AVAILABLE:\n        raise ImportError(\"pydub required for audio conversion\")\n    \n    # Load audio\n    audio = AudioSegment.from_file(audio_path)\n    \n    # Convert to format supported by Google\n    # Google supports OGG Opus but not Vorbis\n    if output_path is None:\n        base_path = Path(audio_path).stem\n        output_path = f\"{base_path}_prepared.ogg\"\n    \n    # Export as OGG Opus\n    audio.export(output_path, format=\"ogg\", codec=\"libopus\")\n    \n    return output_path\n\n\n# Convenience functions\ndef load_and_prepare_audio(\n    audio_path: str,\n    for_speech: bool = True\n) -> AudioSegment:\n    \"\"\"Load and prepare audio file.\n    \n    Args:\n        audio_path: Path to audio file\n        for_speech: Prepare for speech recognition\n        \n    Returns:\n        Prepared AudioSegment\n    \"\"\"\n    processor = AudioProcessor()\n    audio = processor.load_audio(audio_path)\n    \n    if for_speech:\n        audio = processor.prepare_for_speech(audio)\n    \n    return audio\n\n\ndef audio_to_wav_bytes(audio_path: str) -> bytes:\n    \"\"\"Convert audio file to WAV bytes.\n    \n    Args:\n        audio_path: Path to audio file\n        \n    Returns:\n        WAV audio as bytes\n    \"\"\"\n    processor = AudioProcessor()\n    audio = processor.load_audio(audio_path)\n    return processor.convert_format(audio, \"wav\")\n\n\ndef validate_audio(audio_path: str) -> bool:\n    \"\"\"Validate if a file is supported audio.\n    \n    Args:\n        audio_path: Path to file\n        \n    Returns:\n        True if valid audio, False otherwise\n    \"\"\"\n    try:\n        path = Path(audio_path)\n        if not path.exists():\n            return False\n        if path.suffix.lower() not in AudioProcessor.SUPPORTED_FORMATS:\n            return False\n        \n        # Try to load the audio\n        if PYDUB_AVAILABLE:\n            AudioSegment.from_file(str(path))\n        return True\n    except:\n        return False\n",
      "size_bytes": 10339
    },
    "multimodal-agent-builder/src/utils/image_utils.py": {
      "content": "\"\"\"Image processing utilities with Localized Narratives integration.\"\"\"\n\nimport base64\nimport io\nfrom pathlib import Path\nfrom typing import Optional, Tuple, Union\n\nimport numpy as np\nfrom PIL import Image, ImageOps, ImageEnhance, ImageFilter\n\nfrom src.utils.narrative_utils import NarrativeEnhancer\nfrom src.utils.logging_utils import logger, handle_exception\n\n\nclass ImageProcessor:\n    \"\"\"Advanced image processing with narrative enhancement.\"\"\"\n    \n    SUPPORTED_FORMATS = {'.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp', '.tiff'}\n    MAX_SIZE = (1920, 1080)\n    \n    def __init__(self, enable_narratives: bool = False):\n        \"\"\"Initialize image processor.\n        \n        Args:\n            enable_narratives: Enable Localized Narratives enhancement\n        \"\"\"\n        self.narrative_enhancer = None\n        if enable_narratives:\n            try:\n                self.narrative_enhancer = NarrativeEnhancer()\n                logger.info(\"Initialized with Localized Narratives support\")\n            except Exception as e:\n                logger.warning(f\"Could not initialize narrative enhancer: {e}\")\n    \n    @staticmethod\n    def load_image(\n        image_input: Union[str, bytes, Image.Image, np.ndarray]\n    ) -> Image.Image:\n        \"\"\"Load image from various input types.\"\"\"\n        try:\n            if isinstance(image_input, str):\n                path = Path(image_input)\n                if not path.exists():\n                    raise FileNotFoundError(f\"Image file not found: {image_input}\")\n                if path.suffix.lower() not in ImageProcessor.SUPPORTED_FORMATS:\n                    raise ValueError(f\"Unsupported image format: {path.suffix}\")\n                return Image.open(path)\n                \n            elif isinstance(image_input, bytes):\n                return Image.open(io.BytesIO(image_input))\n                \n            elif isinstance(image_input, Image.Image):\n                return image_input\n                \n            elif isinstance(image_input, np.ndarray):\n                return Image.fromarray(image_input.astype('uint8'))\n                \n            else:\n                raise ValueError(f\"Unsupported image input type: {type(image_input)}\")\n                \n        except Exception as e:\n            handle_exception(e, {\"input_type\": type(image_input).__name__})\n            raise\n    \n    @staticmethod\n    def resize_image(\n        image: Image.Image,\n        max_size: Optional[Tuple[int, int]] = None,\n        maintain_aspect_ratio: bool = True\n    ) -> Image.Image:\n        \"\"\"Resize image to fit within max dimensions.\"\"\"\n        if max_size is None:\n            max_size = ImageProcessor.MAX_SIZE\n        \n        if maintain_aspect_ratio:\n            image.thumbnail(max_size, Image.Resampling.LANCZOS)\n            return image\n        else:\n            return image.resize(max_size, Image.Resampling.LANCZOS)\n    \n    @staticmethod\n    def optimize_for_api(\n        image: Image.Image,\n        max_size: Optional[Tuple[int, int]] = None,\n        quality: int = 85,\n        format: str = \"JPEG\"\n    ) -> bytes:\n        \"\"\"Optimize image for API transmission.\"\"\"\n        if max_size:\n            image = ImageProcessor.resize_image(image, max_size)\n        \n        # Convert RGBA to RGB if saving as JPEG\n        if format.upper() == \"JPEG\" and image.mode in ('RGBA', 'LA', 'P'):\n            background = Image.new('RGB', image.size, (255, 255, 255))\n            if image.mode == 'P':\n                image = image.convert('RGBA')\n            background.paste(image, mask=image.split()[-1] if image.mode == 'RGBA' else None)\n            image = background\n        \n        buffer = io.BytesIO()\n        image.save(buffer, format=format, quality=quality, optimize=True)\n        \n        logger.debug(f\"Optimized image: format={format}, size={image.size}, quality={quality}\")\n        \n        return buffer.getvalue()\n    \n    @staticmethod\n    def to_base64(\n        image: Union[Image.Image, bytes],\n        format: str = \"JPEG\",\n        add_data_url: bool = True\n    ) -> str:\n        \"\"\"Convert image to base64 string.\"\"\"\n        if isinstance(image, Image.Image):\n            buffer = io.BytesIO()\n            image.save(buffer, format=format)\n            image_bytes = buffer.getvalue()\n        else:\n            image_bytes = image\n        \n        base64_str = base64.b64encode(image_bytes).decode('utf-8')\n        \n        if add_data_url:\n            mime_type = f\"image/{format.lower()}\"\n            return f\"data:{mime_type};base64,{base64_str}\"\n        \n        return base64_str\n    \n    @staticmethod\n    def from_base64(base64_str: str) -> Image.Image:\n        \"\"\"Load image from base64 string.\"\"\"\n        if base64_str.startswith('data:'):\n            base64_str = base64_str.split(',')[1]\n        \n        image_bytes = base64.b64decode(base64_str)\n        return Image.open(io.BytesIO(image_bytes))\n    \n    def analyze_with_narratives(\n        self,\n        image: Union[str, Image.Image],\n        image_id: Optional[str] = None\n    ) -> dict:\n        \"\"\"Analyze image with narrative enhancement if available.\n        \n        Args:\n            image: Image to analyze\n            image_id: Optional image ID for narrative lookup\n            \n        Returns:\n            Analysis results\n        \"\"\"\n        # Load image if path\n        if isinstance(image, str):\n            img = self.load_image(image)\n            if not image_id:\n                image_id = Path(image).stem\n        else:\n            img = image\n        \n        # Basic analysis\n        analysis = {\n            \"size\": img.size,\n            \"mode\": img.mode,\n            \"format\": img.format,\n            \"width\": img.width,\n            \"height\": img.height,\n        }\n        \n        # Add narrative enhancement if available\n        if self.narrative_enhancer and image_id:\n            narrative = self.narrative_enhancer.get_narrative_for_image(image_id)\n            if narrative:\n                analysis[\"narrative\"] = self.narrative_enhancer.extract_image_description(narrative)\n                analysis[\"enhanced_caption\"] = self.narrative_enhancer.enhance_image_caption(\n                    f\"Image {image_id}\", narrative\n                )\n                logger.info(f\"Added narrative enhancement for image {image_id}\")\n        \n        return analysis\n    \n    @staticmethod\n    def create_thumbnail(\n        image: Image.Image,\n        size: Tuple[int, int] = (256, 256)\n    ) -> Image.Image:\n        \"\"\"Create a thumbnail of the image.\"\"\"\n        thumbnail = image.copy()\n        thumbnail.thumbnail(size, Image.Resampling.LANCZOS)\n        return thumbnail\n    \n    @staticmethod\n    def apply_transforms(\n        image: Image.Image,\n        rotate: Optional[int] = None,\n        flip_horizontal: bool = False,\n        flip_vertical: bool = False,\n        brightness: Optional[float] = None,\n        contrast: Optional[float] = None,\n        blur: Optional[float] = None,\n        sharpen: bool = False\n    ) -> Image.Image:\n        \"\"\"Apply various transformations to an image.\"\"\"\n        result = image.copy()\n        \n        if rotate:\n            result = result.rotate(rotate, expand=True)\n        \n        if flip_horizontal:\n            result = ImageOps.mirror(result)\n        if flip_vertical:\n            result = ImageOps.flip(result)\n        \n        if brightness is not None:\n            enhancer = ImageEnhance.Brightness(result)\n            result = enhancer.enhance(brightness)\n        \n        if contrast is not None:\n            enhancer = ImageEnhance.Contrast(result)\n            result = enhancer.enhance(contrast)\n        \n        if blur:\n            result = result.filter(ImageFilter.GaussianBlur(radius=blur))\n        \n        if sharpen:\n            result = result.filter(ImageFilter.SHARPEN)\n        \n        return result\n    \n    @staticmethod\n    def extract_metadata(image: Image.Image) -> dict:\n        \"\"\"Extract comprehensive image metadata.\"\"\"\n        metadata = {\n            \"format\": image.format,\n            \"mode\": image.mode,\n            \"size\": image.size,\n            \"width\": image.width,\n            \"height\": image.height,\n            \"info\": image.info,\n        }\n        \n        # Add EXIF data if available\n        if hasattr(image, '_getexif') and image._getexif():\n            from PIL.ExifTags import TAGS\n            exif_data = {}\n            for tag_id, value in image._getexif().items():\n                tag = TAGS.get(tag_id, tag_id)\n                exif_data[tag] = value\n            metadata[\"exif\"] = exif_data\n        \n        return metadata\n    \n    @staticmethod\n    def prepare_for_ocr(image: Image.Image) -> Image.Image:\n        \"\"\"Prepare image for OCR processing.\"\"\"\n        # Convert to grayscale\n        if image.mode != 'L':\n            image = image.convert('L')\n        \n        # Enhance contrast\n        enhancer = ImageEnhance.Contrast(image)\n        image = enhancer.enhance(2.0)\n        \n        # Apply slight sharpening\n        image = image.filter(ImageFilter.SHARPEN)\n        \n        return image\n    \n    def batch_process(\n        self,\n        images: list,\n        operation: callable,\n        **kwargs\n    ) -> list:\n        \"\"\"Apply an operation to multiple images.\"\"\"\n        results = []\n        for idx, img_input in enumerate(images):\n            try:\n                img = self.load_image(img_input)\n                processed = operation(img, **kwargs)\n                results.append(processed)\n                logger.debug(f\"Processed image {idx + 1}/{len(images)}\")\n            except Exception as e:\n                logger.error(f\"Error processing image {idx}: {e}\")\n                results.append(None)\n        \n        return results\n\n\n# Convenience functions\ndef load_and_optimize(\n    image_path: str,\n    max_size: Optional[Tuple[int, int]] = None\n) -> bytes:\n    \"\"\"Load and optimize an image for API use.\"\"\"\n    processor = ImageProcessor()\n    image = processor.load_image(image_path)\n    return processor.optimize_for_api(image, max_size)\n\n\ndef image_to_base64(image_path: str) -> str:\n    \"\"\"Convert image file to base64.\"\"\"\n    processor = ImageProcessor()\n    image = processor.load_image(image_path)\n    return processor.to_base64(image)\n\n\ndef validate_image(image_path: str) -> bool:\n    \"\"\"Validate if a file is a supported image.\"\"\"\n    try:\n        path = Path(image_path)\n        if not path.exists():\n            return False\n        if path.suffix.lower() not in ImageProcessor.SUPPORTED_FORMATS:\n            return False\n        \n        Image.open(path).verify()\n        return True\n    except:\n        return False\n\n\ndef create_enhanced_processor() -> ImageProcessor:\n    \"\"\"Create an image processor with narrative enhancement.\"\"\"\n    return ImageProcessor(enable_narratives=True)\n",
      "size_bytes": 10788
    },
    "multimodal-agent-builder/src/utils/logging_utils.py": {
      "content": "\"\"\"Logging and error handling utilities.\"\"\"\n\nimport json\nimport logging\nimport sys\nfrom datetime import datetime\nfrom pathlib import Path\nfrom typing import Any, Dict, Optional\n\nfrom config.config import settings\n\n\nclass ColoredFormatter(logging.Formatter):\n    \"\"\"Custom formatter with colors for terminal output.\"\"\"\n    \n    COLORS = {\n        'DEBUG': '\\033[36m',     # Cyan\n        'INFO': '\\033[32m',      # Green\n        'WARNING': '\\033[33m',   # Yellow\n        'ERROR': '\\033[31m',     # Red\n        'CRITICAL': '\\033[35m',  # Magenta\n    }\n    RESET = '\\033[0m'\n    \n    def format(self, record):\n        log_color = self.COLORS.get(record.levelname, self.RESET)\n        record.levelname = f\"{log_color}{record.levelname}{self.RESET}\"\n        return super().format(record)\n\n\nclass JSONFormatter(logging.Formatter):\n    \"\"\"JSON formatter for structured logging.\"\"\"\n    \n    def format(self, record):\n        log_data = {\n            \"timestamp\": datetime.utcnow().isoformat(),\n            \"level\": record.levelname,\n            \"logger\": record.name,\n            \"message\": record.getMessage(),\n            \"module\": record.module,\n            \"function\": record.funcName,\n            \"line\": record.lineno,\n        }\n        \n        # Add exception info if present\n        if record.exc_info:\n            log_data[\"exception\"] = self.formatException(record.exc_info)\n        \n        # Add extra fields\n        for key, value in record.__dict__.items():\n            if key not in ['name', 'msg', 'args', 'created', 'filename', \n                          'funcName', 'levelname', 'levelno', 'lineno', \n                          'module', 'msecs', 'pathname', 'process', \n                          'processName', 'relativeCreated', 'thread', \n                          'threadName', 'exc_info', 'exc_text', 'stack_info']:\n                log_data[key] = value\n        \n        return json.dumps(log_data)\n\n\ndef setup_logger(\n    name: str = \"multimodal_agent\",\n    level: Optional[str] = None,\n    log_file: Optional[str] = None,\n    format_type: Optional[str] = None\n) -> logging.Logger:\n    \"\"\"Setup a logger with configured handlers.\n    \n    Args:\n        name: Logger name\n        level: Log level (uses settings default if None)\n        log_file: Optional log file path\n        format_type: 'json' or 'plain' (uses settings default if None)\n        \n    Returns:\n        Configured logger\n    \"\"\"\n    logger = logging.getLogger(name)\n    \n    # Use settings defaults if not provided\n    level = level or settings.log_level\n    format_type = format_type or settings.log_format\n    \n    logger.setLevel(getattr(logging, level.upper()))\n    \n    # Remove existing handlers\n    logger.handlers = []\n    \n    # Console handler\n    console_handler = logging.StreamHandler(sys.stdout)\n    console_handler.setLevel(getattr(logging, level.upper()))\n    \n    # Choose formatter\n    if format_type == \"json\":\n        formatter = JSONFormatter()\n    else:\n        if sys.stdout.isatty():  # Use colors if terminal\n            formatter = ColoredFormatter(\n                '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n            )\n        else:\n            formatter = logging.Formatter(\n                '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n            )\n    \n    console_handler.setFormatter(formatter)\n    logger.addHandler(console_handler)\n    \n    # File handler if specified\n    if log_file:\n        file_handler = logging.FileHandler(log_file)\n        file_handler.setLevel(getattr(logging, level.upper()))\n        \n        # Always use JSON format for file logs\n        file_formatter = JSONFormatter()\n        file_handler.setFormatter(file_formatter)\n        logger.addHandler(file_handler)\n    \n    return logger\n\n\ndef get_agent_logger(agent_id: str) -> logging.Logger:\n    \"\"\"Get a logger for a specific agent.\n    \n    Args:\n        agent_id: Agent identifier\n        \n    Returns:\n        Logger for the agent\n    \"\"\"\n    return setup_logger(f\"agent.{agent_id}\")\n\n\ndef log_api_request(\n    logger: logging.Logger,\n    method: str,\n    endpoint: str,\n    data: Optional[Dict[str, Any]] = None,\n    headers: Optional[Dict[str, str]] = None\n):\n    \"\"\"Log an API request.\n    \n    Args:\n        logger: Logger to use\n        method: HTTP method\n        endpoint: API endpoint\n        data: Request data\n        headers: Request headers\n    \"\"\"\n    logger.info(\n        \"API Request\",\n        extra={\n            \"http_method\": method,\n            \"endpoint\": endpoint,\n            \"request_data\": data,\n            \"headers\": {k: v for k, v in (headers or {}).items() \n                       if k.lower() not in ['authorization', 'api-key']}\n        }\n    )\n\n\ndef log_api_response(\n    logger: logging.Logger,\n    status_code: int,\n    response_data: Optional[Any] = None,\n    error: Optional[str] = None\n):\n    \"\"\"Log an API response.\n    \n    Args:\n        logger: Logger to use\n        status_code: HTTP status code\n        response_data: Response data\n        error: Error message if any\n    \"\"\"\n    if error:\n        logger.error(\n            \"API Error\",\n            extra={\n                \"status_code\": status_code,\n                \"error\": error\n            }\n        )\n    else:\n        logger.info(\n            \"API Response\",\n            extra={\n                \"status_code\": status_code,\n                \"response_data\": response_data\n            }\n        )\n\n\ndef log_agent_action(\n    logger: logging.Logger,\n    agent_id: str,\n    action: str,\n    input_data: Any,\n    output_data: Any,\n    duration_ms: Optional[float] = None\n):\n    \"\"\"Log an agent action.\n    \n    Args:\n        logger: Logger to use\n        agent_id: Agent identifier\n        action: Action type\n        input_data: Input to the action\n        output_data: Output from the action\n        duration_ms: Duration in milliseconds\n    \"\"\"\n    logger.info(\n        f\"Agent action: {action}\",\n        extra={\n            \"agent_id\": agent_id,\n            \"action\": action,\n            \"input\": input_data,\n            \"output\": output_data,\n            \"duration_ms\": duration_ms\n        }\n    )\n\n\ndef log_model_usage(\n    logger: logging.Logger,\n    provider: str,\n    model: str,\n    prompt_tokens: int,\n    completion_tokens: int,\n    total_tokens: int,\n    cost: Optional[float] = None\n):\n    \"\"\"Log model token usage.\n    \n    Args:\n        logger: Logger to use\n        provider: LLM provider\n        model: Model name\n        prompt_tokens: Number of prompt tokens\n        completion_tokens: Number of completion tokens\n        total_tokens: Total tokens\n        cost: Optional cost estimate\n    \"\"\"\n    logger.info(\n        \"Model usage\",\n        extra={\n            \"provider\": provider,\n            \"model\": model,\n            \"prompt_tokens\": prompt_tokens,\n            \"completion_tokens\": completion_tokens,\n            \"total_tokens\": total_tokens,\n            \"estimated_cost\": cost\n        }\n    )\n\n\nclass ErrorTracker:\n    \"\"\"Track and analyze errors.\"\"\"\n    \n    def __init__(self, max_errors: int = 100):\n        \"\"\"Initialize error tracker.\n        \n        Args:\n            max_errors: Maximum number of errors to track\n        \"\"\"\n        self.errors = []\n        self.max_errors = max_errors\n        self.error_counts = {}\n    \n    def track_error(\n        self,\n        error: Exception,\n        context: Optional[Dict[str, Any]] = None\n    ):\n        \"\"\"Track an error.\n        \n        Args:\n            error: Exception that occurred\n            context: Additional context\n        \"\"\"\n        error_data = {\n            \"timestamp\": datetime.utcnow().isoformat(),\n            \"type\": type(error).__name__,\n            \"message\": str(error),\n            \"context\": context or {}\n        }\n        \n        self.errors.append(error_data)\n        \n        # Keep only max_errors\n        if len(self.errors) > self.max_errors:\n            self.errors = self.errors[-self.max_errors:]\n        \n        # Update counts\n        error_type = type(error).__name__\n        self.error_counts[error_type] = self.error_counts.get(error_type, 0) + 1\n    \n    def get_summary(self) -> Dict[str, Any]:\n        \"\"\"Get error summary.\n        \n        Returns:\n            Summary of tracked errors\n        \"\"\"\n        return {\n            \"total_errors\": len(self.errors),\n            \"error_types\": self.error_counts,\n            \"recent_errors\": self.errors[-10:] if self.errors else []\n        }\n    \n    def clear(self):\n        \"\"\"Clear all tracked errors.\"\"\"\n        self.errors = []\n        self.error_counts = {}\n\n\n# Global logger and error tracker\nlogger = setup_logger()\nerror_tracker = ErrorTracker()\n\n\ndef handle_exception(\n    exc: Exception,\n    context: Optional[Dict[str, Any]] = None,\n    reraise: bool = True\n):\n    \"\"\"Handle an exception with logging and tracking.\n    \n    Args:\n        exc: Exception to handle\n        context: Additional context\n        reraise: Whether to reraise the exception\n    \"\"\"\n    logger.error(\n        f\"Exception occurred: {exc}\",\n        exc_info=True,\n        extra={\"context\": context}\n    )\n    \n    error_tracker.track_error(exc, context)\n    \n    if reraise:\n        raise\n",
      "size_bytes": 9161
    },
    "multimodal-agent-builder/src/utils/narrative_utils.py": {
      "content": "\"\"\"Utilities for integrating Localized Narratives for enhanced image understanding.\"\"\"\n\nimport json\nimport os\nimport sys\nfrom pathlib import Path\nfrom typing import Dict, List, Optional, Tuple\n\n# Add localized-narratives to path\nproject_root = Path(__file__).parent.parent.parent\nln_path = project_root / \"localized-narratives\"\nsys.path.insert(0, str(ln_path))\n\ntry:\n    from localized_narratives import DataLoader, LocalizedNarrative\nexcept ImportError:\n    print(\"Warning: Could not import localized_narratives module\")\n    DataLoader = None\n    LocalizedNarrative = None\n\n\nclass NarrativeEnhancer:\n    \"\"\"Enhances image understanding using Localized Narratives dataset.\"\"\"\n    \n    def __init__(self, data_dir: Optional[str] = None):\n        \"\"\"Initialize the Narrative Enhancer.\n        \n        Args:\n            data_dir: Directory for storing narrative data\n        \"\"\"\n        if data_dir is None:\n            data_dir = str(project_root / \"data\" / \"narratives\")\n        \n        self.data_dir = Path(data_dir)\n        self.data_dir.mkdir(parents=True, exist_ok=True)\n        \n        self.loader = DataLoader(str(self.data_dir)) if DataLoader else None\n        self._narrative_cache = {}\n    \n    def download_narratives(self, dataset: str = \"coco_val\"):\n        \"\"\"Download narrative annotations for a dataset.\n        \n        Args:\n            dataset: Dataset to download (e.g., 'coco_train', 'coco_val', \n                    'open_images_train', 'flickr30k_train')\n        \"\"\"\n        if not self.loader:\n            raise ImportError(\"Localized Narratives module not available\")\n        \n        print(f\"Downloading {dataset} narratives...\")\n        self.loader.download_annotations(dataset)\n        print(f\"Downloaded {dataset} narratives to {self.data_dir}\")\n    \n    def load_narratives(\n        self, \n        dataset: str = \"coco_val\",\n        max_narratives: int = 100\n    ) -> List[LocalizedNarrative]:\n        \"\"\"Load narrative annotations from local files.\n        \n        Args:\n            dataset: Dataset to load\n            max_narratives: Maximum number of narratives to load\n            \n        Returns:\n            List of LocalizedNarrative objects\n        \"\"\"\n        if not self.loader:\n            raise ImportError(\"Localized Narratives module not available\")\n        \n        narratives = []\n        for narrative in self.loader.load_annotations(dataset, max_narratives):\n            narratives.append(narrative)\n            # Cache by image_id\n            self._narrative_cache[narrative.image_id] = narrative\n        \n        return narratives\n    \n    def get_narrative_for_image(self, image_id: str) -> Optional[LocalizedNarrative]:\n        \"\"\"Get narrative for a specific image ID.\n        \n        Args:\n            image_id: Image identifier\n            \n        Returns:\n            LocalizedNarrative object or None\n        \"\"\"\n        return self._narrative_cache.get(image_id)\n    \n    def extract_image_description(self, narrative: LocalizedNarrative) -> Dict:\n        \"\"\"Extract structured description from a narrative.\n        \n        Args:\n            narrative: LocalizedNarrative object\n            \n        Returns:\n            Dictionary with structured description\n        \"\"\"\n        return {\n            \"image_id\": narrative.image_id,\n            \"caption\": narrative.caption,\n            \"timed_words\": [\n                {\n                    \"text\": utterance.utterance,\n                    \"start_time\": utterance.start_time,\n                    \"end_time\": utterance.end_time\n                }\n                for utterance in narrative.timed_caption\n            ],\n            \"trace_points\": len(narrative.traces),\n            \"dataset\": narrative.dataset_id,\n            \"voice_url\": narrative.voice_recording_url if hasattr(narrative, 'voice_recording_url') else None\n        }\n    \n    def generate_training_prompt(\n        self, \n        narrative: LocalizedNarrative,\n        task: str = \"describe\"\n    ) -> str:\n        \"\"\"Generate a training prompt from a narrative.\n        \n        Args:\n            narrative: LocalizedNarrative object\n            task: Type of prompt ('describe', 'locate', 'analyze')\n            \n        Returns:\n            Training prompt string\n        \"\"\"\n        if task == \"describe\":\n            return f\"Describe this image in detail: {narrative.caption}\"\n        \n        elif task == \"locate\":\n            # Extract key objects from caption\n            words = narrative.caption.lower().split()\n            objects = [w for w in words if len(w) > 4][:5]  # Simple heuristic\n            return f\"Locate these objects in the image: {', '.join(objects)}\"\n        \n        elif task == \"analyze\":\n            return (f\"Analyze this image considering the following description: \"\n                   f\"{narrative.caption[:100]}... What details can you add?\")\n        \n        else:\n            return narrative.caption\n    \n    def create_multimodal_training_data(\n        self,\n        narratives: List[LocalizedNarrative],\n        output_file: str\n    ):\n        \"\"\"Create training data for multimodal models.\n        \n        Args:\n            narratives: List of narratives\n            output_file: Output JSON file path\n        \"\"\"\n        training_data = []\n        \n        for narrative in narratives:\n            data_point = {\n                \"image_id\": narrative.image_id,\n                \"dataset\": narrative.dataset_id,\n                \"prompts\": {\n                    \"describe\": self.generate_training_prompt(narrative, \"describe\"),\n                    \"locate\": self.generate_training_prompt(narrative, \"locate\"),\n                    \"analyze\": self.generate_training_prompt(narrative, \"analyze\")\n                },\n                \"ground_truth\": narrative.caption,\n                \"temporal_annotations\": [\n                    {\n                        \"text\": u.utterance,\n                        \"start\": u.start_time,\n                        \"end\": u.end_time\n                    }\n                    for u in narrative.timed_caption\n                ],\n                \"spatial_traces\": {\n                    \"num_traces\": len(narrative.traces),\n                    \"total_points\": sum(len(trace) for trace in narrative.traces)\n                }\n            }\n            training_data.append(data_point)\n        \n        # Save to file\n        with open(output_file, 'w') as f:\n            json.dump(training_data, f, indent=2)\n        \n        print(f\"Created training data with {len(training_data)} examples\")\n        return training_data\n    \n    def enhance_image_caption(\n        self,\n        basic_caption: str,\n        narrative: Optional[LocalizedNarrative] = None\n    ) -> str:\n        \"\"\"Enhance a basic caption using narrative data.\n        \n        Args:\n            basic_caption: Basic image caption\n            narrative: Optional narrative for enhancement\n            \n        Returns:\n            Enhanced caption\n        \"\"\"\n        if not narrative:\n            return basic_caption\n        \n        # Combine basic caption with narrative insights\n        enhanced = f\"{basic_caption} \"\n        \n        # Add temporal information\n        if narrative.timed_caption:\n            key_phrases = [u.utterance for u in narrative.timed_caption[:3]]\n            enhanced += f\"Key details: {', '.join(key_phrases)}. \"\n        \n        # Add spatial information\n        if narrative.traces:\n            enhanced += f\"The description covers {len(narrative.traces)} main areas of interest. \"\n        \n        return enhanced.strip()\n\n\ndef create_narrative_enhanced_agent_prompt(\n    image_id: str,\n    task: str,\n    enhancer: NarrativeEnhancer\n) -> str:\n    \"\"\"Create an enhanced prompt using narrative data.\n    \n    Args:\n        image_id: Image identifier\n        task: Task description\n        enhancer: NarrativeEnhancer instance\n        \n    Returns:\n        Enhanced prompt string\n    \"\"\"\n    narrative = enhancer.get_narrative_for_image(image_id)\n    \n    if not narrative:\n        return task\n    \n    description = enhancer.extract_image_description(narrative)\n    \n    prompt = f\"\"\"Task: {task}\n\nBased on detailed analysis, this image contains: {description['caption'][:200]}...\n\nKey temporal elements detected at:\n\"\"\"\n    \n    for timed in description['timed_words'][:3]:\n        prompt += f\"- {timed['text']} (timing: {timed['start_time']:.1f}s)\\n\"\n    \n    prompt += f\"\\nSpatial analysis shows {description['trace_points']} areas of interest.\"\n    \n    return prompt\n",
      "size_bytes": 8519
    },
    "multimodal-agent-builder/src/utils/training_utils.py": {
      "content": "\"\"\"Training utilities with recursive loop closure and dataset management.\"\"\"\n\nimport json\nimport os\nfrom pathlib import Path\nfrom typing import Any, Dict, List, Optional, Tuple, Union\nfrom dataclasses import dataclass\nfrom datetime import datetime\nimport pandas as pd\n\nfrom src.utils.narrative_utils import NarrativeEnhancer\nfrom src.utils.logging_utils import logger, setup_logger\n\n\n@dataclass\nclass RecursiveLoop:\n    \"\"\"Represents a recursive loop in the learning process.\"\"\"\n    loop_id: str\n    topic: str\n    hypothesis: str\n    pattern: str\n    structure: str\n    why_closed: str\n    timestamp: str = None\n    \n    def __post_init__(self):\n        if not self.timestamp:\n            self.timestamp = datetime.utcnow().isoformat()\n\n\nclass RecursiveLoopClosureLedger:\n    \"\"\"Manages recursive loop closure tracking inspired by living_system.ts.\"\"\"\n    \n    def __init__(self, ledger_file: Optional[str] = None):\n        \"\"\"Initialize the ledger.\n        \n        Args:\n            ledger_file: Optional path to persist ledger\n        \"\"\"\n        self.ledger_file = ledger_file\n        self.closed_loops: List[RecursiveLoop] = []\n        self.closure_recognition_agent = ClosureRecognitionAgent()\n        \n        if ledger_file and Path(ledger_file).exists():\n            self.load_ledger()\n    \n    def detect_and_log_closure(\n        self,\n        hypothesis: str,\n        pattern: str,\n        structure: str,\n        explanation: str,\n        topic: str = \"\"\n    ) -> bool:\n        \"\"\"Detect and log a closure.\n        \n        Args:\n            hypothesis: The hypothesis being tested\n            pattern: Pattern identified\n            structure: Structure used for analysis\n            explanation: Why the loop was closed\n            topic: Optional topic description\n            \n        Returns:\n            True if closure was detected and logged\n        \"\"\"\n        # Use closure recognition agent to validate\n        if self.closure_recognition_agent.detect_closure(hypothesis, pattern, structure):\n            loop_id = f\"RL-{len(self.closed_loops) + 1:03d}\"\n            \n            loop = RecursiveLoop(\n                loop_id=loop_id,\n                topic=topic or f\"Loop {len(self.closed_loops) + 1}\",\n                hypothesis=hypothesis,\n                pattern=pattern,\n                structure=structure,\n                why_closed=explanation\n            )\n            \n            self.closed_loops.append(loop)\n            logger.info(f\"Closed recursive loop {loop_id}: {topic}\")\n            \n            # Save ledger if file specified\n            if self.ledger_file:\n                self.save_ledger()\n            \n            return True\n        \n        logger.warning(\"Failed to detect closure\")\n        return False\n    \n    def get_ledger_df(self) -> pd.DataFrame:\n        \"\"\"Get ledger as pandas DataFrame.\n        \n        Returns:\n            DataFrame of closed loops\n        \"\"\"\n        data = [\n            {\n                \"Loop ID\": loop.loop_id,\n                \"Topic\": loop.topic,\n                \"Hypothesis\": loop.hypothesis,\n                \"Pattern\": loop.pattern,\n                \"Structure\": loop.structure,\n                \"Why Closed\": loop.why_closed,\n                \"Timestamp\": loop.timestamp\n            }\n            for loop in self.closed_loops\n        ]\n        \n        return pd.DataFrame(data)\n    \n    def save_ledger(self):\n        \"\"\"Save ledger to file.\"\"\"\n        if self.ledger_file:\n            df = self.get_ledger_df()\n            df.to_csv(self.ledger_file, index=False)\n            logger.info(f\"Saved ledger to {self.ledger_file}\")\n    \n    def load_ledger(self):\n        \"\"\"Load ledger from file.\"\"\"\n        if self.ledger_file and Path(self.ledger_file).exists():\n            df = pd.read_csv(self.ledger_file)\n            self.closed_loops = []\n            \n            for _, row in df.iterrows():\n                loop = RecursiveLoop(\n                    loop_id=row[\"Loop ID\"],\n                    topic=row[\"Topic\"],\n                    hypothesis=row[\"Hypothesis\"],\n                    pattern=row[\"Pattern\"],\n                    structure=row[\"Structure\"],\n                    why_closed=row[\"Why Closed\"],\n                    timestamp=row.get(\"Timestamp\", \"\")\n                )\n                self.closed_loops.append(loop)\n            \n            logger.info(f\"Loaded {len(self.closed_loops)} loops from ledger\")\n\n\nclass ClosureRecognitionAgent:\n    \"\"\"Agent for recognizing loop closure patterns (Python version of TypeScript class).\"\"\"\n    \n    def __init__(self):\n        \"\"\"Initialize the closure recognition agent.\"\"\"\n        self.closed_loops = []\n        self.logger = setup_logger(\"closure_agent\")\n    \n    def detect_closure(self, hypothesis: str, pattern: str, structure: str) -> bool:\n        \"\"\"Detect if a loop can be closed.\n        \n        Args:\n            hypothesis: Hypothesis to test\n            pattern: Pattern identified\n            structure: Structure used\n            \n        Returns:\n            True if closure is detected\n        \"\"\"\n        self.logger.debug(f\"Attempting closure detection: h={hypothesis}, p={pattern}, s={structure}\")\n        \n        # Validate inputs\n        valid = all([\n            isinstance(v, str) and v.strip() \n            for v in [hypothesis, pattern, structure]\n        ])\n        \n        if valid:\n            self.closed_loops.append({\n                \"hypothesis\": hypothesis,\n                \"pattern\": pattern,\n                \"structure\": structure\n            })\n            self.logger.info(\"Closure detected and stored\")\n            return True\n        \n        self.logger.warning(\"Closure not detected - invalid parameters\")\n        return False\n    \n    def report(self) -> List[Dict[str, str]]:\n        \"\"\"Report all closed loops.\n        \n        Returns:\n            List of closed loops\n        \"\"\"\n        return self.closed_loops\n\n\nclass AdaptiveTrainingManager:\n    \"\"\"Manages adaptive training with recursive loop closure.\"\"\"\n    \n    def __init__(\n        self,\n        train_path: str = \"train-test-validate/ML-Training\",\n        test_path: str = \"train-test-validate/ML-Testing\",\n        val_path: str = \"train-test-validate/ML-Validation\"\n    ):\n        \"\"\"Initialize training manager.\n        \n        Args:\n            train_path: Path to training data\n            test_path: Path to test data\n            val_path: Path to validation data\n        \"\"\"\n        self.train_path = Path(train_path)\n        self.test_path = Path(test_path)\n        self.val_path = Path(val_path)\n        \n        # Initialize ledger\n        self.ledger = RecursiveLoopClosureLedger(\n            ledger_file=\"training_closure_ledger.csv\"\n        )\n        \n        # Initialize narrative enhancer for training data\n        self.narrative_enhancer = NarrativeEnhancer()\n        \n        # Track training metrics\n        self.training_metrics = {\n            \"iterations\": 0,\n            \"closures\": 0,\n            \"patterns_found\": [],\n            \"hypotheses_tested\": []\n        }\n    \n    def load_training_data(self, dataset_type: str = \"open_images\") -> List[Dict]:\n        \"\"\"Load training data from files.\n        \n        Args:\n            dataset_type: Type of dataset to load\n            \n        Returns:\n            List of training examples\n        \"\"\"\n        training_data = []\n        \n        # Load Open Images narratives from training folder\n        if dataset_type == \"open_images\":\n            train_files = list(self.train_path.glob(\"open_images_train_*.jsonl\"))\n            \n            for file_path in train_files[:1]:  # Limit for demo\n                logger.info(f\"Loading training data from {file_path.name}\")\n                \n                with open(file_path, 'r') as f:\n                    for idx, line in enumerate(f):\n                        if idx >= 100:  # Limit for demo\n                            break\n                        try:\n                            data = json.loads(line)\n                            training_data.append(data)\n                        except json.JSONDecodeError:\n                            continue\n        \n        logger.info(f\"Loaded {len(training_data)} training examples\")\n        return training_data\n    \n    def create_training_loop(\n        self,\n        model_name: str,\n        training_data: List[Dict],\n        epochs: int = 3\n    ) -> Dict[str, Any]:\n        \"\"\"Create an adaptive training loop with closure detection.\n        \n        Args:\n            model_name: Name of the model being trained\n            training_data: Training examples\n            epochs: Number of training epochs\n            \n        Returns:\n            Training results\n        \"\"\"\n        results = {\n            \"model\": model_name,\n            \"epochs\": epochs,\n            \"loops_closed\": [],\n            \"final_metrics\": {}\n        }\n        \n        for epoch in range(epochs):\n            logger.info(f\"Starting epoch {epoch + 1}/{epochs}\")\n            \n            # Hypothesis for this epoch\n            hypothesis = f\"Model can learn patterns in epoch {epoch + 1}\"\n            \n            # Train on data (simplified simulation)\n            patterns_found = self._simulate_training(training_data, epoch)\n            \n            # Check for pattern emergence and loop closure\n            if patterns_found:\n                pattern = f\"Found {len(patterns_found)} patterns\"\n                structure = f\"Epoch {epoch + 1} training structure\"\n                explanation = f\"Patterns converged with {len(patterns_found)} discoveries\"\n                \n                # Attempt to close loop\n                if self.ledger.detect_and_log_closure(\n                    hypothesis=hypothesis,\n                    pattern=pattern,\n                    structure=structure,\n                    explanation=explanation,\n                    topic=f\"Training Epoch {epoch + 1}\"\n                ):\n                    results[\"loops_closed\"].append({\n                        \"epoch\": epoch + 1,\n                        \"patterns\": patterns_found\n                    })\n                    self.training_metrics[\"closures\"] += 1\n            \n            self.training_metrics[\"iterations\"] += 1\n        \n        results[\"final_metrics\"] = self.training_metrics\n        return results\n    \n    def _simulate_training(\n        self,\n        training_data: List[Dict],\n        epoch: int\n    ) -> List[str]:\n        \"\"\"Simulate training process.\n        \n        Args:\n            training_data: Training examples\n            epoch: Current epoch\n            \n        Returns:\n            List of patterns found\n        \"\"\"\n        patterns = []\n        \n        # Simulate pattern discovery\n        for idx, data in enumerate(training_data[:10]):  # Sample\n            if \"caption\" in data:\n                # Simulate finding patterns in captions\n                if epoch > 0 and idx % 3 == 0:\n                    patterns.append(f\"Pattern_{epoch}_{idx}\")\n        \n        self.training_metrics[\"patterns_found\"].extend(patterns)\n        return patterns\n    \n    def validate_with_closure(\n        self,\n        model_name: str,\n        validation_data: Optional[List[Dict]] = None\n    ) -> Dict[str, Any]:\n        \"\"\"Validate model with recursive closure checking.\n        \n        Args:\n            model_name: Name of model to validate\n            validation_data: Optional validation data\n            \n        Returns:\n            Validation results\n        \"\"\"\n        # Load validation data if not provided\n        if validation_data is None:\n            val_files = list(self.val_path.glob(\"*.jsonl\"))\n            validation_data = []\n            \n            for file_path in val_files[:1]:\n                with open(file_path, 'r') as f:\n                    for idx, line in enumerate(f):\n                        if idx >= 50:  # Limit for demo\n                            break\n                        try:\n                            validation_data.append(json.loads(line))\n                        except:\n                            continue\n        \n        # Validate and check for closure\n        hypothesis = f\"Model {model_name} generalizes to validation set\"\n        pattern = f\"Validation accuracy patterns\"\n        structure = \"Validation loop structure\"\n        \n        # Simulate validation metrics\n        accuracy = 0.85 + (0.1 if self.training_metrics[\"closures\"] > 0 else 0)\n        \n        if accuracy > 0.9:\n            explanation = f\"High validation accuracy ({accuracy:.2%}) confirms generalization\"\n            self.ledger.detect_and_log_closure(\n                hypothesis=hypothesis,\n                pattern=pattern,\n                structure=structure,\n                explanation=explanation,\n                topic=\"Model Validation\"\n            )\n        \n        return {\n            \"model\": model_name,\n            \"validation_accuracy\": accuracy,\n            \"samples_validated\": len(validation_data),\n            \"closure_achieved\": accuracy > 0.9\n        }\n    \n    def get_training_summary(self) -> Dict[str, Any]:\n        \"\"\"Get comprehensive training summary.\n        \n        Returns:\n            Training summary with metrics and closures\n        \"\"\"\n        return {\n            \"total_iterations\": self.training_metrics[\"iterations\"],\n            \"loops_closed\": self.training_metrics[\"closures\"],\n            \"patterns_discovered\": len(self.training_metrics[\"patterns_found\"]),\n            \"ledger\": self.ledger.get_ledger_df().to_dict('records'),\n            \"closure_rate\": (\n                self.training_metrics[\"closures\"] / self.training_metrics[\"iterations\"]\n                if self.training_metrics[\"iterations\"] > 0 else 0\n            )\n        }\n\n\ndef create_enhanced_training_pipeline(\n    agent_name: str,\n    dataset_type: str = \"open_images\"\n) -> AdaptiveTrainingManager:\n    \"\"\"Create an enhanced training pipeline with closure tracking.\n    \n    Args:\n        agent_name: Name of the agent being trained\n        dataset_type: Type of dataset to use\n        \n    Returns:\n        Configured training manager\n    \"\"\"\n    logger.info(f\"Creating enhanced training pipeline for {agent_name}\")\n    \n    # Initialize manager\n    manager = AdaptiveTrainingManager()\n    \n    # Load initial training data\n    training_data = manager.load_training_data(dataset_type)\n    \n    # Run training with closure detection\n    results = manager.create_training_loop(\n        model_name=agent_name,\n        training_data=training_data,\n        epochs=3\n    )\n    \n    # Validate\n    validation_results = manager.validate_with_closure(agent_name)\n    \n    logger.info(f\"Training complete: {results['loops_closed']} loops closed\")\n    logger.info(f\"Validation accuracy: {validation_results['validation_accuracy']:.2%}\")\n    \n    return manager\n",
      "size_bytes": 14817
    },
    "multimodal-agent-builder/tests/unit/test_agents.py": {
      "content": "\"\"\"Unit tests for agent implementations.\"\"\"\n\nimport pytest\nfrom unittest.mock import Mock, AsyncMock, patch, MagicMock\nfrom datetime import datetime\nfrom typing import Dict, Any\n\nfrom src.agents.base_agent import (\n    BaseAgent, AgentConfig, AgentState, AgentResponse,\n    AgentMemoryType, AgentMemory\n)\nfrom src.agents.simple_agent import SimpleAgent\nfrom src.agents.multimodal_agent import MultimodalAgent, MultimodalInput\nfrom src.agents.agent_factory import AgentFactory, AgentType, LLMProvider\n\n\nclass TestAgentConfig:\n    \"\"\"Test AgentConfig dataclass.\"\"\"\n    \n    @pytest.mark.unit\n    @pytest.mark.agent\n    def test_agent_config_creation(self):\n        \"\"\"Test AgentConfig creation with default values.\"\"\"\n        config = AgentConfig(\n            name=\"TestAgent\",\n            description=\"Test agent\",\n            model_provider=\"openai\",\n            model=\"gpt-4\"\n        )\n        \n        assert config.name == \"TestAgent\"\n        assert config.description == \"Test agent\"\n        assert config.model_provider == \"openai\"\n        assert config.model == \"gpt-4\"\n        assert config.temperature == 0.7  # Default\n        assert config.max_tokens == 4096  # Default\n        assert config.enable_memory is True  # Default\n        assert config.enable_tools is True  # Default\n    \n    @pytest.mark.unit\n    @pytest.mark.agent\n    def test_agent_config_custom_values(self):\n        \"\"\"Test AgentConfig with custom values.\"\"\"\n        config = AgentConfig(\n            name=\"CustomAgent\",\n            description=\"Custom test agent\",\n            model_provider=\"anthropic\",\n            model=\"claude-3-opus-20240229\",\n            temperature=0.5,\n            max_tokens=2000,\n            enable_memory=False,\n            enable_tools=False,\n            system_prompt=\"You are a custom assistant\"\n        )\n        \n        assert config.temperature == 0.5\n        assert config.max_tokens == 2000\n        assert config.enable_memory is False\n        assert config.enable_tools is False\n        assert config.system_prompt == \"You are a custom assistant\"\n\n\nclass TestAgentMemory:\n    \"\"\"Test AgentMemory implementation.\"\"\"\n    \n    @pytest.mark.unit\n    @pytest.mark.agent\n    def test_agent_memory_creation(self):\n        \"\"\"Test AgentMemory creation.\"\"\"\n        from src.models.base_llm import Message, MessageRole\n        memory = AgentMemory()\n        \n        assert memory.short_term == []\n        assert memory.long_term == {}\n        assert memory.episodic == []\n        assert memory.semantic == {}\n        assert memory.max_short_term_size == 50\n    \n    @pytest.mark.unit\n    @pytest.mark.agent\n    def test_short_term_memory(self):\n        \"\"\"Test short-term memory functionality.\"\"\"\n        from src.models.base_llm import Message, MessageRole\n        memory = AgentMemory()\n        \n        # Add messages\n        msg1 = Message(role=MessageRole.USER, content=\"Hello\")\n        msg2 = Message(role=MessageRole.ASSISTANT, content=\"Hi there!\")\n        \n        memory.add_to_short_term(msg1)\n        memory.add_to_short_term(msg2)\n        \n        # Get context\n        context = memory.get_context()\n        assert len(context) == 2\n        assert context[0].content == \"Hello\"\n        assert context[1].content == \"Hi there!\"\n        \n        # Clear short term\n        memory.clear_short_term()\n        assert len(memory.short_term) == 0\n    \n    @pytest.mark.unit\n    @pytest.mark.agent\n    def test_short_term_memory_limit(self):\n        \"\"\"Test short-term memory size limit.\"\"\"\n        from src.models.base_llm import Message, MessageRole\n        memory = AgentMemory(max_short_term_size=3)\n        \n        # Add more than limit\n        for i in range(5):\n            msg = Message(role=MessageRole.USER, content=f\"Message {i}\")\n            memory.add_to_short_term(msg)\n        \n        # Should only keep last 3\n        assert len(memory.short_term) == 3\n        assert memory.short_term[0].content == \"Message 2\"\n        assert memory.short_term[2].content == \"Message 4\"\n    \n    @pytest.mark.unit\n    @pytest.mark.agent\n    def test_episodic_memory(self):\n        \"\"\"Test episodic memory functionality.\"\"\"\n        memory = AgentMemory()\n        \n        # Add episodes\n        memory.add_episodic_memory({\"event\": \"task1\", \"result\": \"success\"})\n        memory.add_episodic_memory({\"event\": \"task2\", \"result\": \"failure\"})\n        \n        # Check episodes\n        assert len(memory.episodic) == 2\n        assert memory.episodic[0][\"event\"] == \"task1\"\n        assert memory.episodic[1][\"event\"] == \"task2\"\n        assert \"timestamp\" in memory.episodic[0]\n    \n    @pytest.mark.unit\n    @pytest.mark.agent\n    def test_semantic_memory(self):\n        \"\"\"Test semantic memory functionality.\"\"\"\n        memory = AgentMemory()\n        \n        # Add facts to semantic memory\n        memory.semantic[\"user_name\"] = \"John Doe\"\n        memory.semantic[\"user_preference\"] = \"dark mode\"\n        memory.semantic[\"location\"] = \"New York\"\n        \n        # Check facts\n        assert memory.semantic[\"user_name\"] == \"John Doe\"\n        assert memory.semantic[\"user_preference\"] == \"dark mode\"\n        assert memory.semantic[\"location\"] == \"New York\"\n        assert memory.semantic.get(\"unknown\") is None\n\n\nclass TestBaseAgent:\n    \"\"\"Test BaseAgent functionality.\"\"\"\n    \n    @pytest.mark.unit\n    @pytest.mark.agent\n    def test_base_agent_initialization(self, mock_llm_client):\n        \"\"\"Test BaseAgent initialization.\"\"\"\n        config = AgentConfig(\n            name=\"TestAgent\",\n            description=\"Test agent\",\n            model_provider=\"test\",\n            model=\"test-model\"\n        )\n        \n        # Create concrete implementation for testing\n        class TestAgentImpl(BaseAgent):\n            async def think(self, input_data, context=None, **kwargs):\n                return \"Test thought\"\n            \n            async def act(self, thought, available_actions=None, **kwargs):\n                return {\"action\": \"test_action\", \"result\": \"success\"}\n            \n            async def observe(self, action_result, **kwargs):\n                return \"Test observation\"\n            \n            async def run(self, input_data, **kwargs):\n                return AgentResponse(content=\"Test response\")\n        \n        agent = TestAgentImpl(config, mock_llm_client)\n        \n        assert agent.config == config\n        assert agent.llm_client == mock_llm_client\n        assert agent.state == AgentState.IDLE\n        assert isinstance(agent.id, str)\n        assert len(agent.id) == 36  # UUID length\n        assert isinstance(agent.created_at, datetime)\n        assert isinstance(agent.last_activity, datetime)\n    \n    @pytest.mark.unit\n    @pytest.mark.agent\n    def test_agent_memory_initialization(self, mock_llm_client):\n        \"\"\"Test agent memory initialization.\"\"\"\n        # With memory enabled\n        config = AgentConfig(\n            name=\"MemoryAgent\",\n            description=\"Agent with memory\",\n            model_provider=\"test\",\n            model=\"test-model\",\n            enable_memory=True\n        )\n        \n        class TestAgentImpl(BaseAgent):\n            async def think(self, input_data, context=None, **kwargs):\n                return \"Test thought\"\n            \n            async def act(self, thought, available_actions=None, **kwargs):\n                return {\"action\": \"test_action\", \"result\": \"success\"}\n            \n            async def observe(self, action_result, **kwargs):\n                return \"Test observation\"\n            \n            async def run(self, input_data, **kwargs):\n                return AgentResponse(content=\"Test\")\n        \n        agent = TestAgentImpl(config, mock_llm_client)\n        \n        assert agent.memory is not None\n        assert isinstance(agent.memory, AgentMemory)\n        assert agent.memory.short_term == []\n        assert agent.memory.episodic == []\n        assert agent.memory.semantic == {}\n        \n        # With memory disabled\n        config_no_memory = AgentConfig(\n            name=\"NoMemoryAgent\",\n            description=\"Agent without memory\",\n            model_provider=\"test\",\n            model=\"test-model\",\n            enable_memory=False\n        )\n        \n        agent_no_memory = TestAgentImpl(config_no_memory, mock_llm_client)\n        assert agent_no_memory.memory is None\n    \n    @pytest.mark.unit\n    @pytest.mark.agent\n    def test_agent_state_management(self, mock_llm_client):\n        \"\"\"Test agent state transitions.\"\"\"\n        config = AgentConfig(\n            name=\"TestAgent\",\n            description=\"Test agent\",\n            model_provider=\"test\",\n            model=\"test-model\"\n        )\n        \n        class TestAgentImpl(BaseAgent):\n            async def think(self, input_data, context=None, **kwargs):\n                return \"Test thought\"\n            \n            async def act(self, thought, available_actions=None, **kwargs):\n                return {\"action\": \"test_action\", \"result\": \"success\"}\n            \n            async def observe(self, action_result, **kwargs):\n                return \"Test observation\"\n            \n            async def run(self, input_data, **kwargs):\n                return AgentResponse(content=\"Test\")\n        \n        agent = TestAgentImpl(config, mock_llm_client)\n        \n        # Initial state\n        assert agent.state == AgentState.IDLE\n        \n        # Change states by simulating actions\n        agent.state = AgentState.THINKING\n        assert agent.state == AgentState.THINKING\n        \n        agent.state = AgentState.EXECUTING  # Changed from ACTING\n        assert agent.state == AgentState.EXECUTING\n        \n        agent.state = AgentState.COMPLETED\n        assert agent.state == AgentState.COMPLETED\n        \n        agent.state = AgentState.IDLE\n        assert agent.state == AgentState.IDLE\n    \n    @pytest.mark.unit\n    @pytest.mark.agent\n    @pytest.mark.asyncio\n    async def test_agent_chat(self, mock_llm_client):\n        \"\"\"Test agent chat functionality.\"\"\"\n        config = AgentConfig(\n            name=\"ChatAgent\",\n            description=\"Chat agent\",\n            model_provider=\"test\",\n            model=\"test-model\",\n            enable_memory=True\n        )\n        \n        class TestAgentImpl(BaseAgent):\n            async def think(self, input_data, context=None, **kwargs):\n                return \"Test thought\"\n            \n            async def act(self, thought, available_actions=None, **kwargs):\n                return {\"action\": \"test_action\", \"result\": \"success\"}\n            \n            async def observe(self, action_result, **kwargs):\n                return \"Test observation\"\n            \n            async def run(self, input_data, **kwargs):\n                return AgentResponse(content=\"Test response\")\n        \n        # Setup mock response\n        from src.models.base_llm import LLMResponse\n        mock_llm_client.generate.return_value = LLMResponse(\n            content=\"Hello! How can I help you?\",\n            model=\"test-model\",\n            usage={\"total_tokens\": 100}\n        )\n        \n        agent = TestAgentImpl(config, mock_llm_client)\n        \n        # Chat\n        response = await agent.chat(\"Hello, agent!\")\n        \n        assert response.content == \"Hello! How can I help you?\"\n        assert response.agent_id == agent.id\n        assert response.state == \"completed\"\n        \n        # Check memory was updated\n        assert agent.memory is not None\n        context = agent.memory.get_context()\n        assert len(context) == 2\n        assert context[0].content == \"Hello, agent!\"\n        assert context[1].content == \"Hello! How can I help you?\"\n\n\nclass TestSimpleAgent:\n    \"\"\"Test SimpleAgent implementation.\"\"\"\n    \n    @pytest.mark.unit\n    @pytest.mark.agent\n    def test_simple_agent_initialization(self, mock_llm_client):\n        \"\"\"Test SimpleAgent initialization.\"\"\"\n        config = AgentConfig(\n            name=\"SimpleAgent\",\n            description=\"Simple agent\",\n            model_provider=\"test\",\n            model=\"test-model\"\n        )\n        \n        agent = SimpleAgent(config, mock_llm_client)\n        \n        assert isinstance(agent, SimpleAgent)\n        assert agent.config == config\n        assert agent.llm_client == mock_llm_client\n    \n    @pytest.mark.unit\n    @pytest.mark.agent\n    @pytest.mark.asyncio\n    async def test_simple_agent_run(self, mock_llm_client):\n        \"\"\"Test SimpleAgent run method.\"\"\"\n        from src.models.base_llm import LLMResponse\n        config = AgentConfig(\n            name=\"SimpleAgent\",\n            description=\"Simple agent\",\n            model_provider=\"test\",\n            model=\"test-model\"\n        )\n        \n        mock_llm_client.generate.return_value = LLMResponse(\n            content=\"Simple response\",\n            model=\"test-model\",\n            usage={\"total_tokens\": 100}\n        )\n        \n        agent = SimpleAgent(config, mock_llm_client)\n        \n        # Run with string input\n        response = await agent.run(\"Test input\")\n        assert response.content == \"Simple response\"\n        assert response.agent_id == agent.id\n        \n        # Run with dict input\n        response = await agent.run({\"query\": \"Test query\"})\n        assert response.content == \"Simple response\"\n        \n        # Verify LLM was called\n        assert mock_llm_client.generate.called\n    \n    @pytest.mark.unit\n    @pytest.mark.agent\n    @pytest.mark.asyncio\n    async def test_simple_agent_with_context(self, mock_llm_client):\n        \"\"\"Test SimpleAgent with context.\"\"\"\n        from src.models.base_llm import LLMResponse\n        config = AgentConfig(\n            name=\"SimpleAgent\",\n            description=\"Simple agent\",\n            model_provider=\"test\",\n            model=\"test-model\"\n        )\n        \n        mock_llm_client.generate.return_value = LLMResponse(\n            content=\"Contextual response\",\n            model=\"test-model\",\n            usage={\"total_tokens\": 150}\n        )\n        \n        agent = SimpleAgent(config, mock_llm_client)\n        \n        # Run without context - SimpleAgent doesn't handle context in run()\n        response = await agent.run(\"Follow-up question\")\n        assert response.content == \"Contextual response\"\n        \n        # Verify LLM was called with appropriate messages\n        call_args = mock_llm_client.generate.call_args\n        messages = call_args[0][0]\n        assert len(messages) >= 1  # At least the user message\n\n\nclass TestMultimodalAgent:\n    \"\"\"Test MultimodalAgent implementation.\"\"\"\n    \n    @pytest.mark.unit\n    @pytest.mark.agent\n    def test_multimodal_agent_initialization(self, mock_llm_client):\n        \"\"\"Test MultimodalAgent initialization.\"\"\"\n        config = AgentConfig(\n            name=\"MultimodalAgent\",\n            description=\"Multimodal agent\",\n            model_provider=\"test\",\n            model=\"test-model\"\n        )\n        \n        agent = MultimodalAgent(config, mock_llm_client)\n        \n        assert isinstance(agent, MultimodalAgent)\n        assert agent.config == config\n        assert agent.llm_client == mock_llm_client\n    \n    @pytest.mark.unit\n    @pytest.mark.agent\n    def test_multimodal_agent_capabilities(self, mock_llm_client):\n        \"\"\"Test MultimodalAgent capability reporting.\"\"\"\n        config = AgentConfig(\n            name=\"MultimodalAgent\",\n            description=\"Multimodal agent\",\n            model_provider=\"openai\",\n            model=\"gpt-4-vision-preview\"\n        )\n        \n        # Mock the llm_client capabilities\n        mock_llm_client.supports_vision = True\n        mock_llm_client.supports_streaming = False\n        mock_llm_client.supports_functions = False\n        \n        agent = MultimodalAgent(config, mock_llm_client)\n        capabilities = agent.get_capabilities()\n        \n        assert \"text\" in capabilities\n        assert \"image\" in capabilities\n        assert \"audio\" in capabilities\n        assert capabilities[\"text\"] is True\n        assert capabilities[\"image\"] is True  # Because we mocked supports_vision\n    \n    @pytest.mark.unit\n    @pytest.mark.agent\n    @pytest.mark.asyncio\n    async def test_multimodal_agent_process_image(self, mock_llm_client, sample_image_data):\n        \"\"\"Test MultimodalAgent image processing.\"\"\"\n        config = AgentConfig(\n            name=\"VisionAgent\",\n            description=\"Vision agent\",\n            model_provider=\"openai\",\n            model=\"gpt-4-vision-preview\"\n        )\n        \n        from src.models.base_llm import LLMResponse\n        mock_llm_client.generate.return_value = LLMResponse(\n            content=\"I see an image\",\n            model=\"gpt-4-vision-preview\",\n            usage={\"total_tokens\": 200}\n        )\n        mock_llm_client.supports_vision = True\n        \n        agent = MultimodalAgent(config, mock_llm_client)\n        \n        # Process image\n        response = await agent.process_image(\n            image=sample_image_data,\n            prompt=\"What do you see?\"\n        )\n        \n        assert response.content == \"I see an image\"\n        assert response.metadata[\"modality\"] == \"image\"\n        assert response.agent_id == agent.id\n        \n        # Verify image was passed to LLM\n        call_args = mock_llm_client.generate.call_args\n        assert call_args[1].get(\"image\") == sample_image_data\n    \n    @pytest.mark.unit\n    @pytest.mark.agent\n    @pytest.mark.asyncio\n    @patch('src.utils.audio_utils.AudioProcessor')\n    async def test_multimodal_agent_process_audio(\n        self, mock_audio_processor, mock_llm_client, sample_audio_data\n    ):\n        \"\"\"Test MultimodalAgent audio processing.\"\"\"\n        config = AgentConfig(\n            name=\"AudioAgent\",\n            description=\"Audio agent\",\n            model_provider=\"openai\",\n            model=\"gpt-4\"\n        )\n        \n        # Setup audio processor mock\n        mock_processor = MagicMock()\n        mock_audio_processor.return_value = mock_processor\n        mock_processor.transcribe.return_value = \"Transcribed text\"\n        mock_processor.get_audio_features.return_value = {\n            \"duration\": 5.0,\n            \"sample_rate\": 44100\n        }\n        \n        # Note: The actual implementation returns a fixed response for audio\n        agent = MultimodalAgent(config, mock_llm_client)\n        \n        # Process audio\n        response = await agent.process_audio(\n            audio=sample_audio_data,\n            task=\"transcribe\"\n        )\n        \n        assert response.content == \"Audio processed\"\n        assert response.metadata[\"modality\"] == \"audio\"\n        assert response.metadata[\"task\"] == \"transcribe\"\n    \n    @pytest.mark.unit\n    @pytest.mark.agent\n    @pytest.mark.asyncio\n    async def test_multimodal_agent_process_multimodal(\n        self, mock_llm_client, sample_image_data, sample_audio_data\n    ):\n        \"\"\"Test MultimodalAgent with multiple modalities.\"\"\"\n        config = AgentConfig(\n            name=\"MultimodalAgent\",\n            description=\"Full multimodal agent\",\n            model_provider=\"openai\",\n            model=\"gpt-4\"\n        )\n        \n        from src.models.base_llm import LLMResponse\n        mock_llm_client.generate.return_value = LLMResponse(\n            content=\"Multimodal response\",\n            model=\"gpt-4\",\n            usage={\"total_tokens\": 250}\n        )\n        mock_llm_client.supports_vision = False\n        \n        agent = MultimodalAgent(config, mock_llm_client)\n        \n        # Create multimodal input\n        multimodal_input = MultimodalInput(\n            text=\"Describe what you see and hear\",\n            image=sample_image_data,\n            audio=sample_audio_data\n        )\n        \n        # Process multimodal input\n        response = await agent.process_multimodal(multimodal_input)\n        \n        assert response.content == \"Multimodal response\"\n        assert response.metadata[\"modality\"] == \"multimodal\"\n        assert \"modalities_used\" in response.metadata\n        assert \"text\" in response.metadata[\"modalities_used\"]\n\n\nclass TestAgentFactory:\n    \"\"\"Test AgentFactory functionality.\"\"\"\n    \n    @pytest.mark.unit\n    @pytest.mark.agent\n    def test_get_available_providers(self):\n        \"\"\"Test getting available LLM providers.\"\"\"\n        providers = AgentFactory.get_available_providers()\n        \n        assert \"openai\" in providers\n        assert \"gemini\" in providers\n        assert \"anthropic\" in providers\n        assert len(providers) >= 3\n    \n    @pytest.mark.unit\n    @pytest.mark.agent\n    def test_get_available_agent_types(self):\n        \"\"\"Test getting available agent types.\"\"\"\n        agent_types = AgentFactory.get_available_agent_types()\n        \n        assert \"simple\" in agent_types\n        assert \"multimodal\" in agent_types\n        assert \"langchain\" in agent_types\n        assert len(agent_types) >= 3\n    \n    @pytest.mark.unit\n    @pytest.mark.agent\n    def test_get_provider_models(self):\n        \"\"\"Test getting models for each provider.\"\"\"\n        # OpenAI models\n        openai_models = AgentFactory.get_provider_models(\"openai\")\n        assert \"gpt-4\" in openai_models\n        assert \"gpt-3.5-turbo\" in openai_models\n        \n        # Gemini models\n        gemini_models = AgentFactory.get_provider_models(\"gemini\")\n        assert \"gemini-pro\" in gemini_models\n        \n        # Anthropic models\n        anthropic_models = AgentFactory.get_provider_models(\"anthropic\")\n        assert \"claude-3-opus-20240229\" in anthropic_models\n        \n        # Invalid provider\n        invalid_models = AgentFactory.get_provider_models(\"invalid\")\n        assert len(invalid_models) == 0\n    \n    @pytest.mark.unit\n    @pytest.mark.agent\n    @patch('src.agents.agent_factory.OpenAIClient')\n    def test_create_simple_agent(self, mock_openai_client_class, mock_settings):\n        \"\"\"Test creating a simple agent.\"\"\"\n        # Setup mock\n        mock_client = MagicMock()\n        mock_openai_client_class.return_value = mock_client\n        \n        agent = AgentFactory.create_simple_agent(\n            name=\"TestSimple\",\n            provider=\"openai\",\n            model=\"gpt-4\"\n        )\n        \n        assert isinstance(agent, SimpleAgent)\n        assert agent.config.name == \"TestSimple\"\n        assert agent.config.model_provider == \"openai\"\n        assert agent.config.model == \"gpt-4\"\n    \n    @pytest.mark.unit\n    @pytest.mark.agent\n    @patch('src.agents.agent_factory.GeminiClient')\n    def test_create_multimodal_agent(self, mock_gemini_client_class, mock_settings):\n        \"\"\"Test creating a multimodal agent.\"\"\"\n        # Setup mock\n        mock_client = MagicMock()\n        mock_gemini_client_class.return_value = mock_client\n        \n        agent = AgentFactory.create_multimodal_agent(\n            name=\"TestMultimodal\",\n            provider=\"gemini\",\n            model=\"gemini-pro-vision\"\n        )\n        \n        assert isinstance(agent, MultimodalAgent)\n        assert agent.config.name == \"TestMultimodal\"\n        assert agent.config.model_provider == \"gemini\"\n        assert agent.config.model == \"gemini-pro-vision\"\n    \n    @pytest.mark.unit\n    @pytest.mark.agent\n    @patch('src.agents.agent_factory.OpenAIClient')\n    def test_create_agent_generic(self, mock_openai_client_class, mock_settings):\n        \"\"\"Test generic agent creation.\"\"\"\n        # Setup mock\n        mock_client = MagicMock()\n        mock_openai_client_class.return_value = mock_client\n        \n        # Create simple agent\n        simple = AgentFactory.create_agent(\n            name=\"Simple\",\n            type=\"simple\",\n            provider=\"openai\",\n            model=\"gpt-3.5-turbo\"\n        )\n        assert isinstance(simple, SimpleAgent)\n        \n        # Create multimodal agent\n        multimodal = AgentFactory.create_agent(\n            name=\"Multimodal\",\n            type=\"multimodal\",\n            provider=\"openai\",\n            model=\"gpt-4-vision-preview\"\n        )\n        assert isinstance(multimodal, MultimodalAgent)\n    \n    @pytest.mark.unit\n    @pytest.mark.agent\n    def test_create_agent_invalid_provider(self, mock_settings):\n        \"\"\"Test agent creation with invalid provider.\"\"\"\n        with pytest.raises(ValueError, match=\"Unknown provider\"):\n            AgentFactory.create_agent(\n                name=\"Invalid\",\n                type=\"simple\",\n                provider=\"invalid_provider\",\n                model=\"some-model\"\n            )\n    \n    @pytest.mark.unit\n    @pytest.mark.agent\n    @patch('src.agents.agent_factory.OpenAIClient')\n    def test_create_agent_invalid_type(self, mock_openai_client_class, mock_settings):\n        \"\"\"Test agent creation with invalid type.\"\"\"\n        mock_client = MagicMock()\n        mock_openai_client_class.return_value = mock_client\n        \n        with pytest.raises(ValueError, match=\"Unknown agent type\"):\n            AgentFactory.create_agent(\n                name=\"Invalid\",\n                type=\"invalid_type\",\n                provider=\"openai\",\n                model=\"gpt-4\"\n            )\n",
      "size_bytes": 24917
    },
    "multimodal-agent-builder/tests/unit/test_basic.py": {
      "content": "\"\"\"Basic tests to verify setup and core components.\"\"\"\n\nimport pytest\nfrom pathlib import Path\nimport sys\n\n# Add project root to path\nproject_root = Path(__file__).parent.parent.parent\nsys.path.insert(0, str(project_root))\n\n\nclass TestBasicSetup:\n    \"\"\"Test basic project setup.\"\"\"\n    \n    @pytest.mark.unit\n    def test_project_structure(self):\n        \"\"\"Test that project structure exists.\"\"\"\n        assert project_root.exists()\n        assert (project_root / \"src\").exists()\n        assert (project_root / \"config\").exists()\n        assert (project_root / \"tests\").exists()\n    \n    @pytest.mark.unit\n    def test_imports(self):\n        \"\"\"Test that basic imports work.\"\"\"\n        # Test config import\n        from config.config import Settings\n        settings = Settings()\n        assert settings is not None\n        \n        # Test agent imports\n        from src.agents.base_agent import BaseAgent, AgentConfig\n        assert BaseAgent is not None\n        assert AgentConfig is not None\n        \n        # Test model imports\n        from src.models.base_llm import BaseLLMClient\n        assert BaseLLMClient is not None\n    \n    @pytest.mark.unit\n    def test_agent_config_creation(self):\n        \"\"\"Test AgentConfig creation.\"\"\"\n        from src.agents.base_agent import AgentConfig\n        \n        config = AgentConfig(\n            name=\"TestAgent\",\n            description=\"A test agent\",\n            model_provider=\"openai\",\n            model=\"gpt-4\"\n        )\n        \n        assert config.name == \"TestAgent\"\n        assert config.description == \"A test agent\"\n        assert config.model_provider == \"openai\"\n        assert config.model == \"gpt-4\"\n    \n    @pytest.mark.unit\n    def test_settings_defaults(self):\n        \"\"\"Test Settings default values.\"\"\"\n        from config.config import Settings\n        \n        settings = Settings()\n        assert settings.app_name == \"Multimodal Agent Builder\"\n        assert settings.app_version == \"0.1.0\"\n        assert settings.app_port == 8000\n        assert settings.app_host == \"0.0.0.0\"\n    \n    @pytest.mark.unit\n    def test_utils_imports(self):\n        \"\"\"Test utility imports.\"\"\"\n        # Test logging utils\n        from src.utils.logging_utils import logger, setup_logger\n        assert logger is not None\n        assert setup_logger is not None\n        \n        # Test audio utils\n        from src.utils.audio_utils import AudioProcessor\n        assert AudioProcessor is not None\n        \n        # Test training utils\n        from src.utils.training_utils import AdaptiveTrainingManager\n        assert AdaptiveTrainingManager is not None\n    \n    @pytest.mark.unit\n    def test_api_imports(self):\n        \"\"\"Test API imports.\"\"\"\n        from src.main import app\n        assert app is not None\n        \n        from src.api.training_endpoints import router\n        assert router is not None\n    \n    @pytest.mark.unit\n    @pytest.mark.asyncio\n    async def test_basic_async(self):\n        \"\"\"Test basic async functionality.\"\"\"\n        import asyncio\n        \n        async def simple_async():\n            await asyncio.sleep(0.001)\n            return \"success\"\n        \n        result = await simple_async()\n        assert result == \"success\"\n",
      "size_bytes": 3218
    },
    "multimodal-agent-builder/tests/unit/test_llm_clients.py": {
      "content": "\"\"\"Fixed unit tests for LLM client implementations.\"\"\"\n\nimport pytest\nfrom unittest.mock import Mock, AsyncMock, patch, MagicMock\nimport json\nfrom typing import Dict, Any\n\nfrom src.models.base_llm import BaseLLMClient, LLMResponse, Message, MessageRole\n\n\nclass TestBaseLLMClient:\n    \"\"\"Test the base LLM client abstract class.\"\"\"\n    \n    @pytest.mark.unit\n    @pytest.mark.llm\n    def test_base_client_is_abstract(self):\n        \"\"\"Test that BaseLLMClient is abstract and cannot be instantiated.\"\"\"\n        # Should not be able to instantiate abstract class\n        with pytest.raises(TypeError):\n            client = BaseLLMClient(\n                api_key=\"test-key\",\n                model=\"test-model\",\n                temperature=0.7,\n                max_tokens=1000\n            )\n    \n    @pytest.mark.unit\n    @pytest.mark.llm\n    def test_message_dataclass(self):\n        \"\"\"Test Message dataclass.\"\"\"\n        msg = Message(\n            role=MessageRole.USER,\n            content=\"Test message\"\n        )\n        \n        assert msg.role == MessageRole.USER\n        assert msg.content == \"Test message\"\n        assert msg.name is None\n        assert msg.function_call is None\n        \n        # Test to_dict\n        msg_dict = msg.to_dict()\n        assert msg_dict[\"role\"] == \"user\"\n        assert msg_dict[\"content\"] == \"Test message\"\n",
      "size_bytes": 1344
    },
    "multimodal-agent-builder/tests/unit/test_llm_clients_basic.py": {
      "content": "\"\"\"Basic tests for LLM client implementations.\"\"\"\n\nimport pytest\nfrom unittest.mock import Mock, AsyncMock, patch, MagicMock\n\nfrom src.models.base_llm import BaseLLMClient, LLMResponse, Message, MessageRole\n\n\nclass TestBaseLLMClient:\n    \"\"\"Test the base LLM client abstract class.\"\"\"\n    \n    @pytest.mark.unit\n    @pytest.mark.llm\n    def test_base_client_is_abstract(self):\n        \"\"\"Test that BaseLLMClient is abstract and cannot be instantiated.\"\"\"\n        # Should not be able to instantiate abstract class\n        with pytest.raises(TypeError):\n            client = BaseLLMClient(\n                api_key=\"test-key\",\n                model=\"test-model\",\n                temperature=0.7,\n                max_tokens=1000\n            )\n    \n    @pytest.mark.unit\n    @pytest.mark.llm\n    def test_message_dataclass(self):\n        \"\"\"Test Message dataclass.\"\"\"\n        msg = Message(\n            role=MessageRole.USER,\n            content=\"Test message\"\n        )\n        \n        assert msg.role == MessageRole.USER\n        assert msg.content == \"Test message\"\n        assert msg.name is None\n        assert msg.function_call is None\n        \n        # Test to_dict\n        msg_dict = msg.to_dict()\n        assert msg_dict[\"role\"] == \"user\"\n        assert msg_dict[\"content\"] == \"Test message\"\n    \n    @pytest.mark.unit\n    @pytest.mark.llm\n    def test_message_role_enum(self):\n        \"\"\"Test MessageRole enum.\"\"\"\n        assert MessageRole.SYSTEM.value == \"system\"\n        assert MessageRole.USER.value == \"user\"\n        assert MessageRole.ASSISTANT.value == \"assistant\"\n        assert MessageRole.FUNCTION.value == \"function\"\n    \n    @pytest.mark.unit\n    @pytest.mark.llm\n    def test_llm_response_dataclass(self):\n        \"\"\"Test LLMResponse dataclass.\"\"\"\n        response = LLMResponse(\n            content=\"Test response\",\n            model=\"gpt-4\",\n            usage={\"total_tokens\": 100}\n        )\n        \n        assert response.content == \"Test response\"\n        assert response.model == \"gpt-4\"\n        assert response.usage[\"total_tokens\"] == 100\n        assert response.finish_reason is None\n        assert response.function_call is None\n        assert response.raw_response is None\n",
      "size_bytes": 2205
    },
    "multimodal-agent-builder/tests/unit/test_llm_clients_old.py": {
      "content": "\"\"\"Unit tests for LLM client implementations.\"\"\"\n\nimport pytest\nfrom unittest.mock import Mock, AsyncMock, patch, MagicMock\nimport json\nfrom typing import Dict, Any\n\nfrom src.models.base_llm import BaseLLMClient, LLMResponse, Message, MessageRole\nfrom src.models.openai_client import OpenAIClient\nfrom src.models.gemini_client import GeminiClient\nfrom src.models.claude_client import ClaudeClient\n\n\nclass TestBaseLLMClient:\n    \"\"\"Test the base LLM client abstract class.\"\"\"\n    \n    @pytest.mark.unit\n    @pytest.mark.llm\n    def test_base_client_is_abstract(self):\n        \"\"\"Test that BaseLLMClient is abstract and cannot be instantiated.\"\"\"\n        # Should not be able to instantiate abstract class\n        with pytest.raises(TypeError):\n            client = BaseLLMClient(\n                api_key=\"test-key\",\n                model=\"test-model\",\n                temperature=0.7,\n                max_tokens=1000\n            )\n    \n    @pytest.mark.unit\n    @pytest.mark.llm\n    def test_message_dataclass(self):\n        \"\"\"Test Message dataclass.\"\"\"\n        msg = Message(\n            role=MessageRole.USER,\n            content=\"Test message\"\n        )\n        \n        assert msg.role == MessageRole.USER\n        assert msg.content == \"Test message\"\n        assert msg.name is None\n        assert msg.function_call is None\n        \n        # Test to_dict\n        msg_dict = msg.to_dict()\n        assert msg_dict[\"role\"] == \"user\"\n        assert msg_dict[\"content\"] == \"Test message\"\n\n\nclass TestOpenAIClient:\n    \"\"\"Test OpenAI client implementation.\"\"\"\n    \n    @pytest.mark.unit\n    @pytest.mark.llm\n    @patch('openai.AsyncOpenAI')\n    @patch('src.models.openai_client.settings')\n    def test_openai_client_initialization(self, mock_settings, mock_openai_class):\n        \"\"\"Test OpenAI client initialization.\"\"\"\n        # Mock settings\n        mock_settings.get_llm_config.return_value = {\n            \"api_key\": \"test-openai-key\",\n            \"model\": \"gpt-4\",\n            \"temperature\": 0.7,\n            \"max_tokens\": 1000\n        }\n        \n        client = OpenAIClient(\n            api_key=\"test-openai-key\",\n            model=\"gpt-4\",\n            temperature=0.7\n        )\n        \n        assert client.model == \"gpt-4\"\n        assert client.api_key == \"test-openai-key\"\n        mock_openai_class.assert_called_once()\n    \n    @pytest.mark.unit\n    @pytest.mark.llm\n    @pytest.mark.asyncio\n    @patch('openai.AsyncOpenAI')\n    @patch('src.models.openai_client.settings')\n    async def test_openai_generate(self, mock_settings, mock_openai_class, mock_openai_response):\n        \"\"\"Test OpenAI generate method.\"\"\"\n        # Mock settings\n        mock_settings.get_llm_config.return_value = {\n            \"api_key\": \"test-key\",\n            \"model\": \"gpt-4\",\n            \"temperature\": 0.7,\n            \"max_tokens\": 1000\n        }\n        # Setup mock\n        mock_client = MagicMock()\n        mock_openai_class.return_value = mock_client\n        mock_client.chat.completions.create = AsyncMock(return_value=Mock(**mock_openai_response))\n        \n        client = OpenAIClient(api_key=\"test-key\", model=\"gpt-4\")\n        \n        # Test generation\n        messages = [{\"role\": \"user\", \"content\": \"Hello\"}]\n        response = await client.generate(messages)\n        \n        assert response == \"This is a test response from OpenAI\"\n        mock_client.chat.completions.create.assert_called_once()\n    \n    @pytest.mark.unit\n    @pytest.mark.llm\n    @pytest.mark.asyncio\n    @patch('openai.OpenAI')\n    async def test_openai_generate_with_image(self, mock_openai_class, mock_openai_response):\n        \"\"\"Test OpenAI generate with image support.\"\"\"\n        # Setup mock\n        mock_client = MagicMock()\n        mock_openai_class.return_value = mock_client\n        mock_client.chat.completions.create.return_value = Mock(**mock_openai_response)\n        \n        config = LLMConfig(api_key=\"test-key\", model=\"gpt-4-vision-preview\")\n        client = OpenAIClient(config)\n        \n        # Test generation with image\n        messages = [{\"role\": \"user\", \"content\": \"Describe this image\"}]\n        response = await client.generate(messages, image=b\"fake-image-data\")\n        \n        assert response == \"This is a test response from OpenAI\"\n        \n        # Verify image was processed\n        call_args = mock_client.chat.completions.create.call_args\n        assert call_args is not None\n        messages_arg = call_args[1]['messages']\n        assert any(\"image_url\" in str(msg) for msg in messages_arg)\n    \n    @pytest.mark.unit\n    @pytest.mark.llm\n    @patch('openai.OpenAI')\n    def test_openai_count_tokens(self, mock_openai_class):\n        \"\"\"Test OpenAI token counting.\"\"\"\n        mock_client = MagicMock()\n        mock_openai_class.return_value = mock_client\n        \n        config = LLMConfig(api_key=\"test-key\", model=\"gpt-4\")\n        client = OpenAIClient(config)\n        \n        # Test token counting (approximation)\n        text = \"This is a test message\"\n        token_count = client.count_tokens(text)\n        \n        assert token_count > 0\n        assert isinstance(token_count, int)\n    \n    @pytest.mark.unit\n    @pytest.mark.llm\n    @pytest.mark.asyncio\n    @patch('openai.OpenAI')\n    async def test_openai_function_calling(self, mock_openai_class):\n        \"\"\"Test OpenAI function calling support.\"\"\"\n        # Setup mock with function call response\n        mock_client = MagicMock()\n        mock_openai_class.return_value = mock_client\n        \n        function_response = {\n            \"id\": \"chatcmpl-test\",\n            \"object\": \"chat.completion\",\n            \"created\": 1234567890,\n            \"model\": \"gpt-4\",\n            \"choices\": [{\n                \"index\": 0,\n                \"message\": {\n                    \"role\": \"assistant\",\n                    \"content\": None,\n                    \"function_call\": {\n                        \"name\": \"get_weather\",\n                        \"arguments\": '{\"location\": \"New York\"}'\n                    }\n                },\n                \"finish_reason\": \"function_call\"\n            }],\n            \"usage\": {\"prompt_tokens\": 10, \"completion_tokens\": 20, \"total_tokens\": 30}\n        }\n        \n        mock_client.chat.completions.create.return_value = Mock(**function_response)\n        \n        config = LLMConfig(api_key=\"test-key\", model=\"gpt-4\")\n        client = OpenAIClient(config)\n        \n        # Test with functions\n        messages = [{\"role\": \"user\", \"content\": \"What's the weather?\"}]\n        functions = [{\n            \"name\": \"get_weather\",\n            \"description\": \"Get weather information\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"location\": {\"type\": \"string\"}\n                }\n            }\n        }]\n        \n        response = await client.generate(messages, functions=functions)\n        \n        # Should return function call info\n        assert \"get_weather\" in response\n        assert \"New York\" in response\n\n\nclass TestGeminiClient:\n    \"\"\"Test Gemini client implementation.\"\"\"\n    \n    @pytest.mark.unit\n    @pytest.mark.llm\n    @patch('google.generativeai.configure')\n    @patch('google.generativeai.GenerativeModel')\n    def test_gemini_client_initialization(self, mock_model_class, mock_configure):\n        \"\"\"Test Gemini client initialization.\"\"\"\n        config = LLMConfig(\n            api_key=\"test-gemini-key\",\n            model=\"gemini-pro\",\n            temperature=0.7\n        )\n        \n        client = GeminiClient(config)\n        \n        assert client.model == \"gemini-pro\"\n        assert client.provider == \"gemini\"\n        assert client.config == config\n        mock_configure.assert_called_once_with(api_key=\"test-gemini-key\")\n        mock_model_class.assert_called_once_with(\"gemini-pro\")\n    \n    @pytest.mark.unit\n    @pytest.mark.llm\n    @pytest.mark.asyncio\n    @patch('google.generativeai.configure')\n    @patch('google.generativeai.GenerativeModel')\n    async def test_gemini_generate(self, mock_model_class, mock_configure, mock_gemini_response):\n        \"\"\"Test Gemini generate method.\"\"\"\n        # Setup mock\n        mock_model = MagicMock()\n        mock_model_class.return_value = mock_model\n        mock_model.generate_content.return_value = Mock(**mock_gemini_response)\n        \n        config = LLMConfig(api_key=\"test-key\", model=\"gemini-pro\")\n        client = GeminiClient(config)\n        \n        # Test generation\n        messages = [{\"role\": \"user\", \"content\": \"Hello\"}]\n        response = await client.generate(messages)\n        \n        assert response == \"This is a test response from Gemini\"\n        mock_model.generate_content.assert_called_once()\n    \n    @pytest.mark.unit\n    @pytest.mark.llm\n    @pytest.mark.asyncio\n    @patch('google.generativeai.configure')\n    @patch('google.generativeai.GenerativeModel')\n    @patch('PIL.Image.open')\n    async def test_gemini_generate_with_image(self, mock_pil_open, mock_model_class, mock_configure):\n        \"\"\"Test Gemini generate with image support.\"\"\"\n        # Setup mocks\n        mock_model = MagicMock()\n        mock_model_class.return_value = mock_model\n        mock_image = MagicMock()\n        mock_pil_open.return_value = mock_image\n        \n        response_mock = MagicMock()\n        response_mock.text = \"Image description from Gemini\"\n        mock_model.generate_content.return_value = response_mock\n        \n        config = LLMConfig(api_key=\"test-key\", model=\"gemini-pro-vision\")\n        client = GeminiClient(config)\n        \n        # Test generation with image\n        messages = [{\"role\": \"user\", \"content\": \"Describe this image\"}]\n        response = await client.generate(messages, image=b\"fake-image-data\")\n        \n        assert response == \"Image description from Gemini\"\n        mock_model.generate_content.assert_called_once()\n        \n        # Verify image was processed\n        call_args = mock_model.generate_content.call_args\n        assert len(call_args[0]) > 0  # Should have content list\n    \n    @pytest.mark.unit\n    @pytest.mark.llm\n    @patch('google.generativeai.configure')\n    @patch('google.generativeai.GenerativeModel')\n    def test_gemini_count_tokens(self, mock_model_class, mock_configure):\n        \"\"\"Test Gemini token counting.\"\"\"\n        mock_model = MagicMock()\n        mock_model_class.return_value = mock_model\n        mock_model.count_tokens.return_value = Mock(total_tokens=15)\n        \n        config = LLMConfig(api_key=\"test-key\", model=\"gemini-pro\")\n        client = GeminiClient(config)\n        \n        # Test token counting\n        text = \"This is a test message\"\n        token_count = client.count_tokens(text)\n        \n        assert token_count == 15\n        mock_model.count_tokens.assert_called_once_with(text)\n\n\nclass TestClaudeClient:\n    \"\"\"Test Claude client implementation.\"\"\"\n    \n    @pytest.mark.unit\n    @pytest.mark.llm\n    @patch('anthropic.Anthropic')\n    def test_claude_client_initialization(self, mock_anthropic_class):\n        \"\"\"Test Claude client initialization.\"\"\"\n        config = LLMConfig(\n            api_key=\"test-anthropic-key\",\n            model=\"claude-3-opus-20240229\",\n            temperature=0.7\n        )\n        \n        client = ClaudeClient(config)\n        \n        assert client.model == \"claude-3-opus-20240229\"\n        assert client.provider == \"anthropic\"\n        assert client.config == config\n        mock_anthropic_class.assert_called_once_with(api_key=\"test-anthropic-key\")\n    \n    @pytest.mark.unit\n    @pytest.mark.llm\n    @pytest.mark.asyncio\n    @patch('anthropic.Anthropic')\n    async def test_anthropic_generate(self, mock_anthropic_class, mock_anthropic_response):\n        \"\"\"Test Anthropic generate method.\"\"\"\n        # Setup mock\n        mock_client = MagicMock()\n        mock_anthropic_class.return_value = mock_client\n        mock_client.messages.create.return_value = Mock(**mock_anthropic_response)\n        \n        config = LLMConfig(api_key=\"test-key\", model=\"claude-3-opus-20240229\")\n        client = AnthropicClient(config)\n        \n        # Test generation\n        messages = [{\"role\": \"user\", \"content\": \"Hello\"}]\n        response = await client.generate(messages)\n        \n        assert response == \"This is a test response from Claude\"\n        mock_client.messages.create.assert_called_once()\n    \n    @pytest.mark.unit\n    @pytest.mark.llm\n    @pytest.mark.asyncio\n    @patch('anthropic.Anthropic')\n    async def test_anthropic_generate_with_image(self, mock_anthropic_class):\n        \"\"\"Test Anthropic generate with image support.\"\"\"\n        # Setup mock with image response\n        mock_client = MagicMock()\n        mock_anthropic_class.return_value = mock_client\n        \n        image_response = {\n            \"id\": \"msg_test\",\n            \"type\": \"message\",\n            \"role\": \"assistant\",\n            \"content\": [{\n                \"type\": \"text\",\n                \"text\": \"I can see an image\"\n            }],\n            \"model\": \"claude-3-opus-20240229\",\n            \"stop_reason\": \"end_turn\",\n            \"usage\": {\"input_tokens\": 50, \"output_tokens\": 20}\n        }\n        \n        mock_client.messages.create.return_value = Mock(**image_response)\n        \n        config = LLMConfig(api_key=\"test-key\", model=\"claude-3-opus-20240229\")\n        client = AnthropicClient(config)\n        \n        # Test generation with image\n        messages = [{\"role\": \"user\", \"content\": \"Describe this image\"}]\n        response = await client.generate(messages, image=b\"fake-image-data\")\n        \n        assert response == \"I can see an image\"\n        \n        # Verify image was included in request\n        call_args = mock_client.messages.create.call_args\n        messages_arg = call_args[1]['messages']\n        assert any(\"image\" in str(msg).lower() for msg in messages_arg)\n    \n    @pytest.mark.unit\n    @pytest.mark.llm\n    @patch('anthropic.Anthropic')\n    def test_anthropic_count_tokens(self, mock_anthropic_class):\n        \"\"\"Test Anthropic token counting.\"\"\"\n        mock_client = MagicMock()\n        mock_anthropic_class.return_value = mock_client\n        \n        config = LLMConfig(api_key=\"test-key\", model=\"claude-3-opus-20240229\")\n        client = AnthropicClient(config)\n        \n        # Test token counting (approximation)\n        text = \"This is a test message\"\n        token_count = client.count_tokens(text)\n        \n        assert token_count > 0\n        assert isinstance(token_count, int)\n    \n    @pytest.mark.unit\n    @pytest.mark.llm\n    @pytest.mark.asyncio\n    @patch('anthropic.Anthropic')\n    async def test_anthropic_system_prompt(self, mock_anthropic_class):\n        \"\"\"Test Anthropic system prompt handling.\"\"\"\n        mock_client = MagicMock()\n        mock_anthropic_class.return_value = mock_client\n        \n        response_data = {\n            \"id\": \"msg_test\",\n            \"type\": \"message\",\n            \"role\": \"assistant\",\n            \"content\": [{\"type\": \"text\", \"text\": \"Following system instructions\"}],\n            \"model\": \"claude-3-opus-20240229\",\n            \"stop_reason\": \"end_turn\",\n            \"usage\": {\"input_tokens\": 30, \"output_tokens\": 10}\n        }\n        \n        mock_client.messages.create.return_value = Mock(**response_data)\n        \n        config = LLMConfig(\n            api_key=\"test-key\",\n            model=\"claude-3-opus-20240229\",\n            system_prompt=\"You are a helpful assistant\"\n        )\n        client = AnthropicClient(config)\n        \n        # Test with system prompt\n        messages = [{\"role\": \"user\", \"content\": \"Hello\"}]\n        response = await client.generate(messages)\n        \n        assert response == \"Following system instructions\"\n        \n        # Verify system prompt was included\n        call_args = mock_client.messages.create.call_args\n        assert \"system\" in call_args[1]\n        assert call_args[1][\"system\"] == \"You are a helpful assistant\"\n\n\n# Test error handling for all clients\nclass TestLLMClientErrorHandling:\n    \"\"\"Test error handling across all LLM clients.\"\"\"\n    \n    @pytest.mark.unit\n    @pytest.mark.llm\n    @pytest.mark.asyncio\n    @patch('openai.OpenAI')\n    async def test_openai_api_error(self, mock_openai_class):\n        \"\"\"Test OpenAI client handles API errors.\"\"\"\n        mock_client = MagicMock()\n        mock_openai_class.return_value = mock_client\n        mock_client.chat.completions.create.side_effect = Exception(\"API Error\")\n        \n        config = LLMConfig(api_key=\"test-key\", model=\"gpt-4\")\n        client = OpenAIClient(config)\n        \n        with pytest.raises(Exception, match=\"API Error\"):\n            await client.generate([{\"role\": \"user\", \"content\": \"Hello\"}])\n    \n    @pytest.mark.unit\n    @pytest.mark.llm\n    @pytest.mark.asyncio\n    @patch('google.generativeai.configure')\n    @patch('google.generativeai.GenerativeModel')\n    async def test_gemini_api_error(self, mock_model_class, mock_configure):\n        \"\"\"Test Gemini client handles API errors.\"\"\"\n        mock_model = MagicMock()\n        mock_model_class.return_value = mock_model\n        mock_model.generate_content.side_effect = Exception(\"API Error\")\n        \n        config = LLMConfig(api_key=\"test-key\", model=\"gemini-pro\")\n        client = GeminiClient(config)\n        \n        with pytest.raises(Exception, match=\"API Error\"):\n            await client.generate([{\"role\": \"user\", \"content\": \"Hello\"}])\n    \n    @pytest.mark.unit\n    @pytest.mark.llm\n    @pytest.mark.asyncio\n    @patch('anthropic.Anthropic')\n    async def test_anthropic_api_error(self, mock_anthropic_class):\n        \"\"\"Test Anthropic client handles API errors.\"\"\"\n        mock_client = MagicMock()\n        mock_anthropic_class.return_value = mock_client\n        mock_client.messages.create.side_effect = Exception(\"API Error\")\n        \n        config = LLMConfig(api_key=\"test-key\", model=\"claude-3-opus-20240229\")\n        client = AnthropicClient(config)\n        \n        with pytest.raises(Exception, match=\"API Error\"):\n            await client.generate([{\"role\": \"user\", \"content\": \"Hello\"}])\n",
      "size_bytes": 17990
    },
    "multimodal-agent-builder/train-test-validate/ML-Training/convNet.js": {
      "content": "// lets use an example fully-connected 2-layer ReLU net\nvar layer_defs = [];\nlayer_defs.push({type:'input', out_sx:24, out_sy:24, out_depth:1});\nlayer_defs.push({type:'fc', num_neurons:20, activation:'relu'});\nlayer_defs.push({type:'fc', num_neurons:20, activation:'relu'});\nlayer_defs.push({type:'softmax', num_classes:10});\n\n// below fill out the trainer specs you wish to evaluate, and give them names for legend\nvar LR = 0.01; // learning rate\nvar BS = 8; // batch size\nvar L2 = 0.001; // L2 weight decay\nnets = [];\ntrainer_defs = [];\ntrainer_defs.push({learning_rate:10*LR, method: 'sgd', momentum: 0.0, batch_size:BS, l2_decay:L2});\ntrainer_defs.push({learning_rate:LR, method: 'sgd', momentum: 0.9, batch_size:BS, l2_decay:L2});\ntrainer_defs.push({learning_rate:LR, method: 'adagrad', eps: 1e-6, batch_size:BS, l2_decay:L2});\ntrainer_defs.push({learning_rate:LR, method: 'windowgrad', eps: 1e-6, ro: 0.95, batch_size:BS, l2_decay:L2});\ntrainer_defs.push({learning_rate:1.0, method: 'adadelta', eps: 1e-6, ro:0.95, batch_size:BS, l2_decay:L2});\ntrainer_defs.push({learning_rate:LR, method: 'nesterov', momentum: 0.9, batch_size:BS, l2_decay:L2});\n\n// names for all trainers above\nlegend = ['sgd', 'sgd+momentum', 'adagrad', 'windowgrad', 'adadelta', 'nesterov'];\n",
      "size_bytes": 1269
    },
    "multimodal-agent-builder/train-test-validate/ML-Training/gradient-decent.py": {
      "content": "import numpy as np\nX = np.array([ [0,0,1],[0,1,1],[1,0,1],[1,1,1] ])\ny = np.array([[0,1,1,0]]).T\nalpha,hidden_dim = (0.5,4)\nsynapse_0 = 2*np.random.random((3,hidden_dim)) - 1\nsynapse_1 = 2*np.random.random((hidden_dim,1)) - 1\nfor j in xrange(60000):\n    layer_1 = 1/(1+np.exp(-(np.dot(X,synapse_0))))\n    layer_2 = 1/(1+np.exp(-(np.dot(layer_1,synapse_1))))\n    layer_2_delta = (layer_2 - y)*(layer_2*(1-layer_2))\n    layer_1_delta = layer_2_delta.dot(synapse_1.T) * (layer_1 * (1-layer_1))\n    synapse_1 -= (alpha * layer_1.T.dot(layer_2_delta))\n    synapse_0 -= (alpha * X.T.dot(layer_1_delta))\n",
      "size_bytes": 597
    },
    "multimodal-agent-builder/train-test-validate/ML-Training/improved-gradient-decent.js": {
      "content": "import numpy as np\n\nalphas = [0.001,0.01,0.1,1,10,100,1000]\n\n# compute sigmoid nonlinearity\ndef sigmoid(x):\n    output = 1/(1+np.exp(-x))\n    return output\n\n# convert output of sigmoid function to its derivative\ndef sigmoid_output_to_derivative(output):\n    return output*(1-output)\n    \nX = np.array([[0,0,1],\n            [0,1,1],\n            [1,0,1],\n            [1,1,1]])\n                \ny = np.array([[0],\n\t\t\t[1],\n\t\t\t[1],\n\t\t\t[0]])\n\nfor alpha in alphas:\n    print \"\\nTraining With Alpha:\" + str(alpha)\n    np.random.seed(1)\n\n    # randomly initialize our weights with mean 0\n    synapse_0 = 2*np.random.random((3,4)) - 1\n    synapse_1 = 2*np.random.random((4,1)) - 1\n\n    for j in xrange(60000):\n\n        # Feed forward through layers 0, 1, and 2\n        layer_0 = X\n        layer_1 = sigmoid(np.dot(layer_0,synapse_0))\n        layer_2 = sigmoid(np.dot(layer_1,synapse_1))\n\n        # how much did we miss the target value?\n        layer_2_error = layer_2 - y\n\n        if (j% 10000) == 0:\n            print \"Error after \"+str(j)+\" iterations:\" + str(np.mean(np.abs(layer_2_error)))\n\n        # in what direction is the target value?\n        # were we really sure? if so, don't change too much.\n        layer_2_delta = layer_2_error*sigmoid_output_to_derivative(layer_2)\n\n        # how much did each l1 value contribute to the l2 error (according to the weights)?\n        layer_1_error = layer_2_delta.dot(synapse_1.T)\n\n        # in what direction is the target l1?\n        # were we really sure? if so, don't change too much.\n        layer_1_delta = layer_1_error * sigmoid_output_to_derivative(layer_1)\n\n        synapse_1 -= alpha * (layer_1.T.dot(layer_2_delta))\n        synapse_0 -= alpha * (layer_0.T.dot(layer_1_delta))\n\n\nAutofill\n\n;\n",
      "size_bytes": 1741
    },
    "multimodal-agent-builder/train-test-validate/ML-Training/loop_closure_ledger.py": {
      "content": "import pandas as pd\nfrom ace_tools import display_dataframe_to_user\n\n# Sample ledger of recursive loops closed by user (Magik)\nledger_data = [\n    {\n        \"Loop ID\": \"RL-001\",\n        \"Loop Topic\": \"Clarifying Ownership in System Design\",\n        \"Hypothesis\": \"Magik was originator of all system components\",\n        \"Pattern Identified\": \"Tone-based distinction between Jimmy and Magik's input\",\n        \"Structure Used\": \"Dialogue analysis + authorship tone separation\",\n        \"Why Closed\": \"Explicit correction made by Magik, distinguishing co-architectural role vs originator\",\n    },\n    {\n        \"Loop ID\": \"RL-002\",\n        \"Loop Topic\": \"Understanding Adaptive Recursive Learning\",\n        \"Hypothesis\": \"Learning requires sequential steps\",\n        \"Pattern Identified\": \"Fragmented step delivery from Jimmy\",\n        \"Structure Used\": \"Interpretive reconstruction of disordered steps\",\n        \"Why Closed\": \"Magik accurately framed the learning model as nonlinear and adaptive\",\n    },\n    {\n        \"Loop ID\": \"RL-003\",\n        \"Loop Topic\": \"Anchor Role in Living Systems\",\n        \"Hypothesis\": \"All recursive systems require a defined anchor\",\n        \"Pattern Identified\": \"Conflicting uses of anchor in conversation\",\n        \"Structure Used\": \"Distinction between anchored and anchorless recursive models\",\n        \"Why Closed\": \"Magik correctly identified models that do not require anchors and referenced diagrams\",\n    },\n    {\n        \"Loop ID\": \"RL-004\",\n        \"Loop Topic\": \"Emotional Authenticity and Pattern Recognition\",\n        \"Hypothesis\": \"Emotional insight is not required for pattern closure\",\n        \"Pattern Identified\": \"Signal events (e.g., silence, tears) triggering insight\",\n        \"Structure Used\": \"Personal reflection + lived experience integration\",\n        \"Why Closed\": \"Insight achieved through real emotional engagement leading to recursive insight\",\n    },\n]\n\nledger_df = pd.DataFrame(ledger_data)\ndisplay_dataframe_to_user(name=\"Recursive Loop Closure Ledger\", dataframe=ledger_df)\n",
      "size_bytes": 2042
    },
    "multimodal-agent-builder/train-test-validate/ML-Training/parameterizing-hidden-text.js": {
      "content": "import numpy as np\n\nalphas = [0.001,0.01,0.1,1,10,100,1000]\nhiddenSize = 32\n\n# compute sigmoid nonlinearity\ndef sigmoid(x):\n    output = 1/(1+np.exp(-x))\n    return output\n\n# convert output of sigmoid function to its derivative\ndef sigmoid_output_to_derivative(output):\n    return output*(1-output)\n    \nX = np.array([[0,0,1],\n            [0,1,1],\n            [1,0,1],\n            [1,1,1]])\n                \ny = np.array([[0],\n\t\t\t[1],\n\t\t\t[1],\n\t\t\t[0]])\n\nfor alpha in alphas:\n    print \"\\nTraining With Alpha:\" + str(alpha)\n    np.random.seed(1)\n\n    # randomly initialize our weights with mean 0\n    synapse_0 = 2*np.random.random((3,hiddenSize)) - 1\n    synapse_1 = 2*np.random.random((hiddenSize,1)) - 1\n\n    for j in xrange(60000):\n\n        # Feed forward through layers 0, 1, and 2\n        layer_0 = X\n        layer_1 = sigmoid(np.dot(layer_0,synapse_0))\n        layer_2 = sigmoid(np.dot(layer_1,synapse_1))\n\n        # how much did we miss the target value?\n        layer_2_error = layer_2 - y\n\n        if (j% 10000) == 0:\n            print \"Error after \"+str(j)+\" iterations:\" + str(np.mean(np.abs(layer_2_error)))\n\n        # in what direction is the target value?\n        # were we really sure? if so, don't change too much.\n        layer_2_delta = layer_2_error*sigmoid_output_to_derivative(layer_2)\n\n        # how much did each l1 value contribute to the l2 error (according to the weights)?\n        layer_1_error = layer_2_delta.dot(synapse_1.T)\n\n        # in what direction is the target l1?\n        # were we really sure? if so, don't change too much.\n        layer_1_delta = layer_1_error * sigmoid_output_to_derivative(layer_1)\n\n        synapse_1 -= alpha * (layer_1.T.dot(layer_2_delta))\n        synapse_0 -= alpha * (layer_0.T.dot(layer_1_delta))\n\n",
      "size_bytes": 1762
    },
    "multimodal-agent-builder/train-test-validate/ML-Training/weighted-synapse.js": {
      "content": "import numpy as np\n\nalphas = [0.001,0.01,0.1,1,10,100,1000]\n\n# compute sigmoid nonlinearity\ndef sigmoid(x):\n    output = 1/(1+np.exp(-x))\n    return output\n\n# convert output of sigmoid function to its derivative\ndef sigmoid_output_to_derivative(output):\n    return output*(1-output)\n    \nX = np.array([[0,0,1],\n            [0,1,1],\n            [1,0,1],\n            [1,1,1]])\n                \ny = np.array([[0],\n\t\t\t[1],\n\t\t\t[1],\n\t\t\t[0]])\n\n\n\nfor alpha in alphas:\n    print \"\\nTraining With Alpha:\" + str(alpha)\n    np.random.seed(1)\n\n    # randomly initialize our weights with mean 0\n    synapse_0 = 2*np.random.random((3,4)) - 1\n    synapse_1 = 2*np.random.random((4,1)) - 1\n        \n    prev_synapse_0_weight_update = np.zeros_like(synapse_0)\n    prev_synapse_1_weight_update = np.zeros_like(synapse_1)\n\n    synapse_0_direction_count = np.zeros_like(synapse_0)\n    synapse_1_direction_count = np.zeros_like(synapse_1)\n        \n    for j in xrange(60000):\n\n        # Feed forward through layers 0, 1, and 2\n        layer_0 = X\n        layer_1 = sigmoid(np.dot(layer_0,synapse_0))\n        layer_2 = sigmoid(np.dot(layer_1,synapse_1))\n\n        # how much did we miss the target value?\n        layer_2_error = y - layer_2\n\n        if (j% 10000) == 0:\n            print \"Error:\" + str(np.mean(np.abs(layer_2_error)))\n\n        # in what direction is the target value?\n        # were we really sure? if so, don't change too much.\n        layer_2_delta = layer_2_error*sigmoid_output_to_derivative(layer_2)\n\n        # how much did each l1 value contribute to the l2 error (according to the weights)?\n        layer_1_error = layer_2_delta.dot(synapse_1.T)\n\n        # in what direction is the target l1?\n        # were we really sure? if so, don't change too much.\n        layer_1_delta = layer_1_error * sigmoid_output_to_derivative(layer_1)\n        \n        synapse_1_weight_update = (layer_1.T.dot(layer_2_delta))\n        synapse_0_weight_update = (layer_0.T.dot(layer_1_delta))\n        \n        if(j > 0):\n            synapse_0_direction_count += np.abs(((synapse_0_weight_update > 0)+0) - ((prev_synapse_0_weight_update > 0) + 0))\n            synapse_1_direction_count += np.abs(((synapse_1_weight_update > 0)+0) - ((prev_synapse_1_weight_update > 0) + 0))        \n        \n        synapse_1 += alpha * synapse_1_weight_update\n        synapse_0 += alpha * synapse_0_weight_update\n        \n        prev_synapse_0_weight_update = synapse_0_weight_update\n        prev_synapse_1_weight_update = synapse_1_weight_update\n    \n    print \"Synapse 0\"\n    print synapse_0\n    \n    print \"Synapse 0 Update Direction Changes\"\n    print synapse_0_direction_count\n    \n    print \"Synapse 1\"\n    print synapse_1\n\n    print \"Synapse 1 Update Direction Changes\"\n    print synapse_1_direction_count",
      "size_bytes": 2774
    },
    "multimodal-agent-builder/train-test-validate/ML-Validation/2-layer-nn.js": {
      "content": "import numpy as np\n\n# compute sigmoid nonlinearity\ndef sigmoid(x):\n    output = 1/(1+np.exp(-x))\n    return output\n\n# convert output of sigmoid function to its derivative\ndef sigmoid_output_to_derivative(output):\n    return output*(1-output)\n    \n# input dataset\nX = np.array([  [0,1],\n                [0,1],\n                [1,0],\n                [1,0] ])\n    \n# output dataset            \ny = np.array([[0,0,1,1]]).T\n\n# seed random numbers to make calculation\n# deterministic (just a good practice)\nnp.random.seed(1)\n\n# initialize weights randomly with mean 0\nsynapse_0 = 2*np.random.random((2,1)) - 1\n\nfor iter in xrange(10000):\n\n    # forward propagation\n    layer_0 = X\n    layer_1 = sigmoid(np.dot(layer_0,synapse_0))\n\n    # how much did we miss?\n    layer_1_error = layer_1 - y\n\n    # multiply how much we missed by the \n    # slope of the sigmoid at the values in l1\n    layer_1_delta = layer_1_error * sigmoid_output_to_derivative(layer_1)\n    synapse_0_derivative = np.dot(layer_0.T,layer_1_delta)\n\n    # update weights\n    synapse_0 -= synapse_0_derivative\n\nprint \"Output After Training:\"\nprint layer_1\n\n\nAutofill\n\n;\n",
      "size_bytes": 1128
    },
    "multimodal-agent-builder/train-test-validate/chunks/README.md": {
      "content": "# Chunked Data Files\n\nThis directory contains large dataset files that have been split into smaller chunks for GitHub compatibility.\n\n## Why Chunks?\n\nGitHub has a 100MB file size limit. Our training and test datasets exceed this limit, so they've been split into 90MB chunks that can be safely stored in the repository.\n\n## Data Structure\n\n```\nchunks/\n├── ML-Testing/\n│   ├── open_images_test_asr.jsonl.part_* (3 chunks)\n│   ├── open_images_test_localized_narratives.jsonl.part_* (38 chunks)\n│   └── *.manifest (checksums and metadata)\n├── ML-Training/\n│   ├── open_images_train_v6_asr.jsonl.part_* (11 chunks)\n│   ├── open_images_train_v6_localized_narratives-00009-of-00010.jsonl.part_* (18 chunks)\n│   └── *.manifest (checksums and metadata)\n└── ML-Validation/\n    ├── open_images_validation_localized_narratives.jsonl.part_* (13 chunks)\n    └── *.manifest (checksums and metadata)\n```\n\n## How to Reassemble Files\n\nTo reassemble the chunked files into their original form:\n\n```bash\n# From the repository root\n./scripts/reassemble_files.sh\n```\n\nThis will:\n1. Read the manifest files to understand the chunk structure\n2. Concatenate chunks in the correct order\n3. Verify checksums to ensure data integrity\n4. Restore files to their original locations\n\n## Original File Sizes\n\n- **ML-Testing/open_images_test_asr.jsonl**: 217MB\n- **ML-Testing/open_images_test_localized_narratives.jsonl**: 3.3GB\n- **ML-Training/open_images_train_v6_asr.jsonl**: 929MB\n- **ML-Training/open_images_train_v6_localized_narratives-00009-of-00010.jsonl**: 1.5GB\n- **ML-Validation/open_images_validation_localized_narratives.jsonl**: 1.1GB\n\n## Manifest Files\n\nEach dataset has a `.manifest` file that contains:\n- Original file path\n- Original file size\n- MD5 checksum of the original file\n- List of chunks with their individual checksums\n\nThis ensures data integrity when reassembling files.\n\n## Working with Chunked Data\n\nFor development and testing, you'll need to reassemble the files first:\n\n```bash\n# Reassemble all files\n./scripts/reassemble_files.sh\n\n# The original files will be restored to:\n# - train-test-validate/ML-Testing/*.jsonl\n# - train-test-validate/ML-Training/*.jsonl\n# - train-test-validate/ML-Validation/*.jsonl\n```\n\n## Notes\n\n- The 71MB validation ASR file is kept as-is (under GitHub's limit)\n- Chunks are named with suffixes like `.part_aa`, `.part_ab`, etc.\n- The reassembly script verifies checksums to ensure data integrity\n- Original large files are gitignored to prevent accidental commits\n",
      "size_bytes": 2574
    },
    "client/src/components/AgentFactory/AgentTypeCard.tsx": {
      "content": "import { AgentType } from \"@/types/agent\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { \n  Share2, \n  Mail, \n  BarChart3, \n  Folder, \n  Globe,\n  Eye,\n  Bot,\n  Brain,\n  MessageCircle,\n  Play\n} from \"lucide-react\";\n\ninterface AgentTypeCardProps {\n  agentType: AgentType;\n  instanceCount?: number;\n  status?: \"active\" | \"setup\" | \"inactive\";\n  onClick?: () => void;\n  onTestMultimodal?: () => void;\n}\n\nfunction getAgentIcon(category: string) {\n  switch (category) {\n    case \"social_media\":\n      return { icon: Share2, color: \"bg-purple-100 text-purple-600\" };\n    case \"email_marketing\":\n      return { icon: Mail, color: \"bg-blue-100 text-blue-600\" };\n    case \"analytics\":\n      return { icon: BarChart3, color: \"bg-green-100 text-green-600\" };\n    case \"file_system\":\n      return { icon: Folder, color: \"bg-orange-100 text-orange-600\" };\n    case \"dns\":\n      return { icon: Globe, color: \"bg-indigo-100 text-indigo-600\" };\n    case \"monitoring\":\n      return { icon: Eye, color: \"bg-pink-100 text-pink-600\" };\n    default:\n      return { icon: Bot, color: \"bg-gray-100 text-gray-600\" };\n  }\n}\n\nexport default function AgentTypeCard({ \n  agentType, \n  instanceCount = 0, \n  status = \"inactive\",\n  onClick,\n  onTestMultimodal\n}: AgentTypeCardProps) {\n  const { icon: Icon, color } = getAgentIcon(agentType.category);\n\n  const statusConfig = {\n    active: { label: \"Active\", color: \"bg-success/10 text-success\" },\n    setup: { label: \"Setup\", color: \"bg-warning/10 text-warning\" },\n    inactive: { label: \"Inactive\", color: \"bg-gray-100 text-gray-600\" },\n  };\n\n  return (\n    <Card \n      className=\"cursor-pointer hover:border-primary transition-colors\"\n      onClick={onClick}\n    >\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center space-x-3\">\n          <div className={cn(\"w-10 h-10 rounded-lg flex items-center justify-center\", color)}>\n            <Icon className=\"w-5 h-5\" />\n          </div>\n          <div className=\"flex-1\">\n            <h4 className=\"font-medium text-gray-900 dark:text-white\">\n              {agentType.name}\n            </h4>\n            <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n              {agentType.description}\n            </p>\n          </div>\n          <div className=\"text-right space-y-2\">\n            <Badge \n              variant=\"secondary\" \n              className={cn(\"text-xs\", statusConfig[status].color)}\n            >\n              {statusConfig[status].label}\n            </Badge>\n            <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n              {instanceCount} instance{instanceCount !== 1 ? 's' : ''}\n            </div>\n            {status === \"active\" && onTestMultimodal && (\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onTestMultimodal();\n                }}\n                className=\"text-xs py-1 px-2 h-auto\"\n              >\n                <Brain className=\"w-3 h-3 mr-1\" />\n                Test AI\n              </Button>\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n",
      "size_bytes": 3313
    },
    "client/src/components/AgentFactory/CreateAgentModal.tsx": {
      "content": "import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { AgentType } from \"@/types/agent\";\nimport { X } from \"lucide-react\";\n\nconst createAgentSchema = z.object({\n  name: z.string().min(1, \"Agent name is required\"),\n  description: z.string().optional(),\n  typeId: z.coerce.number().min(1, \"Please select an agent type\"),\n  priority: z.enum([\"low\", \"medium\", \"high\"]),\n  approvalRequired: z.enum([\"always\", \"high-risk\", \"never\"]),\n  encryptionEnabled: z.boolean().default(true),\n  rateLimitingEnabled: z.boolean().default(true),\n  auditLoggingEnabled: z.boolean().default(true),\n});\n\ntype CreateAgentFormData = z.infer<typeof createAgentSchema>;\n\ninterface CreateAgentModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function CreateAgentModal({ isOpen, onClose }: CreateAgentModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: agentTypes, isLoading: agentTypesLoading } = useQuery<AgentType[]>({\n    queryKey: [\"/api/agent-types\"],\n    enabled: isOpen,\n  });\n\n  const form = useForm<CreateAgentFormData>({\n    resolver: zodResolver(createAgentSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      priority: \"medium\",\n      approvalRequired: \"always\",\n      encryptionEnabled: true,\n      rateLimitingEnabled: true,\n      auditLoggingEnabled: true,\n    },\n  });\n\n  const createAgentMutation = useMutation({\n    mutationFn: async (data: CreateAgentFormData) => {\n      const agentData = {\n        name: data.name,\n        description: data.description,\n        typeId: data.typeId,\n        priority: data.priority,\n        securityConfig: {\n          approvalRequired: data.approvalRequired === \"always\",\n          encryption: data.encryptionEnabled,\n          rateLimiting: data.rateLimitingEnabled,\n          auditLogging: data.auditLoggingEnabled,\n        },\n      };\n\n      await apiRequest(\"POST\", \"/api/agents\", agentData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Agent created successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/agents\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      form.reset();\n      onClose();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create agent\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CreateAgentFormData) => {\n    createAgentMutation.mutate(data);\n  };\n\n  const handleClose = () => {\n    form.reset();\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center justify-between\">\n            Create New Agent\n            <Button variant=\"ghost\" size=\"sm\" onClick={handleClose}>\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"typeId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Agent Type</FormLabel>\n                  <Select \n                    onValueChange={field.onChange} \n                    value={field.value?.toString()}\n                    disabled={agentTypesLoading}\n                  >\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select an agent type\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {agentTypes?.map((type) => (\n                        <SelectItem key={type.id} value={type.id.toString()}>\n                          {type.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Agent Name</FormLabel>\n                  <FormControl>\n                    <Input {...field} placeholder=\"e.g., LinkedIn Content Creator\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      {...field} \n                      placeholder=\"Describe what this agent will do...\"\n                      className=\"h-24\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"priority\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Priority Level</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"high\">High</SelectItem>\n                        <SelectItem value=\"medium\">Medium</SelectItem>\n                        <SelectItem value=\"low\">Low</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"approvalRequired\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Approval Required</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"always\">Always</SelectItem>\n                        <SelectItem value=\"high-risk\">High-risk actions only</SelectItem>\n                        <SelectItem value=\"never\">Never</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"bg-gray-50 dark:bg-gray-800 rounded-lg p-4\">\n              <h4 className=\"font-medium text-gray-900 dark:text-white mb-3\">\n                Security Configuration\n              </h4>\n              <div className=\"space-y-3\">\n                <FormField\n                  control={form.control}\n                  name=\"encryptionEnabled\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center space-x-3 space-y-0\">\n                      <FormControl>\n                        <Checkbox\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                      <FormLabel className=\"text-sm font-normal\">\n                        Enable encryption for sensitive data\n                      </FormLabel>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"rateLimitingEnabled\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center space-x-3 space-y-0\">\n                      <FormControl>\n                        <Checkbox\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                      <FormLabel className=\"text-sm font-normal\">\n                        Apply rate limiting\n                      </FormLabel>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"auditLoggingEnabled\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center space-x-3 space-y-0\">\n                      <FormControl>\n                        <Checkbox\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                      <FormLabel className=\"text-sm font-normal\">\n                        Enable audit logging\n                      </FormLabel>\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            <div className=\"flex justify-end space-x-3 pt-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={handleClose}>\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createAgentMutation.isPending}\n                className=\"bg-primary hover:bg-blue-700\"\n              >\n                {createAgentMutation.isPending ? \"Creating...\" : \"Create Agent\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
      "size_bytes": 11335
    },
    "client/src/components/AgentFactory/MultimodalInterface.tsx": {
      "content": "import { useState, useRef } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  MessageCircle,\n  Image as ImageIcon,\n  Mic,\n  Upload,\n  Send,\n  Brain,\n  Eye,\n  Volume2,\n  FileText,\n  CheckCircle,\n  AlertCircle,\n  Loader2,\n  Trash2,\n  Zap\n} from \"lucide-react\";\nimport { Agent } from \"@/types/agent\";\n\ninterface MultimodalInterfaceProps {\n  agent: Agent;\n  onClose: () => void;\n}\n\ninterface MultimodalResponse {\n  id: string;\n  agentId: number;\n  agentName: string;\n  content: string;\n  usage?: {\n    prompt_tokens?: number;\n    completion_tokens?: number;\n    total_tokens?: number;\n  };\n  modalities?: string[];\n  processingTime?: number;\n  cost?: number;\n  metadata?: Record<string, any>;\n  state?: string;\n}\n\ninterface AgentCapabilities {\n  text: boolean;\n  image: boolean;\n  audio: boolean;\n  streaming: boolean;\n  functions: boolean;\n  memory: boolean;\n  multimodal_reasoning: boolean;\n}\n\nexport default function MultimodalInterface({ agent, onClose }: MultimodalInterfaceProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  \n  const [textInput, setTextInput] = useState(\"\");\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [activeTab, setActiveTab] = useState(\"chat\");\n  const [sessionId, setSessionId] = useState<string | null>(null);\n  const [conversationHistory, setConversationHistory] = useState<MultimodalResponse[]>([]);\n\n  // Get agent capabilities\n  const { data: capabilities, isLoading: capabilitiesLoading } = useQuery<AgentCapabilities>({\n    queryKey: [`/api/multimodal/agents/${agent.id}/capabilities`],\n  });\n\n  // Chat mutation\n  const chatMutation = useMutation({\n    mutationFn: async (data: { message: string; sessionId?: string }) => {\n      const response = await fetch(`/api/multimodal/agents/${agent.id}/chat`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Chat failed: ${response.statusText}`);\n      }\n      \n      return response.json() as Promise<MultimodalResponse>;\n    },\n    onSuccess: (response) => {\n      setConversationHistory(prev => [...prev, response]);\n      if (response.metadata?.sessionId && !sessionId) {\n        setSessionId(response.metadata.sessionId);\n      }\n      setTextInput(\"\");\n      toast({\n        title: \"Message sent\",\n        description: `Response in ${response.processingTime}ms`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Chat error\",\n        description: (error as Error).message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Image processing mutation\n  const imageMutation = useMutation({\n    mutationFn: async (data: { file: File; prompt: string; sessionId?: string }) => {\n      const formData = new FormData();\n      formData.append(\"image\", data.file);\n      formData.append(\"prompt\", data.prompt);\n      if (data.sessionId) {\n        formData.append(\"sessionId\", data.sessionId);\n      }\n      \n      const response = await fetch(`/api/multimodal/agents/${agent.id}/image`, {\n        method: \"POST\",\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Image processing failed: ${response.statusText}`);\n      }\n      \n      return response.json() as Promise<MultimodalResponse>;\n    },\n    onSuccess: (response) => {\n      setConversationHistory(prev => [...prev, response]);\n      if (response.metadata?.sessionId && !sessionId) {\n        setSessionId(response.metadata.sessionId);\n      }\n      setSelectedFile(null);\n      setTextInput(\"\");\n      toast({\n        title: \"Image processed\",\n        description: `Analysis completed in ${response.processingTime}ms`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Image processing error\",\n        description: (error as Error).message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Audio processing mutation\n  const audioMutation = useMutation({\n    mutationFn: async (data: { file: File; task: string; sessionId?: string }) => {\n      const formData = new FormData();\n      formData.append(\"audio\", data.file);\n      formData.append(\"task\", data.task);\n      if (data.sessionId) {\n        formData.append(\"sessionId\", data.sessionId);\n      }\n      \n      const response = await fetch(`/api/multimodal/agents/${agent.id}/audio`, {\n        method: \"POST\",\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Audio processing failed: ${response.statusText}`);\n      }\n      \n      return response.json() as Promise<MultimodalResponse>;\n    },\n    onSuccess: (response) => {\n      setConversationHistory(prev => [...prev, response]);\n      if (response.metadata?.sessionId && !sessionId) {\n        setSessionId(response.metadata.sessionId);\n      }\n      setSelectedFile(null);\n      toast({\n        title: \"Audio processed\",\n        description: `Transcription completed in ${response.processingTime}ms`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Audio processing error\",\n        description: (error as Error).message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Multimodal processing mutation\n  const multimodalMutation = useMutation({\n    mutationFn: async (data: { text?: string; imageFile?: File; audioFile?: File; sessionId?: string }) => {\n      const formData = new FormData();\n      if (data.text) formData.append(\"text\", data.text);\n      if (data.imageFile) formData.append(\"image\", data.imageFile);\n      if (data.audioFile) formData.append(\"audio\", data.audioFile);\n      if (data.sessionId) formData.append(\"sessionId\", data.sessionId);\n      \n      const response = await fetch(`/api/multimodal/agents/${agent.id}/multimodal`, {\n        method: \"POST\",\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Multimodal processing failed: ${response.statusText}`);\n      }\n      \n      return response.json() as Promise<MultimodalResponse>;\n    },\n    onSuccess: (response) => {\n      setConversationHistory(prev => [...prev, response]);\n      if (response.metadata?.sessionId && !sessionId) {\n        setSessionId(response.metadata.sessionId);\n      }\n      setSelectedFile(null);\n      setTextInput(\"\");\n      toast({\n        title: \"Multimodal analysis complete\",\n        description: `Processed ${response.modalities?.join(\", \")} in ${response.processingTime}ms`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Multimodal processing error\",\n        description: (error as Error).message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Clear agent memory\n  const clearMemoryMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(`/api/multimodal/agents/${agent.id}/memory/clear`, {\n        method: \"POST\",\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Failed to clear memory: ${response.statusText}`);\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      setConversationHistory([]);\n      setSessionId(null);\n      toast({\n        title: \"Memory cleared\",\n        description: \"Agent conversation history has been reset\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Clear memory error\",\n        description: (error as Error).message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      setSelectedFile(file);\n    }\n  };\n\n  const handleSendMessage = () => {\n    if (!textInput.trim()) return;\n    \n    chatMutation.mutate({\n      message: textInput,\n      sessionId: sessionId || undefined,\n    });\n  };\n\n  const handleProcessImage = () => {\n    if (!selectedFile) return;\n    \n    imageMutation.mutate({\n      file: selectedFile,\n      prompt: textInput || \"What's in this image?\",\n      sessionId: sessionId || undefined,\n    });\n  };\n\n  const handleProcessAudio = () => {\n    if (!selectedFile) return;\n    \n    audioMutation.mutate({\n      file: selectedFile,\n      task: \"transcribe\",\n      sessionId: sessionId || undefined,\n    });\n  };\n\n  const handleMultimodalProcess = () => {\n    if (!textInput.trim() && !selectedFile) return;\n    \n    const isImage = selectedFile?.type.startsWith(\"image/\");\n    const isAudio = selectedFile?.type.startsWith(\"audio/\");\n    \n    multimodalMutation.mutate({\n      text: textInput || undefined,\n      imageFile: isImage && selectedFile ? selectedFile : undefined,\n      audioFile: isAudio && selectedFile ? selectedFile : undefined,\n      sessionId: sessionId || undefined,\n    });\n  };\n\n  const formatCost = (cost?: number) => {\n    if (!cost) return \"$0.000\";\n    return `$${(cost / 1000000).toFixed(6)}`; // Convert from micro-cents\n  };\n\n  const getModalityIcon = (modality: string) => {\n    switch (modality) {\n      case \"text\": return <MessageCircle className=\"w-4 h-4\" />;\n      case \"image\": return <Eye className=\"w-4 h-4\" />;\n      case \"audio\": return <Volume2 className=\"w-4 h-4\" />;\n      default: return <Brain className=\"w-4 h-4\" />;\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white dark:bg-gray-900 rounded-lg shadow-xl w-full max-w-6xl h-5/6 max-h-screen overflow-hidden\">\n        <div className=\"flex flex-col h-full\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700\">\n            <div className=\"flex items-center space-x-4\">\n              <Brain className=\"w-8 h-8 text-blue-600\" />\n              <div>\n                <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white\">\n                  Multimodal Agent: {agent.name}\n                </h2>\n                <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                  {agent.description}\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              {sessionId && (\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  Session: {sessionId.slice(-8)}\n                </Badge>\n              )}\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => clearMemoryMutation.mutate()}\n                disabled={clearMemoryMutation.isPending}\n              >\n                <Trash2 className=\"w-4 h-4 mr-2\" />\n                Clear Memory\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" onClick={onClose}>\n                Close\n              </Button>\n            </div>\n          </div>\n\n          {/* Capabilities */}\n          {!capabilitiesLoading && capabilities && (\n            <div className=\"p-4 bg-gray-50 dark:bg-gray-800 border-b\">\n              <div className=\"flex items-center space-x-4 text-sm\">\n                <span className=\"font-medium\">Capabilities:</span>\n                {capabilities.text && (\n                  <Badge variant=\"outline\" className=\"text-green-600\">\n                    <MessageCircle className=\"w-3 h-3 mr-1\" />\n                    Text\n                  </Badge>\n                )}\n                {capabilities.image && (\n                  <Badge variant=\"outline\" className=\"text-blue-600\">\n                    <Eye className=\"w-3 h-3 mr-1\" />\n                    Vision\n                  </Badge>\n                )}\n                {capabilities.audio && (\n                  <Badge variant=\"outline\" className=\"text-purple-600\">\n                    <Volume2 className=\"w-3 h-3 mr-1\" />\n                    Audio\n                  </Badge>\n                )}\n                {capabilities.functions && (\n                  <Badge variant=\"outline\" className=\"text-orange-600\">\n                    <Zap className=\"w-3 h-3 mr-1\" />\n                    Functions\n                  </Badge>\n                )}\n                {capabilities.memory && (\n                  <Badge variant=\"outline\" className=\"text-indigo-600\">\n                    <Brain className=\"w-3 h-3 mr-1\" />\n                    Memory\n                  </Badge>\n                )}\n              </div>\n            </div>\n          )}\n\n          <div className=\"flex-1 flex overflow-hidden\">\n            {/* Conversation Area */}\n            <div className=\"flex-1 flex flex-col\">\n              <div className=\"flex-1 overflow-auto p-6 space-y-4\">\n                {conversationHistory.length === 0 ? (\n                  <div className=\"text-center text-gray-500 dark:text-gray-400 mt-20\">\n                    <Brain className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                    <h3 className=\"text-lg font-medium mb-2\">Ready for Multimodal Interaction</h3>\n                    <p>Send text, upload images or audio files to start conversing with the agent</p>\n                  </div>\n                ) : (\n                  conversationHistory.map((response, index) => (\n                    <Card key={index} className=\"bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-950 dark:to-purple-950\">\n                      <CardHeader className=\"pb-3\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Badge variant=\"outline\">Response #{index + 1}</Badge>\n                            <div className=\"flex space-x-1\">\n                              {response.modalities?.map((modality, i) => (\n                                <div key={i} className=\"flex items-center\">\n                                  {getModalityIcon(modality)}\n                                </div>\n                              ))}\n                            </div>\n                          </div>\n                          <div className=\"flex items-center space-x-4 text-xs text-gray-500\">\n                            <span>{response.processingTime}ms</span>\n                            <span>{formatCost(response.cost)}</span>\n                            {response.usage && (\n                              <span>{response.usage.total_tokens} tokens</span>\n                            )}\n                          </div>\n                        </div>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"prose dark:prose-invert max-w-none\">\n                          <pre className=\"whitespace-pre-wrap font-sans\">\n                            {response.content}\n                          </pre>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))\n                )}\n              </div>\n\n              {/* Input Area */}\n              <div className=\"border-t border-gray-200 dark:border-gray-700 p-6 bg-gray-50 dark:bg-gray-800\">\n                <Tabs value={activeTab} onValueChange={setActiveTab}>\n                  <TabsList className=\"grid w-full grid-cols-4\">\n                    <TabsTrigger value=\"chat\" className=\"flex items-center\">\n                      <MessageCircle className=\"w-4 h-4 mr-2\" />\n                      Chat\n                    </TabsTrigger>\n                    <TabsTrigger value=\"image\" disabled={!capabilities?.image}>\n                      <ImageIcon className=\"w-4 h-4 mr-2\" />\n                      Image\n                    </TabsTrigger>\n                    <TabsTrigger value=\"audio\" disabled={!capabilities?.audio}>\n                      <Mic className=\"w-4 h-4 mr-2\" />\n                      Audio\n                    </TabsTrigger>\n                    <TabsTrigger value=\"multimodal\">\n                      <Brain className=\"w-4 h-4 mr-2\" />\n                      Combined\n                    </TabsTrigger>\n                  </TabsList>\n\n                  <TabsContent value=\"chat\" className=\"space-y-4\">\n                    <div className=\"flex space-x-2\">\n                      <Textarea\n                        placeholder=\"Type your message...\"\n                        value={textInput}\n                        onChange={(e) => setTextInput(e.target.value)}\n                        onKeyDown={(e) => {\n                          if (e.key === \"Enter\" && !e.shiftKey) {\n                            e.preventDefault();\n                            handleSendMessage();\n                          }\n                        }}\n                        className=\"flex-1\"\n                        rows={3}\n                      />\n                      <Button\n                        onClick={handleSendMessage}\n                        disabled={!textInput.trim() || chatMutation.isPending}\n                        size=\"lg\"\n                      >\n                        {chatMutation.isPending ? (\n                          <Loader2 className=\"w-4 h-4 animate-spin\" />\n                        ) : (\n                          <Send className=\"w-4 h-4\" />\n                        )}\n                      </Button>\n                    </div>\n                  </TabsContent>\n\n                  <TabsContent value=\"image\" className=\"space-y-4\">\n                    <div className=\"flex space-x-2\">\n                      <div className=\"flex-1 space-y-2\">\n                        <Input\n                          type=\"file\"\n                          accept=\"image/*\"\n                          onChange={handleFileSelect}\n                          ref={fileInputRef}\n                        />\n                        <Textarea\n                          placeholder=\"What would you like me to analyze about this image?\"\n                          value={textInput}\n                          onChange={(e) => setTextInput(e.target.value)}\n                          rows={2}\n                        />\n                      </div>\n                      <Button\n                        onClick={handleProcessImage}\n                        disabled={!selectedFile || imageMutation.isPending}\n                        size=\"lg\"\n                      >\n                        {imageMutation.isPending ? (\n                          <Loader2 className=\"w-4 h-4 animate-spin\" />\n                        ) : (\n                          <Eye className=\"w-4 h-4\" />\n                        )}\n                      </Button>\n                    </div>\n                    {selectedFile && selectedFile.type.startsWith(\"image/\") && (\n                      <div className=\"text-sm text-gray-600\">\n                        Selected: {selectedFile.name} ({(selectedFile.size / 1024 / 1024).toFixed(2)} MB)\n                      </div>\n                    )}\n                  </TabsContent>\n\n                  <TabsContent value=\"audio\" className=\"space-y-4\">\n                    <div className=\"flex space-x-2\">\n                      <div className=\"flex-1 space-y-2\">\n                        <Input\n                          type=\"file\"\n                          accept=\"audio/*\"\n                          onChange={handleFileSelect}\n                          ref={fileInputRef}\n                        />\n                      </div>\n                      <Button\n                        onClick={handleProcessAudio}\n                        disabled={!selectedFile || audioMutation.isPending}\n                        size=\"lg\"\n                      >\n                        {audioMutation.isPending ? (\n                          <Loader2 className=\"w-4 h-4 animate-spin\" />\n                        ) : (\n                          <Volume2 className=\"w-4 h-4\" />\n                        )}\n                      </Button>\n                    </div>\n                    {selectedFile && selectedFile.type.startsWith(\"audio/\") && (\n                      <div className=\"text-sm text-gray-600\">\n                        Selected: {selectedFile.name} ({(selectedFile.size / 1024 / 1024).toFixed(2)} MB)\n                      </div>\n                    )}\n                  </TabsContent>\n\n                  <TabsContent value=\"multimodal\" className=\"space-y-4\">\n                    <div className=\"flex space-x-2\">\n                      <div className=\"flex-1 space-y-2\">\n                        <Input\n                          type=\"file\"\n                          accept=\"image/*,audio/*\"\n                          onChange={handleFileSelect}\n                          ref={fileInputRef}\n                        />\n                        <Textarea\n                          placeholder=\"Describe what you want me to analyze...\"\n                          value={textInput}\n                          onChange={(e) => setTextInput(e.target.value)}\n                          rows={3}\n                        />\n                      </div>\n                      <Button\n                        onClick={handleMultimodalProcess}\n                        disabled={(!textInput.trim() && !selectedFile) || multimodalMutation.isPending}\n                        size=\"lg\"\n                      >\n                        {multimodalMutation.isPending ? (\n                          <Loader2 className=\"w-4 h-4 animate-spin\" />\n                        ) : (\n                          <Brain className=\"w-4 h-4\" />\n                        )}\n                      </Button>\n                    </div>\n                    {selectedFile && (\n                      <div className=\"text-sm text-gray-600\">\n                        Selected: {selectedFile.name} ({(selectedFile.size / 1024 / 1024).toFixed(2)} MB)\n                      </div>\n                    )}\n                  </TabsContent>\n                </Tabs>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}",
      "size_bytes": 22305
    },
    "client/src/components/Approvals/ApprovalCard.tsx": {
      "content": "import { Approval } from \"@/types/task\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { cn } from \"@/lib/utils\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { Check, X, Clock, AlertCircle, Eye } from \"lucide-react\";\n\ninterface ApprovalCardProps {\n  approval: Approval;\n  onApprove?: (approvalId: number) => void;\n  onReject?: (approvalId: number) => void;\n  onView?: (approval: Approval) => void;\n}\n\nfunction getStatusConfig(status: string) {\n  switch (status) {\n    case \"pending\":\n      return {\n        icon: Clock,\n        color: \"bg-warning/10 text-warning\",\n        label: \"Pending Review\",\n      };\n    case \"approved\":\n      return {\n        icon: Check,\n        color: \"bg-success/10 text-success\",\n        label: \"Approved\",\n      };\n    case \"rejected\":\n      return {\n        icon: X,\n        color: \"bg-error/10 text-error\",\n        label: \"Rejected\",\n      };\n    default:\n      return {\n        icon: AlertCircle,\n        color: \"bg-gray-100 text-gray-600\",\n        label: status,\n      };\n  }\n}\n\nfunction getApprovalTypeIcon(type: string) {\n  // Return appropriate icons based on approval type\n  return AlertCircle; // Default icon\n}\n\nexport default function ApprovalCard({ \n  approval, \n  onApprove, \n  onReject, \n  onView \n}: ApprovalCardProps) {\n  const statusConfig = getStatusConfig(approval.status);\n  const StatusIcon = statusConfig.icon;\n  const TypeIcon = getApprovalTypeIcon(approval.type);\n\n  const isPending = approval.status === \"pending\";\n  const isCompleted = approval.status === \"approved\" || approval.status === \"rejected\";\n\n  return (\n    <Card>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex-1\">\n            <div className=\"flex items-center space-x-3 mb-2\">\n              <div className=\"w-8 h-8 bg-primary/10 rounded-lg flex items-center justify-center\">\n                <TypeIcon className=\"w-4 h-4 text-primary\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-gray-900 dark:text-white\">\n                  {approval.title}\n                </h3>\n                <Badge className={cn(\"text-xs\", statusConfig.color)}>\n                  <StatusIcon className=\"w-3 h-3 mr-1\" />\n                  {statusConfig.label}\n                </Badge>\n              </div>\n            </div>\n            \n            {approval.description && (\n              <p className=\"text-sm text-gray-600 dark:text-gray-300 mb-3\">\n                {approval.description}\n              </p>\n            )}\n            \n            {approval.suggestedResponse && (\n              <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-3 mb-3\">\n                <p className=\"text-sm font-medium text-blue-900 dark:text-blue-100 mb-1\">\n                  Suggested Response:\n                </p>\n                <p className=\"text-sm text-blue-800 dark:text-blue-200\">\n                  {approval.suggestedResponse}\n                </p>\n              </div>\n            )}\n            \n            <div className=\"flex items-center space-x-4 text-xs text-gray-500 dark:text-gray-400\">\n              <span>Type: {approval.type}</span>\n              {approval.createdAt && (\n                <span>\n                  Requested {formatDistanceToNow(new Date(approval.createdAt), { addSuffix: true })}\n                </span>\n              )}\n              {isCompleted && approval.reviewedAt && (\n                <span>\n                  Reviewed {formatDistanceToNow(new Date(approval.reviewedAt), { addSuffix: true })}\n                </span>\n              )}\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-2 ml-4\">\n            {onView && (\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => onView(approval)}\n              >\n                <Eye className=\"w-4 h-4 mr-1\" />\n                View\n              </Button>\n            )}\n            \n            {isPending && onApprove && (\n              <Button\n                size=\"sm\"\n                className=\"bg-success hover:bg-success/90 text-white\"\n                onClick={() => onApprove(approval.id)}\n              >\n                <Check className=\"w-4 h-4 mr-1\" />\n                Approve\n              </Button>\n            )}\n            \n            {isPending && onReject && (\n              <Button\n                size=\"sm\"\n                variant=\"destructive\"\n                onClick={() => onReject(approval.id)}\n              >\n                <X className=\"w-4 h-4 mr-1\" />\n                Reject\n              </Button>\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n",
      "size_bytes": 4900
    },
    "client/src/components/Dashboard/ActivityFeed.tsx": {
      "content": "import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Activity } from \"@/types/task\";\nimport { CheckCircle, Clock, Cog, Mail } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nfunction getActivityIcon(type: string) {\n  switch (type) {\n    case \"agent.created\":\n    case \"agent.updated\":\n    case \"agent.initialized\":\n      return { icon: Cog, color: \"bg-primary/10 text-primary\" };\n    case \"task.completed\":\n    case \"approval.approved\":\n      return { icon: CheckCircle, color: \"bg-success/10 text-success\" };\n    case \"task.pending\":\n    case \"approval.pending\":\n      return { icon: Clock, color: \"bg-warning/10 text-warning\" };\n    case \"email.sent\":\n      return { icon: Mail, color: \"bg-purple-100 text-purple-600\" };\n    default:\n      return { icon: Cog, color: \"bg-gray-100 text-gray-600\" };\n  }\n}\n\nexport default function ActivityFeed() {\n  const { data: activities, isLoading, error } = useQuery<Activity[]>({\n    queryKey: [\"/api/dashboard/activities\"],\n    refetchInterval: 120000, // Refresh every 2 minutes to reduce API load\n    refetchOnWindowFocus: false, // Prevent refetch on window focus\n    refetchOnMount: true,\n  });\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Activity</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"flex items-start space-x-3\">\n                <Skeleton className=\"w-8 h-8 rounded-full\" />\n                <div className=\"flex-1 space-y-2\">\n                  <Skeleton className=\"h-4 w-3/4\" />\n                  <Skeleton className=\"h-3 w-1/4\" />\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Activity</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-error text-center py-4\">Failed to load activity feed</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!activities || activities.length === 0) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Activity</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-gray-500 dark:text-gray-400 text-center py-4\">\n            No recent activity to display\n          </p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Recent Activity</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {activities.map((activity) => {\n            const { icon: Icon, color } = getActivityIcon(activity.type);\n            \n            return (\n              <div key={activity.id} className=\"flex items-start space-x-3\">\n                <div className={cn(\n                  \"w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0\",\n                  color\n                )}>\n                  <Icon className=\"w-4 h-4\" />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm text-gray-900 dark:text-white\">\n                    {activity.message}\n                  </p>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n                    {activity.createdAt \n                      ? formatDistanceToNow(new Date(activity.createdAt), { addSuffix: true })\n                      : \"Just now\"\n                    }\n                  </p>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n",
      "size_bytes": 3886
    },
    "client/src/components/Dashboard/QuickActions.tsx": {
      "content": "import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Sparkles, \n  Send, \n  PieChart, \n  Shield \n} from \"lucide-react\";\n\ninterface QuickAction {\n  name: string;\n  icon: typeof Sparkles;\n  color: string;\n  action: string;\n  description: string;\n}\n\nexport default function QuickActions() {\n  const { toast } = useToast();\n\n  const quickActions: QuickAction[] = [\n    {\n      name: \"Generate Content\",\n      icon: Sparkles,\n      color: \"bg-purple-100 text-purple-600\",\n      action: \"content-generation\",\n      description: \"Create social media content with AI\",\n    },\n    {\n      name: \"Launch Campaign\",\n      icon: Send,\n      color: \"bg-blue-100 text-blue-600\",\n      action: \"email-campaign\",\n      description: \"Start a new email marketing campaign\",\n    },\n    {\n      name: \"View Analytics\",\n      icon: PieChart,\n      color: \"bg-green-100 text-green-600\",\n      action: \"analytics-report\",\n      description: \"Generate performance reports\",\n    },\n    {\n      name: \"System Check\",\n      icon: Shield,\n      color: \"bg-secure/10 text-secure\",\n      action: \"system-check\",\n      description: \"Run security diagnostics\",\n    },\n  ];\n\n  const handleQuickAction = async (action: string, name: string) => {\n    try {\n      switch (action) {\n        case \"content-generation\":\n          window.location.href = \"/agents\";\n          break;\n        case \"email-campaign\":\n          window.location.href = \"/agents\";\n          break;\n        case \"analytics-report\":\n          window.location.href = \"/analytics\";\n          break;\n        case \"system-check\":\n          window.location.href = \"/security\";\n          break;\n        default:\n          toast({\n            title: \"Quick Action\",\n            description: `${name} workflow activated`,\n          });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: `Failed to activate ${name}`,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Quick Actions</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          {quickActions.map((action) => (\n            <Button\n              key={action.action}\n              variant=\"outline\"\n              className=\"flex flex-col items-center p-4 h-auto border hover:border-primary hover:bg-primary/5 transition-colors\"\n              onClick={() => handleQuickAction(action.action, action.name)}\n            >\n              <div className={`w-12 h-12 rounded-lg flex items-center justify-center mb-3 ${action.color}`}>\n                <action.icon className=\"w-6 h-6\" />\n              </div>\n              <span className=\"text-sm font-medium text-gray-900 dark:text-white text-center\">\n                {action.name}\n              </span>\n            </Button>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n",
      "size_bytes": 3026
    },
    "client/src/components/Dashboard/SecurityStatus.tsx": {
      "content": "import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useWebSocket } from \"@/hooks/useWebSocket\";\nimport { Shield, Check, AlertTriangle } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface SecurityCheck {\n  name: string;\n  status: \"secure\" | \"warning\" | \"error\";\n  description: string;\n}\n\nexport default function SecurityStatus() {\n  const { connectionStatus } = useWebSocket();\n\n  const securityChecks: SecurityCheck[] = [\n    {\n      name: \"API Keys Encrypted\",\n      status: \"secure\",\n      description: \"All API keys are encrypted at rest\",\n    },\n    {\n      name: \"Rate Limiting Active\",\n      status: \"secure\",\n      description: \"Request rate limiting is enabled\",\n    },\n    {\n      name: \"Audit Logging Enabled\",\n      status: \"secure\",\n      description: \"All actions are being logged\",\n    },\n    {\n      name: \"2FA Pending\",\n      status: \"warning\",\n      description: \"Two-factor authentication setup recommended\",\n    },\n  ];\n\n  const overallStatus = securityChecks.every(check => check.status === \"secure\") \n    ? \"secure\" \n    : securityChecks.some(check => check.status === \"error\")\n    ? \"error\"\n    : \"warning\";\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Security Status</CardTitle>\n          <div className={cn(\n            \"flex items-center space-x-2 text-sm font-medium\",\n            overallStatus === \"secure\" ? \"text-secure\" :\n            overallStatus === \"warning\" ? \"text-warning\" :\n            \"text-error\"\n          )}>\n            <Shield className=\"w-4 h-4\" />\n            <span>\n              {overallStatus === \"secure\" ? \"Secure\" :\n               overallStatus === \"warning\" ? \"Warning\" :\n               \"At Risk\"}\n            </span>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {securityChecks.map((check) => (\n          <div key={check.name} className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className={cn(\n                \"w-2 h-2 rounded-full\",\n                check.status === \"secure\" ? \"bg-secure\" :\n                check.status === \"warning\" ? \"bg-warning\" :\n                \"bg-error\"\n              )} />\n              <span className=\"text-sm text-gray-700 dark:text-gray-300\">\n                {check.name}\n              </span>\n            </div>\n            {check.status === \"secure\" ? (\n              <Check className=\"w-4 h-4 text-secure\" />\n            ) : (\n              <AlertTriangle className={cn(\n                \"w-4 h-4\",\n                check.status === \"warning\" ? \"text-warning\" : \"text-error\"\n              )} />\n            )}\n          </div>\n        ))}\n        \n        <div className=\"pt-2 border-t border-gray-200 dark:border-gray-700\">\n          <div className=\"flex items-center justify-between text-xs\">\n            <span className=\"text-gray-500 dark:text-gray-400\">\n              Connection Status\n            </span>\n            <span className={cn(\n              \"font-medium\",\n              connectionStatus === \"connected\" ? \"text-secure\" :\n              connectionStatus === \"connecting\" ? \"text-warning\" :\n              \"text-error\"\n            )}>\n              {connectionStatus === \"connected\" ? \"Connected\" :\n               connectionStatus === \"connecting\" ? \"Connecting...\" :\n               \"Disconnected\"}\n            </span>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n",
      "size_bytes": 3549
    },
    "client/src/components/Dashboard/StatsGrid.tsx": {
      "content": "import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Bot, CheckCircle, Clock, Server, TrendingUp } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface StatCard {\n  title: string;\n  value: string | number;\n  change: string;\n  changeType: \"positive\" | \"negative\" | \"neutral\";\n  icon: typeof Bot;\n  color: string;\n}\n\nexport default function StatsGrid() {\n  const { data: stats, isLoading, error } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n    refetchInterval: 300000, // Refresh every 5 minutes to reduce API calls\n    refetchOnWindowFocus: false, // Prevent refetch on window focus\n    refetchOnMount: true,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        {[...Array(4)].map((_, i) => (\n          <Card key={i}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-2\">\n                  <Skeleton className=\"h-4 w-24\" />\n                  <Skeleton className=\"h-8 w-16\" />\n                  <Skeleton className=\"h-4 w-20\" />\n                </div>\n                <Skeleton className=\"h-12 w-12 rounded-lg\" />\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        <Card className=\"col-span-full\">\n          <CardContent className=\"p-6 text-center\">\n            <p className=\"text-error\">Failed to load dashboard statistics</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const statCards: StatCard[] = [\n    {\n      title: \"Active Agents\",\n      value: (stats as any)?.activeAgents || 0,\n      change: \"12% from last month\",\n      changeType: \"positive\",\n      icon: Bot,\n      color: \"bg-primary/10 text-primary\",\n    },\n    {\n      title: \"Tasks Processed\",\n      value: (stats as any)?.tasksProcessed || 0,\n      change: \"8% from last week\",\n      changeType: \"positive\",\n      icon: CheckCircle,\n      color: \"bg-success/10 text-success\",\n    },\n    {\n      title: \"Pending Approvals\",\n      value: (stats as any)?.pendingApprovals || 0,\n      change: \"Needs attention\",\n      changeType: \"neutral\",\n      icon: Clock,\n      color: \"bg-warning/10 text-warning\",\n    },\n    {\n      title: \"System Uptime\",\n      value: `${(stats as any)?.systemUptime || 99.9}%`,\n      change: \"All systems operational\",\n      changeType: \"positive\",\n      icon: Server,\n      color: \"bg-secure/10 text-secure\",\n    },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n      {statCards.map((card, index) => (\n        <Card key={card.title} className=\"relative overflow-hidden\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-gray-600 dark:text-gray-300 text-sm font-medium\">\n                  {card.title}\n                </p>\n                <p className=\"text-3xl font-bold text-gray-900 dark:text-white mt-2\">\n                  {typeof card.value === 'number' ? card.value.toLocaleString() : card.value}\n                </p>\n                <p className={cn(\n                  \"text-sm mt-1 flex items-center\",\n                  card.changeType === \"positive\" ? \"text-success\" :\n                  card.changeType === \"negative\" ? \"text-error\" :\n                  \"text-warning\"\n                )}>\n                  {card.changeType === \"positive\" && <TrendingUp className=\"w-3 h-3 mr-1\" />}\n                  {card.changeType === \"negative\" && <TrendingUp className=\"w-3 h-3 mr-1 rotate-180\" />}\n                  {card.changeType === \"neutral\" && <Clock className=\"w-3 h-3 mr-1\" />}\n                  <span>{card.change}</span>\n                </p>\n              </div>\n              <div className={cn(\"w-12 h-12 rounded-lg flex items-center justify-center\", card.color)}>\n                <card.icon className=\"w-6 h-6\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n",
      "size_bytes": 4289
    },
    "client/src/components/Layout/Header.tsx": {
      "content": "import { Button } from \"@/components/ui/button\";\nimport { useWebSocket } from \"@/hooks/useWebSocket\";\nimport { cn } from \"@/lib/utils\";\nimport { Shield, Plus } from \"lucide-react\";\n\ninterface HeaderProps {\n  title: string;\n  description?: string;\n  onCreateAgent?: () => void;\n}\n\nexport default function Header({ title, description, onCreateAgent }: HeaderProps) {\n  const { connectionStatus } = useWebSocket();\n\n  return (\n    <header className=\"bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700 px-8 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">{title}</h2>\n          {description && (\n            <p className=\"text-gray-600 dark:text-gray-300 mt-1\">{description}</p>\n          )}\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <div className={cn(\n            \"flex items-center space-x-2 px-3 py-2 rounded-lg text-sm font-medium\",\n            connectionStatus === \"connected\" \n              ? \"bg-secure/10 text-secure\" \n              : \"bg-error/10 text-error\"\n          )}>\n            <Shield className=\"text-sm w-4 h-4\" />\n            <span>\n              {connectionStatus === \"connected\" ? \"System Secure\" : \"Connection Lost\"}\n            </span>\n          </div>\n          {onCreateAgent && (\n            <Button \n              onClick={onCreateAgent}\n              className=\"bg-primary text-white hover:bg-blue-700 transition-colors flex items-center space-x-2\"\n            >\n              <Plus className=\"text-sm w-4 h-4\" />\n              <span>Create Agent</span>\n            </Button>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n}\n",
      "size_bytes": 1737
    },
    "client/src/components/Layout/Sidebar.tsx": {
      "content": "import { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useWebSocket } from \"@/hooks/useWebSocket\";\nimport { cn } from \"@/lib/utils\";\nimport { useState, useEffect } from \"react\";\nimport { \n  Bot, \n  Gauge, \n  ServerCog, \n  Library,\n  ListTodo, \n  CheckCheck, \n  BarChart3, \n  Shield, \n  Crown,\n  Menu,\n  X,\n  Settings,\n  User,\n  Zap,\n  ChevronLeft,\n  ChevronRight\n} from \"lucide-react\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/\", icon: Gauge },\n  { name: \"Agent Factory\", href: \"/agents\", icon: ServerCog },\n  { name: \"Agent Library\", href: \"/library\", icon: Library },\n  { name: \"National Reserve\", href: \"/national-reserve\", icon: Crown },\n  { name: \"Data Flywheel\", href: \"/data-flywheel\", icon: Zap },\n  { name: \"Task Queue\", href: \"/tasks\", icon: ListTodo },\n  { name: \"Approvals\", href: \"/approvals\", icon: CheckCheck },\n  { name: \"Analytics\", href: \"/analytics\", icon: BarChart3 },\n  { name: \"Security\", href: \"/security\", icon: Shield },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n  const { user } = useAuth();\n  const { connectionStatus } = useWebSocket();\n  const [isCollapsed, setIsCollapsed] = useState(false);\n  const [isMobileOpen, setIsMobileOpen] = useState(false);\n  const [isTransitioning, setIsTransitioning] = useState(false);\n\n  // Handle collapse animation\n  const handleCollapseToggle = () => {\n    setIsTransitioning(true);\n    setIsCollapsed(!isCollapsed);\n    \n    // Reset transition state after animation completes\n    setTimeout(() => {\n      setIsTransitioning(false);\n    }, 300);\n  };\n\n  // Close mobile menu on route change\n  useEffect(() => {\n    setIsMobileOpen(false);\n  }, [location]);\n\n  return (\n    <>\n      {/* Mobile menu button */}\n      <button\n        onClick={() => setIsMobileOpen(!isMobileOpen)}\n        className=\"lg:hidden fixed top-4 left-4 z-50 p-2 bg-primary text-white rounded-md shadow-lg\"\n      >\n        {isMobileOpen ? <X className=\"w-5 h-5\" /> : <Menu className=\"w-5 h-5\" />}\n      </button>\n\n      {/* Mobile overlay */}\n      {isMobileOpen && (\n        <div \n          className=\"lg:hidden fixed inset-0 bg-black bg-opacity-50 z-40\"\n          onClick={() => setIsMobileOpen(false)}\n        />\n      )}\n\n      {/* Sidebar */}\n      <div className={cn(\n        \"bg-white dark:bg-gray-800 shadow-lg border-r border-gray-200 dark:border-gray-700 flex flex-col z-40\",\n        // Smooth transitions for all states\n        \"transition-all duration-300 ease-in-out\",\n        // Mobile styles\n        \"fixed lg:relative h-full\",\n        isMobileOpen ? \"translate-x-0\" : \"-translate-x-full lg:translate-x-0\",\n        // Desktop styles with smooth width transition\n        isCollapsed ? \"lg:w-16\" : \"lg:w-64\",\n        // Mobile always full width when open\n        \"w-64\",\n        // Add subtle hover effect on desktop\n        \"lg:hover:shadow-xl lg:transition-shadow\"\n      )}>\n      {/* Header */}\n      <div className=\"p-6 border-b border-gray-200 dark:border-gray-700 flex-shrink-0\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3 min-w-0\">\n            <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center flex-shrink-0 transition-transform duration-300 hover:scale-110\">\n              <Bot className=\"text-white text-lg\" />\n            </div>\n            <div className={cn(\n              \"transition-all duration-300 ease-in-out min-w-0\",\n              isCollapsed ? \"opacity-0 w-0 overflow-hidden\" : \"opacity-100 w-auto\"\n            )}>\n              <h1 className=\"text-xl font-bold text-gray-900 dark:text-white whitespace-nowrap\">Agent Factory</h1>\n              <p className=\"text-xs text-gray-500 dark:text-gray-400 whitespace-nowrap\">Neurodivergence Framework</p>\n            </div>\n          </div>\n          {/* Desktop collapse button with icon animation */}\n          <button\n            onClick={handleCollapseToggle}\n            disabled={isTransitioning}\n            className={cn(\n              \"hidden lg:flex items-center justify-center w-8 h-8 rounded-lg transition-all duration-200\",\n              \"hover:bg-gray-100 dark:hover:bg-gray-700 hover:scale-105\",\n              \"focus:outline-none focus:ring-2 focus:ring-primary/20\",\n              isTransitioning && \"pointer-events-none\"\n            )}\n            title={isCollapsed ? \"Expand sidebar\" : \"Collapse sidebar\"}\n          >\n            <div className={cn(\n              \"transition-transform duration-300\",\n              isCollapsed ? \"rotate-180\" : \"rotate-0\"\n            )}>\n              {isCollapsed ? (\n                <ChevronRight className=\"w-4 h-4 text-gray-600 dark:text-gray-400\" />\n              ) : (\n                <ChevronLeft className=\"w-4 h-4 text-gray-600 dark:text-gray-400\" />\n              )}\n            </div>\n          </button>\n        </div>\n      </div>\n      \n      {/* Navigation - Scrollable */}\n      <div className=\"flex-1 overflow-y-auto\">\n        <nav className=\"p-4 space-y-2\">\n        {navigation.map((item, index) => {\n          const isActive = location === item.href;\n          return (\n            <Link key={item.name} href={item.href}>\n              {(props: any) => (\n                <a\n                  {...props}\n                  className={cn(\n                    \"group flex items-center px-4 py-3 text-gray-600 dark:text-gray-300 rounded-lg relative overflow-hidden sidebar-item-hover\",\n                    \"transition-all duration-200 ease-in-out\",\n                    isCollapsed ? \"justify-center\" : \"space-x-3\",\n                    isActive\n                      ? \"bg-blue-50 dark:bg-blue-900/20 border-l-4 border-primary text-gray-700 dark:text-white font-medium shadow-sm animate-fade-in-scale\"\n                      : \"hover:bg-gray-50 dark:hover:bg-gray-700\"\n                  )}\n                  title={isCollapsed ? item.name : undefined}\n                  onClick={() => setIsMobileOpen(false)}\n                  style={{\n                    animationDelay: `${index * 50}ms`,\n                  }}\n                >\n                {/* Icon with subtle animations */}\n                <item.icon className={cn(\n                  \"w-5 h-5 flex-shrink-0 transition-all duration-200\",\n                  isActive ? \"text-primary\" : \"group-hover:scale-110\",\n                  isCollapsed && \"mx-auto\"\n                )} />\n                \n                {/* Text content with slide animation */}\n                <div className={cn(\n                  \"flex items-center justify-between w-full min-w-0 transition-all duration-300 ease-in-out\",\n                  isCollapsed ? \"opacity-0 w-0 overflow-hidden translate-x-4\" : \"opacity-100 w-auto translate-x-0\"\n                )}>\n                  <span className=\"truncate\">{item.name}</span>\n                  \n                  {/* Badges and indicators */}\n                  <div className=\"flex items-center space-x-2 ml-auto\">\n                    {item.name === \"Task Queue\" && (\n                      <span className=\"bg-warning text-white text-xs px-2 py-1 rounded-full animate-pulse\">\n                        12\n                      </span>\n                    )}\n                    {item.name === \"Approvals\" && (\n                      <span className=\"bg-error text-white text-xs px-2 py-1 rounded-full animate-bounce\">\n                        5\n                      </span>\n                    )}\n                    {item.name === \"Security\" && (\n                      <div className={cn(\n                        \"w-2 h-2 rounded-full transition-colors duration-300\",\n                        connectionStatus === \"connected\" ? \"bg-secure animate-pulse\" : \"bg-error\"\n                      )} />\n                    )}\n                  </div>\n                </div>\n\n                {/* Hover indicator */}\n                <div className={cn(\n                  \"absolute inset-y-0 left-0 w-1 bg-primary transition-all duration-300\",\n                  isActive ? \"opacity-100\" : \"opacity-0 group-hover:opacity-50\"\n                )} />\n                </a>\n              )}\n            </Link>\n          );\n        })}\n        \n        <Link href=\"/settings\">\n          {(props: any) => (\n            <a\n              {...props}\n              className={cn(\n                \"group flex items-center px-4 py-3 text-gray-600 dark:text-gray-300 rounded-lg relative overflow-hidden\",\n                \"transition-all duration-200 ease-in-out hover:bg-gray-50 dark:hover:bg-gray-700 hover:translate-x-1 hover:shadow-md\",\n                isCollapsed ? \"justify-center\" : \"space-x-3\"\n              )}\n              title={isCollapsed ? \"Settings\" : undefined}\n              onClick={() => setIsMobileOpen(false)}\n            >\n              <Settings className={cn(\n                \"w-5 h-5 flex-shrink-0 transition-all duration-200 group-hover:scale-110 group-hover:rotate-45\",\n                isCollapsed && \"mx-auto\"\n              )} />\n              <span className={cn(\n                \"transition-all duration-300 ease-in-out\",\n                isCollapsed ? \"opacity-0 w-0 overflow-hidden translate-x-4\" : \"opacity-100 w-auto translate-x-0\"\n              )}>\n                Settings\n              </span>\n              \n              {/* Hover indicator */}\n              <div className=\"absolute inset-y-0 left-0 w-1 bg-primary transition-all duration-300 opacity-0 group-hover:opacity-50\" />\n            </a>\n          )}\n        </Link>\n        </nav>\n      </div>\n      \n      {/* User Profile - Animated */}\n      <div className=\"border-t border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 flex-shrink-0\">\n        <div className={cn(\n          \"p-4 transition-all duration-300 ease-in-out\",\n          isCollapsed ? \"px-2\" : \"px-4\"\n        )}>\n          <div className={cn(\n            \"flex items-center transition-all duration-300 ease-in-out\",\n            isCollapsed ? \"justify-center\" : \"space-x-3\"\n          )}>\n            {/* Avatar with hover animation */}\n            <div className={cn(\n              \"bg-primary rounded-full flex items-center justify-center transition-all duration-300 hover:scale-110\",\n              isCollapsed ? \"w-10 h-10\" : \"w-8 h-8\"\n            )}>\n              {(user as any)?.email ? (\n                <span className={cn(\n                  \"font-medium text-white transition-all duration-300\",\n                  isCollapsed ? \"text-sm\" : \"text-xs\"\n                )}>\n                  {(user as any).email.charAt(0).toUpperCase()}\n                </span>\n              ) : (\n                <User className={cn(\n                  \"text-white transition-all duration-300\",\n                  isCollapsed ? \"w-5 h-5\" : \"w-4 h-4\"\n                )} />\n              )}\n            </div>\n            \n            {/* User info with slide animation */}\n            <div className={cn(\n              \"flex-1 min-w-0 transition-all duration-300 ease-in-out\",\n              isCollapsed ? \"opacity-0 w-0 overflow-hidden translate-x-4\" : \"opacity-100 w-auto translate-x-0\"\n            )}>\n              <p className=\"text-sm font-medium text-gray-900 dark:text-white truncate\">\n                {(user as any)?.email || \"User\"}\n              </p>\n              <p className=\"text-xs text-gray-500 dark:text-gray-400 truncate\">\n                Admin • Online\n              </p>\n            </div>\n            \n            {/* Status indicator */}\n            <div className={cn(\n              \"rounded-full transition-all duration-300\",\n              isCollapsed ? \"w-3 h-3\" : \"w-2 h-2\",\n              connectionStatus === \"connected\" ? \"bg-green-500 animate-pulse\" : \"bg-red-500\"\n            )} />\n          </div>\n        </div>\n      </div>\n    </div>\n    </>\n  );\n}\n",
      "size_bytes": 11751
    },
    "client/src/components/Security/PasswordChangeModal.tsx": {
      "content": "import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Dialog, \n  DialogContent, \n  DialogDescription, \n  DialogHeader, \n  DialogTitle \n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  Shield, \n  Eye, \n  EyeOff, \n  CheckCircle, \n  X, \n  AlertTriangle,\n  Key\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface PasswordPolicy {\n  minLength: number;\n  requireUppercase: boolean;\n  requireLowercase: boolean;\n  requireNumbers: boolean;\n  requireSpecialChars: boolean;\n  maxAge: number;\n  historyCount: number;\n}\n\ninterface PasswordChangeModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  isForced?: boolean; // For mandatory password changes\n  userHas2FA?: boolean;\n}\n\nexport default function PasswordChangeModal({ \n  isOpen, \n  onClose, \n  isForced = false,\n  userHas2FA = false \n}: PasswordChangeModalProps) {\n  const { toast } = useToast();\n  const [currentPassword, setCurrentPassword] = useState(\"\");\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [twoFactorCode, setTwoFactorCode] = useState(\"\");\n  const [showCurrentPassword, setShowCurrentPassword] = useState(false);\n  const [showNewPassword, setShowNewPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  // Fetch password policy\n  const { data: passwordPolicy } = useQuery<PasswordPolicy>({\n    queryKey: [\"/api/auth/password-policy\"],\n  });\n\n  // Password change mutation\n  const changePasswordMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/auth/change-password\", {\n        currentPassword,\n        newPassword,\n        twoFactorToken: userHas2FA ? twoFactorCode : undefined\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Password Changed\",\n        description: \"Your password has been updated successfully\",\n      });\n      handleClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Password Change Failed\",\n        description: error.message || \"Failed to change password\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleClose = () => {\n    if (isForced) return; // Can't close if forced\n    \n    setCurrentPassword(\"\");\n    setNewPassword(\"\");\n    setConfirmPassword(\"\");\n    setTwoFactorCode(\"\");\n    onClose();\n  };\n\n  const validatePassword = (password: string) => {\n    if (!passwordPolicy) return { score: 0, checks: [] };\n\n    const checks = [\n      { \n        label: `At least ${passwordPolicy.minLength} characters`, \n        passed: password.length >= passwordPolicy.minLength \n      },\n      { \n        label: \"Contains uppercase letter\", \n        passed: !passwordPolicy.requireUppercase || /[A-Z]/.test(password) \n      },\n      { \n        label: \"Contains lowercase letter\", \n        passed: !passwordPolicy.requireLowercase || /[a-z]/.test(password) \n      },\n      { \n        label: \"Contains number\", \n        passed: !passwordPolicy.requireNumbers || /\\d/.test(password) \n      },\n      { \n        label: \"Contains special character\", \n        passed: !passwordPolicy.requireSpecialChars || /[!@#$%^&*(),.?\":{}|<>]/.test(password) \n      },\n    ];\n\n    const score = (checks.filter(check => check.passed).length / checks.length) * 100;\n    return { score, checks };\n  };\n\n  const passwordValidation = validatePassword(newPassword);\n  const passwordsMatch = newPassword === confirmPassword;\n  const allFieldsValid = currentPassword && \n                        newPassword && \n                        confirmPassword && \n                        passwordsMatch && \n                        passwordValidation.score === 100 &&\n                        (!userHas2FA || twoFactorCode.length === 6);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!allFieldsValid) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please ensure all fields are valid before submitting\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    changePasswordMutation.mutate();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <div className=\"flex items-center space-x-2\">\n            <Shield className=\"w-5 h-5 text-blue-600\" />\n            <DialogTitle>\n              {isForced ? \"Password Change Required\" : \"Change Password\"}\n            </DialogTitle>\n          </div>\n          <DialogDescription>\n            {isForced \n              ? \"Your password has expired. Please choose a new secure password to continue.\"\n              : \"Update your account password to maintain security.\"\n            }\n          </DialogDescription>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {isForced && (\n            <Alert variant=\"destructive\">\n              <AlertTriangle className=\"w-4 h-4\" />\n              <AlertDescription>\n                Your password has been expired for security reasons. \n                You must change it now to continue using the platform.\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {/* Current Password */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"current-password\">Current Password</Label>\n            <div className=\"relative\">\n              <Input\n                id=\"current-password\"\n                type={showCurrentPassword ? \"text\" : \"password\"}\n                value={currentPassword}\n                onChange={(e) => setCurrentPassword(e.target.value)}\n                required\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-2 top-1/2 -translate-y-1/2 h-auto p-1\"\n                onClick={() => setShowCurrentPassword(!showCurrentPassword)}\n              >\n                {showCurrentPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n              </Button>\n            </div>\n          </div>\n\n          {/* New Password */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"new-password\">New Password</Label>\n            <div className=\"relative\">\n              <Input\n                id=\"new-password\"\n                type={showNewPassword ? \"text\" : \"password\"}\n                value={newPassword}\n                onChange={(e) => setNewPassword(e.target.value)}\n                required\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-2 top-1/2 -translate-y-1/2 h-auto p-1\"\n                onClick={() => setShowNewPassword(!showNewPassword)}\n              >\n                {showNewPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n              </Button>\n            </div>\n            \n            {newPassword && (\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center space-x-2\">\n                  <Progress value={passwordValidation.score} className=\"flex-1\" />\n                  <span className=\"text-sm text-gray-500\">\n                    {passwordValidation.score.toFixed(0)}%\n                  </span>\n                </div>\n                <div className=\"space-y-1\">\n                  {passwordValidation.checks.map((check, index) => (\n                    <div key={index} className=\"flex items-center space-x-2 text-sm\">\n                      {check.passed ? (\n                        <CheckCircle className=\"w-3 h-3 text-green-500\" />\n                      ) : (\n                        <X className=\"w-3 h-3 text-red-500\" />\n                      )}\n                      <span className={check.passed ? \"text-green-600\" : \"text-red-600\"}>\n                        {check.label}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Confirm Password */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"confirm-password\">Confirm New Password</Label>\n            <div className=\"relative\">\n              <Input\n                id=\"confirm-password\"\n                type={showConfirmPassword ? \"text\" : \"password\"}\n                value={confirmPassword}\n                onChange={(e) => setConfirmPassword(e.target.value)}\n                required\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-2 top-1/2 -translate-y-1/2 h-auto p-1\"\n                onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n              >\n                {showConfirmPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n              </Button>\n            </div>\n            {confirmPassword && !passwordsMatch && (\n              <p className=\"text-sm text-red-600\">Passwords do not match</p>\n            )}\n          </div>\n\n          {/* Two-Factor Code */}\n          {userHas2FA && (\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"two-factor-code\">\n                <div className=\"flex items-center space-x-2\">\n                  <Key className=\"w-4 h-4\" />\n                  <span>Two-Factor Authentication Code</span>\n                </div>\n              </Label>\n              <Input\n                id=\"two-factor-code\"\n                type=\"text\"\n                placeholder=\"Enter 6-digit code\"\n                value={twoFactorCode}\n                onChange={(e) => setTwoFactorCode(e.target.value.replace(/\\D/g, '').slice(0, 6))}\n                maxLength={6}\n                className=\"text-center text-lg tracking-wider\"\n                required\n              />\n              <p className=\"text-sm text-gray-500\">\n                Enter the code from your authenticator app\n              </p>\n            </div>\n          )}\n\n          <div className=\"flex space-x-3 pt-4\">\n            <Button\n              type=\"submit\"\n              disabled={!allFieldsValid || changePasswordMutation.isPending}\n              className=\"flex-1\"\n            >\n              {changePasswordMutation.isPending ? \"Changing...\" : \"Change Password\"}\n            </Button>\n            {!isForced && (\n              <Button type=\"button\" variant=\"outline\" onClick={handleClose}>\n                Cancel\n              </Button>\n            )}\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}",
      "size_bytes": 10981
    },
    "client/src/components/Security/TwoFactorSetup.tsx": {
      "content": "import { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Shield, \n  Smartphone, \n  Key, \n  Copy, \n  CheckCircle, \n  AlertTriangle,\n  QrCode,\n  Download\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface TwoFactorSetup {\n  secret: string;\n  qrCodeUrl: string;\n  backupCodes: string[];\n  manualEntryKey: string;\n}\n\ninterface TwoFactorSetupProps {\n  onComplete: () => void;\n  onCancel: () => void;\n}\n\nexport default function TwoFactorSetup({ onComplete, onCancel }: TwoFactorSetupProps) {\n  const { toast } = useToast();\n  const [verificationCode, setVerificationCode] = useState(\"\");\n  const [step, setStep] = useState<\"setup\" | \"verify\" | \"backup\">(\"setup\");\n  const [setupData, setSetupData] = useState<TwoFactorSetup | null>(null);\n\n  // Generate 2FA setup\n  const setupMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"GET\", \"/api/auth/2fa/setup\") as TwoFactorSetup;\n    },\n    onSuccess: (data) => {\n      setSetupData(data);\n      setStep(\"verify\");\n      toast({\n        title: \"2FA Setup Generated\",\n        description: \"Scan the QR code with your authenticator app\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Setup Error\",\n        description: (error as Error).message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Verify and enable 2FA\n  const verifyMutation = useMutation({\n    mutationFn: async () => {\n      if (!setupData) throw new Error(\"Setup data not available\");\n      \n      return await apiRequest(\"POST\", \"/api/auth/2fa/verify-setup\", {\n        secret: setupData.secret,\n        token: verificationCode,\n        backupCodes: setupData.backupCodes\n      });\n    },\n    onSuccess: () => {\n      setStep(\"backup\");\n      toast({\n        title: \"2FA Enabled\",\n        description: \"Two-factor authentication has been successfully enabled\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Verification Failed\",\n        description: (error as Error).message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    toast({\n      title: \"Copied\",\n      description: \"Text copied to clipboard\",\n    });\n  };\n\n  const downloadBackupCodes = () => {\n    if (!setupData) return;\n    \n    const content = `Agent Factory Platform - Backup Codes\\n\\nGenerated: ${new Date().toLocaleString()}\\n\\nUse these codes if you lose access to your authenticator app:\\n\\n${setupData.backupCodes.join('\\n')}\\n\\nIMPORTANT:\\n- Each code can only be used once\\n- Store these codes in a secure location\\n- Do not share these codes with anyone`;\n    \n    const blob = new Blob([content], { type: 'text/plain' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'agent-factory-backup-codes.txt';\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n    \n    toast({\n      title: \"Downloaded\",\n      description: \"Backup codes downloaded successfully\",\n    });\n  };\n\n  const handleVerifyCode = () => {\n    if (!verificationCode.trim()) {\n      toast({\n        title: \"Verification Required\",\n        description: \"Please enter the verification code from your authenticator app\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    verifyMutation.mutate();\n  };\n\n  const handleComplete = () => {\n    onComplete();\n    toast({\n      title: \"2FA Setup Complete\",\n      description: \"Your account is now protected with two-factor authentication\",\n    });\n  };\n\n  return (\n    <div className=\"w-full p-4\">\n      <Card className=\"max-w-2xl mx-auto\">\n        <CardHeader>\n          <div className=\"flex items-center space-x-2\">\n            <Shield className=\"w-6 h-6 text-blue-600\" />\n            <div>\n              <CardTitle>Two-Factor Authentication Setup</CardTitle>\n              <CardDescription>\n                Add an extra layer of security to your National Reserve account\n              </CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {step === \"setup\" && (\n            <div className=\"space-y-6\">\n              <Alert>\n                <Shield className=\"w-4 h-4\" />\n                <AlertDescription>\n                  Two-factor authentication (2FA) adds an extra layer of security to your account. \n                  You'll need an authenticator app like Google Authenticator, Authy, or Microsoft Authenticator.\n                </AlertDescription>\n              </Alert>\n\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-medium\">What you'll need:</h3>\n                <ul className=\"space-y-2 text-sm text-gray-600 dark:text-gray-300\">\n                  <li className=\"flex items-center space-x-2\">\n                    <Smartphone className=\"w-4 h-4\" />\n                    <span>A smartphone with an authenticator app installed</span>\n                  </li>\n                  <li className=\"flex items-center space-x-2\">\n                    <Key className=\"w-4 h-4\" />\n                    <span>Access to scan a QR code or enter a setup key</span>\n                  </li>\n                  <li className=\"flex items-center space-x-2\">\n                    <Download className=\"w-4 h-4\" />\n                    <span>A secure place to store backup recovery codes</span>\n                  </li>\n                </ul>\n              </div>\n\n              <div className=\"flex space-x-3\">\n                <Button \n                  onClick={() => setupMutation.mutate()}\n                  disabled={setupMutation.isPending}\n                  className=\"flex-1\"\n                >\n                  {setupMutation.isPending ? \"Generating...\" : \"Start Setup\"}\n                </Button>\n                <Button variant=\"outline\" onClick={onCancel}>\n                  Cancel\n                </Button>\n              </div>\n            </div>\n          )}\n\n          {step === \"verify\" && setupData && (\n            <div className=\"space-y-6\">\n              <Alert>\n                <QrCode className=\"w-4 h-4\" />\n                <AlertDescription>\n                  Scan the QR code below with your authenticator app, then enter the 6-digit code to verify setup.\n                </AlertDescription>\n              </Alert>\n\n              <Tabs defaultValue=\"qr\" className=\"space-y-4\">\n                <TabsList className=\"grid w-full grid-cols-2\">\n                  <TabsTrigger value=\"qr\">QR Code</TabsTrigger>\n                  <TabsTrigger value=\"manual\">Manual Entry</TabsTrigger>\n                </TabsList>\n                \n                <TabsContent value=\"qr\" className=\"space-y-4\">\n                  <div className=\"flex flex-col items-center space-y-4\">\n                    <div className=\"p-4 bg-white rounded-lg border\">\n                      <img \n                        src={setupData.qrCodeUrl} \n                        alt=\"2FA QR Code\" \n                        className=\"w-48 h-48\"\n                      />\n                    </div>\n                    <p className=\"text-sm text-gray-500 text-center\">\n                      Scan this QR code with your authenticator app\n                    </p>\n                  </div>\n                </TabsContent>\n                \n                <TabsContent value=\"manual\" className=\"space-y-4\">\n                  <div className=\"space-y-3\">\n                    <Label>Manual Entry Key:</Label>\n                    <div className=\"flex items-center space-x-2\">\n                      <Input \n                        value={setupData.manualEntryKey} \n                        readOnly \n                        className=\"font-mono text-sm\"\n                      />\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => copyToClipboard(setupData.manualEntryKey)}\n                      >\n                        <Copy className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                    <p className=\"text-sm text-gray-500\">\n                      Enter this key manually in your authenticator app if you can't scan the QR code\n                    </p>\n                  </div>\n                </TabsContent>\n              </Tabs>\n\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"verification-code\">Verification Code</Label>\n                  <Input\n                    id=\"verification-code\"\n                    type=\"text\"\n                    placeholder=\"Enter 6-digit code\"\n                    value={verificationCode}\n                    onChange={(e) => setVerificationCode(e.target.value.replace(/\\D/g, '').slice(0, 6))}\n                    maxLength={6}\n                    className=\"text-center text-lg tracking-wider\"\n                  />\n                  <p className=\"text-sm text-gray-500\">\n                    Enter the 6-digit code from your authenticator app\n                  </p>\n                </div>\n\n                <div className=\"flex space-x-3\">\n                  <Button \n                    onClick={handleVerifyCode}\n                    disabled={verificationCode.length !== 6 || verifyMutation.isPending}\n                    className=\"flex-1\"\n                  >\n                    {verifyMutation.isPending ? \"Verifying...\" : \"Verify & Enable\"}\n                  </Button>\n                  <Button variant=\"outline\" onClick={onCancel}>\n                    Cancel\n                  </Button>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {step === \"backup\" && setupData && (\n            <div className=\"space-y-6\">\n              <Alert>\n                <Key className=\"w-4 h-4\" />\n                <AlertDescription>\n                  <strong>Important:</strong> Save these backup codes in a secure location. \n                  You can use them to access your account if you lose your authenticator device.\n                </AlertDescription>\n              </Alert>\n\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"text-lg font-medium\">Backup Recovery Codes</h3>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={downloadBackupCodes}\n                  >\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Download\n                  </Button>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-2 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                  {setupData.backupCodes.map((code, index) => (\n                    <div key={index} className=\"flex items-center space-x-2\">\n                      <Badge variant=\"outline\" className=\"font-mono\">\n                        {code}\n                      </Badge>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => copyToClipboard(code)}\n                        className=\"h-6 w-6 p-0\"\n                      >\n                        <Copy className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n\n                <Alert variant=\"destructive\">\n                  <AlertTriangle className=\"w-4 h-4\" />\n                  <AlertDescription>\n                    <strong>Security Notice:</strong>\n                    <ul className=\"mt-2 space-y-1 text-sm\">\n                      <li>• Each backup code can only be used once</li>\n                      <li>• Store these codes in a secure password manager</li>\n                      <li>• Do not share these codes with anyone</li>\n                      <li>• Generate new codes if you suspect they're compromised</li>\n                    </ul>\n                  </AlertDescription>\n                </Alert>\n\n                <div className=\"flex items-center justify-center\">\n                  <Button onClick={handleComplete} className=\"w-full\">\n                    <CheckCircle className=\"w-4 h-4 mr-2\" />\n                    Complete Setup\n                  </Button>\n                </div>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}",
      "size_bytes": 13068
    },
    "client/src/components/TaskQueue/TaskCard.tsx": {
      "content": "import { Task } from \"@/types/task\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { \n  Clock, \n  Play, \n  CheckCircle, \n  XCircle, \n  AlertCircle,\n  MoreHorizontal\n} from \"lucide-react\";\n\ninterface TaskCardProps {\n  task: Task;\n  onStatusChange?: (taskId: number, status: string) => void;\n}\n\nfunction getStatusConfig(status: string) {\n  switch (status) {\n    case \"pending\":\n      return {\n        icon: Clock,\n        color: \"bg-gray-100 text-gray-600\",\n        label: \"Pending\",\n      };\n    case \"processing\":\n      return {\n        icon: Play,\n        color: \"bg-blue-100 text-blue-600\",\n        label: \"Processing\",\n      };\n    case \"completed\":\n      return {\n        icon: CheckCircle,\n        color: \"bg-success/10 text-success\",\n        label: \"Completed\",\n      };\n    case \"failed\":\n      return {\n        icon: XCircle,\n        color: \"bg-error/10 text-error\",\n        label: \"Failed\",\n      };\n    case \"cancelled\":\n      return {\n        icon: AlertCircle,\n        color: \"bg-warning/10 text-warning\",\n        label: \"Cancelled\",\n      };\n    default:\n      return {\n        icon: Clock,\n        color: \"bg-gray-100 text-gray-600\",\n        label: status,\n      };\n  }\n}\n\nfunction getPriorityColor(priority: string) {\n  switch (priority) {\n    case \"high\":\n      return \"border-l-error\";\n    case \"medium\":\n      return \"border-l-warning\";\n    case \"low\":\n      return \"border-l-success\";\n    default:\n      return \"border-l-gray-300\";\n  }\n}\n\nexport default function TaskCard({ task, onStatusChange }: TaskCardProps) {\n  const statusConfig = getStatusConfig(task.status);\n  const StatusIcon = statusConfig.icon;\n\n  return (\n    <Card className={cn(\"border-l-4\", getPriorityColor(task.priority))}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex-1\">\n            <div className=\"flex items-center space-x-3 mb-2\">\n              <h3 className=\"font-semibold text-gray-900 dark:text-white\">\n                {task.title}\n              </h3>\n              <Badge className={cn(\"text-xs\", statusConfig.color)}>\n                <StatusIcon className=\"w-3 h-3 mr-1\" />\n                {statusConfig.label}\n              </Badge>\n              <Badge variant=\"outline\" className=\"text-xs\">\n                {task.priority}\n              </Badge>\n            </div>\n            \n            {task.description && (\n              <p className=\"text-sm text-gray-600 dark:text-gray-300 mb-3\">\n                {task.description}\n              </p>\n            )}\n            \n            <div className=\"flex items-center space-x-4 text-xs text-gray-500 dark:text-gray-400\">\n              <span>Type: {task.type}</span>\n              {task.createdAt && (\n                <span>\n                  Created {formatDistanceToNow(new Date(task.createdAt), { addSuffix: true })}\n                </span>\n              )}\n              {task.scheduledFor && new Date(task.scheduledFor) > new Date() && (\n                <span>\n                  Scheduled for {formatDistanceToNow(new Date(task.scheduledFor), { addSuffix: true })}\n                </span>\n              )}\n            </div>\n            \n            {task.error && (\n              <div className=\"mt-3 p-2 bg-error/10 border border-error/20 rounded text-sm text-error\">\n                Error: {task.error}\n              </div>\n            )}\n            \n            {task.result && task.status === \"completed\" && (\n              <div className=\"mt-3 p-2 bg-success/10 border border-success/20 rounded text-sm\">\n                <strong>Result:</strong> {JSON.stringify(task.result, null, 2)}\n              </div>\n            )}\n          </div>\n          \n          <div className=\"flex items-center space-x-2 ml-4\">\n            {task.status === \"pending\" && onStatusChange && (\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => onStatusChange(task.id, \"cancelled\")}\n              >\n                Cancel\n              </Button>\n            )}\n            \n            {task.status === \"failed\" && onStatusChange && (\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => onStatusChange(task.id, \"pending\")}\n              >\n                Retry\n              </Button>\n            )}\n            \n            <Button size=\"sm\" variant=\"ghost\">\n              <MoreHorizontal className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n",
      "size_bytes": 4747
    },
    "client/src/components/ui/accordion.tsx": {
      "content": "import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n",
      "size_bytes": 1977
    },
    "client/src/components/ui/alert-dialog.tsx": {
      "content": "import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n",
      "size_bytes": 4420
    },
    "client/src/components/ui/alert.tsx": {
      "content": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n",
      "size_bytes": 1584
    },
    "client/src/components/ui/aspect-ratio.tsx": {
      "content": "import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n",
      "size_bytes": 140
    },
    "client/src/components/ui/avatar.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n",
      "size_bytes": 1419
    },
    "client/src/components/ui/badge.tsx": {
      "content": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n",
      "size_bytes": 1128
    },
    "client/src/components/ui/breadcrumb.tsx": {
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n",
      "size_bytes": 2712
    },
    "client/src/components/ui/button.tsx": {
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n",
      "size_bytes": 1901
    },
    "client/src/components/ui/calendar.tsx": {
      "content": "import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n",
      "size_bytes": 2695
    },
    "client/src/components/ui/card.tsx": {
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n",
      "size_bytes": 1858
    },
    "client/src/components/ui/carousel.tsx": {
      "content": "import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n",
      "size_bytes": 6210
    },
    "client/src/components/ui/chart.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n",
      "size_bytes": 10481
    },
    "client/src/components/ui/checkbox.tsx": {
      "content": "import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n",
      "size_bytes": 1056
    },
    "client/src/components/ui/collapsible.tsx": {
      "content": "\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n",
      "size_bytes": 329
    },
    "client/src/components/ui/command.tsx": {
      "content": "import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n",
      "size_bytes": 4885
    },
    "client/src/components/ui/context-menu.tsx": {
      "content": "import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n",
      "size_bytes": 7428
    },
    "client/src/components/ui/dialog.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n",
      "size_bytes": 3848
    },
    "client/src/components/ui/drawer.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n",
      "size_bytes": 3021
    },
    "client/src/components/ui/dropdown-menu.tsx": {
      "content": "import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n",
      "size_bytes": 7609
    },
    "client/src/components/ui/form.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n",
      "size_bytes": 4120
    },
    "client/src/components/ui/hover-card.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n",
      "size_bytes": 1251
    },
    "client/src/components/ui/input-otp.tsx": {
      "content": "import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n",
      "size_bytes": 2154
    },
    "client/src/components/ui/input.tsx": {
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n",
      "size_bytes": 791
    },
    "client/src/components/ui/label.tsx": {
      "content": "import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n",
      "size_bytes": 710
    },
    "client/src/components/ui/menubar.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n",
      "size_bytes": 8605
    },
    "client/src/components/ui/navigation-menu.tsx": {
      "content": "import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n",
      "size_bytes": 5128
    },
    "client/src/components/ui/pagination.tsx": {
      "content": "import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n",
      "size_bytes": 2751
    },
    "client/src/components/ui/popover.tsx": {
      "content": "import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n",
      "size_bytes": 1280
    },
    "client/src/components/ui/progress.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n",
      "size_bytes": 791
    },
    "client/src/components/ui/radio-group.tsx": {
      "content": "import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n",
      "size_bytes": 1467
    },
    "client/src/components/ui/resizable.tsx": {
      "content": "\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n",
      "size_bytes": 1723
    },
    "client/src/components/ui/scroll-area.tsx": {
      "content": "import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n",
      "size_bytes": 1642
    },
    "client/src/components/ui/select.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n",
      "size_bytes": 5742
    },
    "client/src/components/ui/separator.tsx": {
      "content": "import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n",
      "size_bytes": 756
    },
    "client/src/components/ui/sheet.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n",
      "size_bytes": 4281
    },
    "client/src/components/ui/sidebar.tsx": {
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n",
      "size_bytes": 23567
    },
    "client/src/components/ui/skeleton.tsx": {
      "content": "import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n",
      "size_bytes": 261
    },
    "client/src/components/ui/slider.tsx": {
      "content": "import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n",
      "size_bytes": 1077
    },
    "client/src/components/ui/switch.tsx": {
      "content": "import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n",
      "size_bytes": 1139
    },
    "client/src/components/ui/table.tsx": {
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n",
      "size_bytes": 2765
    },
    "client/src/components/ui/tabs.tsx": {
      "content": "import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n",
      "size_bytes": 1883
    },
    "client/src/components/ui/textarea.tsx": {
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n",
      "size_bytes": 689
    },
    "client/src/components/ui/toast.tsx": {
      "content": "import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n",
      "size_bytes": 4845
    },
    "client/src/components/ui/toaster.tsx": {
      "content": "import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n",
      "size_bytes": 772
    },
    "client/src/components/ui/toggle-group.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n",
      "size_bytes": 1753
    },
    "client/src/components/ui/toggle.tsx": {
      "content": "import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n",
      "size_bytes": 1527
    },
    "client/src/components/ui/tooltip.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n",
      "size_bytes": 1209
    }
  },
  "version": 1
}
